{"version":3,"sources":["cleantalk-admin.js","apbct-common-functions.js"],"names":["apbct_admin_sendAJAX","data","params","obj","let","callback","callbackContext","callback_context","callbackParams","callback_params","async","notJson","timeout","button","spinner","progressbar","ctAdminCommon","_ajax_nonce","Math","random","no_cache","setAttribute","style","cursor","jQuery","css","ajax","type","url","_ajax_url","success","result","removeAttribute","JSON","parse","error","setTimeout","fadeOut","cleantalkModal","loaded","toString","open","alert","apply","concat","jqXHR","textStatus","errorThrown","console","log","ctDecorationSelectorActions","selector","document","querySelector","colorPicker","headingText","defaultThemeExpectedValue","value","addEventListener","event","selectedValue","target","length","apbctSetEmailDecoderPopupAnimation","animationElements","animationWrapper","createElement","classList","i","apbctEEAnimationDogOne","innerText","append","ctFillDecodedEmailHandler","clickSource","ctWlBrandname","encodedEmail","ctPublic","this","removeEventListener","encodedEmailNodesIsMixed","wl_brandname","encodedEmailNodes","plugin_name","encodedEmailNode","body","add","popupHeaderWrapper","popupTextWrapper","popupTextWaiting","popupTextDecoding","encoderPopup","getElementById","innerHTML","ctPublicFunctions","text__ee_wait_for_decoding_2","waitingPopup","popupHeader","color","id","text__ee_wait_for_decoding","text__ee_decoding_process","apbctAjaxEmailDecodeBulk","event_javascript_data","getJavascriptClientData","post_url","location","href","referrer","encodedEmails","encodedEmailsCollection","indexOf","preventDefault","apbctTooltip","apbct","dataset","originalString","stringify","data__ajax_type","apbct_public_sendREST","method","ctSetCookie","emailEncoderPassKey","apbctEmailEncoderCallbackBulk","onErrorCallback","res","resetEncodedNodes","ctShowDecodeComment","action","apbct_public_sendAJAX","0","is_allowed","popup","email","currentResultData","forEach","row","encoded_email","decoded_email","split","firstNode","selectableEmail","wrapper","title","text__ee_click_to_select","msg","text__ee_original_email","outerHTML","secondNode","remove","buttonWrapper","text__ee_got_it","fillDecodedEmails","click","text__ee_blocked","comment","text__ee_cannot_connect","element","text__ee_cannot_decode","popupText","text__ee_email_decoder","decodingResult","baseElementContent","replace","querySelectorAll","encodedEmailTextInsideMailto","el","ctProcessDecodedDataResult","response","targetElement","ctFillDecodedEmail","html","ready","$","on","ctDate","Date","getTime","ctSecure","protocol","cookie","toUTCString","e","parent","after","apbctNoticeDismissSuccess","siblings","apbctNoticeName","attr","notice_id","confirm","notice_when_deleting_user_text","window","btnForceProtectionOn","checked","apbctNoticeForceProtectionOn","spmOrderId","order_id","reload","message","includes"],"mappings":"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","file":"cleantalk-admin.min.js","sourcesContent":["jQuery(document).ready(function($) {\n    // Auto update banner close handler\n    jQuery('.apbct_update_notice').on('click', 'button', function() {\n        let ctDate = new Date(new Date().getTime() + 1000 * 86400 * 30 );\n        let ctSecure = location.protocol === 'https:' ? '; secure' : '';\n        document.cookie = 'apbct_update_banner_closed=1; path=/; expires=' +\n        ctDate.toUTCString() + '; samesite=lax' + ctSecure;\n    });\n\n    jQuery('li a[href=\"options-general.php?page=cleantalk\"]').css('white-space', 'nowrap')\n        .css('display', 'inline-block');\n\n    jQuery('body').on('click', '.apbct-notice .notice-dismiss-link', function(e) {\n        jQuery(e.target).parent()\n            .parent('.notice')\n            .after('<div id=\"apbct-notice-dismiss-success\" class=\"notice notice-success is-dismissible\"><p>' +\n                ctAdminCommon.apbctNoticeDismissSuccess +\n                '</p></div>');\n        setTimeout(function() {\n            jQuery('#apbct-notice-dismiss-success').fadeOut();\n        }, 2000);\n        jQuery(e.target).parent().siblings('.apbct-notice .notice-dismiss').click();\n    });\n    jQuery('body').on('click', '.apbct-notice .notice-dismiss', function(e) {\n        let apbctNoticeName = jQuery(e.target).parent().attr('id');\n        if ( apbctNoticeName ) {\n            apbct_admin_sendAJAX(\n                {\n                    'action': 'cleantalk_dismiss_notice',\n                    'notice_id': apbctNoticeName,\n                },\n                {\n                    'callback': null,\n                    'notJson': true,\n                },\n            );\n        }\n    });\n\n    // Notice when deleting user\n    jQuery('.ct_username .row-actions .delete a').on('click', function(e) {\n        e.preventDefault();\n\n        let result = confirm(ctAdminCommon.notice_when_deleting_user_text);\n\n        if (result) {\n            window.location = this.href;\n        }\n    });\n\n    let btnForceProtectionOn = document.querySelector('#apbct_setting_forms__force_protection__On');\n    if (btnForceProtectionOn) {\n        btnForceProtectionOn.addEventListener('click', function(e) {\n            if (btnForceProtectionOn.checked) {\n                let result = confirm(ctAdminCommon.apbctNoticeForceProtectionOn);\n\n                if (!result) {\n                    e.preventDefault();\n                }\n            }\n        });\n    }\n    // Restore spam order\n    $('.apbct-restore-spam-order-button').click(function() {\n        const spmOrderId = $(this).data('spam-order-id');\n        let data = {\n            action: 'apbct_restore_spam_order',\n            _ajax_nonce: ctAdminCommon._ajax_nonce,\n            order_id: spmOrderId,\n        };\n        $.ajax({\n            type: 'POST',\n            url: ctAdminCommon._ajax_url,\n            data: data,\n            success: function(result) {\n                if (result.success) {\n                    window.location.reload();\n                } else {\n                    alert(result.data.message);\n                }\n            },\n        });\n    });\n\n    // Email decoder example\n    if (window.location.href.includes('options-general.php?page=cleantalk')) {\n        let encodedEmailNode = document.querySelector('[data-original-string]');\n        if (encodedEmailNode) {\n            ctAdminCommon.encodedEmailNode = encodedEmailNode;\n            encodedEmailNode.style.cursor = 'pointer';\n            encodedEmailNode.addEventListener('click', ctFillDecodedEmailHandler);\n        }\n    }\n\n    ctDecorationSelectorActions();\n});\n// eslint-disable-next-line camelcase,require-jsdoc,no-unused-vars\nfunction apbct_admin_sendAJAX(data, params, obj) {\n    // Default params\n    let callback = params.callback || null;\n    let callbackContext = params.callback_context || null;\n    let callbackParams = params.callback_params || null;\n    let async = params.async || true;\n    let notJson = params.notJson || null;\n    let timeout = params.timeout || 15000;\n    var obj = obj || null; // eslint-disable-line no-var\n    let button = params.button || null;\n    let spinner = params.spinner || null;\n    let progressbar = params.progressbar || null;\n\n    if (typeof (data) === 'string') {\n        data = data + '&_ajax_nonce=' + ctAdminCommon._ajax_nonce + '&no_cache=' + Math.random();\n    } else {\n        data._ajax_nonce = ctAdminCommon._ajax_nonce;\n        data.no_cache = Math.random();\n    }\n    // Button and spinner\n    if (button) {\n        button.setAttribute('disabled', 'disabled'); button.style.cursor = 'not-allowed';\n    }\n    if (spinner) jQuery(spinner).css('display', 'inline');\n\n    jQuery.ajax({\n        type: 'POST',\n        url: ctAdminCommon._ajax_url,\n        data: data,\n        async: async,\n        success: function(result) {\n            if (button) {\n                button.removeAttribute('disabled'); button.style.cursor = 'pointer';\n            }\n            if (spinner) jQuery(spinner).css('display', 'none');\n            if (!notJson) result = JSON.parse(result);\n            if (result.error) {\n                setTimeout(function() {\n                    if (progressbar) progressbar.fadeOut('slow');\n                }, 1000);\n                if ( typeof cleantalkModal !== 'undefined' ) {\n                    // Show the result by modal\n                    cleantalkModal.loaded = 'Error:<br>' + result.error.toString();\n                    cleantalkModal.open();\n                } else {\n                    alert('Error happens: ' + (result.error || 'Unkown'));\n                }\n            } else {\n                if (callback) {\n                    if (callbackParams) {\n                        callback.apply( callbackContext, callbackParams.concat( result, data, params, obj ) );\n                    } else {\n                        callback(result, data, params, obj);\n                    }\n                }\n            }\n        },\n        error: function(jqXHR, textStatus, errorThrown) {\n            if (button) {\n                button.removeAttribute('disabled'); button.style.cursor = 'pointer';\n            }\n            if (spinner) jQuery(spinner).css('display', 'none');\n            console.log('APBCT_AJAX_ERROR');\n            console.log(jqXHR);\n            console.log(textStatus);\n            console.log(errorThrown);\n        },\n        timeout: timeout,\n    });\n}\n/**\n* @return {void}\n */\nfunction ctDecorationSelectorActions() {\n    const selector = document.querySelector('#apbct_setting_comments__form_decoration_selector');\n    const colorPicker = document.querySelector('#apbct_setting_comments__form_decoration_color');\n    const headingText = document.querySelector('#apbct_setting_comments__form_decoration_text');\n    const defaultThemeExpectedValue = 'Default Theme';\n    if (colorPicker && headingText && selector) {\n        if (selector.value === defaultThemeExpectedValue) {\n            colorPicker.setAttribute('disabled', 'disabled');\n            headingText.setAttribute('disabled', 'disabled');\n        }\n        selector.addEventListener('change', function(event) {\n            const selectedValue = event.target.value;\n            if (selectedValue && selectedValue.length > 0 && selectedValue === defaultThemeExpectedValue) {\n                colorPicker.setAttribute('disabled', 'disabled');\n                headingText.setAttribute('disabled', 'disabled');\n            } else {\n                colorPicker.removeAttribute('disabled');\n                headingText.removeAttribute('disabled');\n            }\n        });\n    }\n}\n","/**\n * @return {HTMLElement} event\n */\nfunction apbctSetEmailDecoderPopupAnimation() {\n    const animationElements = ['apbct_dog_one', 'apbct_dog_two', 'apbct_dog_three'];\n    const animationWrapper = document.createElement('div');\n    animationWrapper.classList = 'apbct-ee-animation-wrapper';\n    for (let i = 0; i < animationElements.length; i++) {\n        const apbctEEAnimationDogOne = document.createElement('span');\n        apbctEEAnimationDogOne.classList = 'apbct_dog ' + animationElements[i];\n        apbctEEAnimationDogOne.innerText = '@';\n        animationWrapper.append(apbctEEAnimationDogOne);\n    }\n    return animationWrapper;\n}\n\n/**\n * @param {mixed} event\n */\nfunction ctFillDecodedEmailHandler(event = false) {\n    let clickSource = false;\n    let ctWlBrandname = '';\n    let encodedEmail = '';\n    if (typeof ctPublic !== 'undefined') {\n        this.removeEventListener('click', ctFillDecodedEmailHandler);\n        // remember clickSource\n        clickSource = this;\n        // globally remember if emails is mixed with mailto\n        ctPublic.encodedEmailNodesIsMixed = false;\n        ctWlBrandname = ctPublic.wl_brandname;\n        encodedEmail = ctPublic.encodedEmailNodes;\n    } else if (typeof ctAdminCommon !== 'undefined') {\n        ctWlBrandname = ctAdminCommon.plugin_name;\n        encodedEmail = ctAdminCommon.encodedEmailNode;\n    }\n\n    // get fade\n    document.body.classList.add('apbct-popup-fade');\n    // popup show\n    let encoderPopup = document.getElementById('apbct_popup');\n    if (!encoderPopup) {\n        // construct popup\n        let waitingPopup = document.createElement('div');\n        waitingPopup.setAttribute('class', 'apbct-popup apbct-email-encoder-popup');\n        waitingPopup.setAttribute('id', 'apbct_popup');\n\n        // construct text header\n        let popupHeaderWrapper = document.createElement('span');\n        popupHeaderWrapper.classList = 'apbct-email-encoder-elements_center';\n        let popupHeader = document.createElement('p');\n        popupHeader.innerText = ctWlBrandname;\n        popupHeader.setAttribute('class', 'apbct-email-encoder--popup-header');\n        popupHeaderWrapper.append(popupHeader);\n\n        // construct text wrapper\n        let popupTextWrapper = document.createElement('div');\n        popupTextWrapper.setAttribute('id', 'apbct_popup_text');\n        popupTextWrapper.setAttribute('class', 'apbct-email-encoder-elements_center');\n        popupTextWrapper.style.color = 'black';\n\n        // construct text first node\n        // todo make translatable\n        let popupTextWaiting = document.createElement('p');\n        popupTextWaiting.id = 'apbct_email_ecoder__popup_text_node_first';\n        popupTextWaiting.innerText = ctPublicFunctions.text__ee_wait_for_decoding;\n        popupTextWaiting.setAttribute('class', 'apbct-email-encoder-elements_center');\n\n        // construct text second node\n        // todo make translatable\n        let popupTextDecoding = document.createElement('p');\n        popupTextDecoding.id = 'apbct_email_ecoder__popup_text_node_second';\n        popupTextDecoding.innerText = ctPublicFunctions.text__ee_decoding_process;\n\n        // appending\n        popupTextWrapper.append(popupTextWaiting);\n        popupTextWrapper.append(popupTextDecoding);\n        waitingPopup.append(popupHeaderWrapper);\n        waitingPopup.append(popupTextWrapper);\n        waitingPopup.append(apbctSetEmailDecoderPopupAnimation());\n        document.body.append(waitingPopup);\n    } else {\n        encoderPopup.setAttribute('style', 'display: inherit');\n        document.getElementById('apbct_popup_text').innerHTML = ctPublicFunctions.text__ee_wait_for_decoding_2;\n    }\n\n    apbctAjaxEmailDecodeBulk(event, encodedEmail, clickSource);\n}\n\n/**\n * @param {mixed} event\n * @param {mixed} encodedEmailNodes\n * @param {mixed} clickSource\n */\nfunction apbctAjaxEmailDecodeBulk(event, encodedEmailNodes, clickSource) {\n    if (event && clickSource) {\n        // collect data\n        const javascriptClientData = getJavascriptClientData();\n        let data = {\n            event_javascript_data: javascriptClientData,\n            post_url: document.location.href,\n            referrer: document.referrer,\n            encodedEmails: '',\n        };\n        let encodedEmailsCollection = {};\n        for (let i = 0; i < encodedEmailNodes.length; i++) {\n            // disable click for mailto\n            if (\n                typeof encodedEmailNodes[i].href !== 'undefined' &&\n                encodedEmailNodes[i].href.indexOf('mailto:') === 0\n            ) {\n                event.preventDefault();\n                ctPublic.encodedEmailNodesIsMixed = true;\n            }\n\n            // Adding a tooltip\n            let apbctTooltip = document.createElement('div');\n            apbctTooltip.setAttribute('class', 'apbct-tooltip');\n            apbct(encodedEmailNodes[i]).append(apbctTooltip);\n\n            // collect encoded email strings\n            encodedEmailsCollection[i] = encodedEmailNodes[i].dataset.originalString;\n        }\n\n        // JSONify encoded email strings\n        data.encodedEmails = JSON.stringify(encodedEmailsCollection);\n\n        // Using REST API handler\n        if ( ctPublicFunctions.data__ajax_type === 'rest' ) {\n            apbct_public_sendREST(\n                'apbct_decode_email',\n                {\n                    data: data,\n                    method: 'POST',\n                    callback: function(result) {\n                        // set alternative cookie to skip next pages encoding\n                        ctSetCookie('apbct_email_encoder_passed', ctPublic.emailEncoderPassKey, '');\n                        apbctEmailEncoderCallbackBulk(result, encodedEmailNodes, clickSource);\n                    },\n                    onErrorCallback: function(res) {\n                        resetEncodedNodes();\n                        ctShowDecodeComment(res);\n                    },\n                },\n            );\n\n            // Using AJAX request and handler\n        } else {\n            data.action = 'apbct_decode_email';\n            apbct_public_sendAJAX(\n                data,\n                {\n                    notJson: false,\n                    callback: function(result) {\n                        console.log('result');\n                        console.log(result);\n\n                        // set alternative cookie to skip next pages encoding\n                        ctSetCookie('apbct_email_encoder_passed', ctPublic.emailEncoderPassKey, '');\n                        apbctEmailEncoderCallbackBulk(result, encodedEmailNodes, clickSource);\n                    },\n                    onErrorCallback: function(res) {\n                        resetEncodedNodes();\n                        ctShowDecodeComment(res);\n                    },\n                },\n            );\n        }\n    } else {\n        const encodedEmail = encodedEmailNodes.dataset.originalString;\n        let data = {\n            encodedEmails: JSON.stringify({0: encodedEmail}),\n        };\n\n        // Adding a tooltip\n        let apbctTooltip = document.createElement('div');\n        apbctTooltip.setAttribute('class', 'apbct-tooltip');\n        jQuery(encodedEmailNodes).append(apbctTooltip);\n\n        apbct_admin_sendAJAX(\n            {\n                'action': 'apbct_decode_email',\n                'encodedEmails': data.encodedEmails,\n            },\n            {\n                'callback': function(result) {\n                    apbctEmailEncoderCallbackBulk(result, encodedEmailNodes, false);\n                },\n                'notJson': true,\n            },\n        );\n    }\n}\n\n/**\n * @param {mixed} result\n * @param {mixed} encodedEmailNodes\n * @param {mixed} clickSource\n */\nfunction apbctEmailEncoderCallbackBulk(result, encodedEmailNodes, clickSource = false) {\n    if (result.success && result.data[0].is_allowed === true) {\n        // start process of visual decoding\n        setTimeout(function() {\n            // popup remove\n            let popup = document.getElementById('apbct_popup');\n            if (popup !== null) {\n                let email = '';\n                if (clickSource) {\n                    let currentResultData;\n                    result.data.forEach((row) => {\n                        if (row.encoded_email === clickSource.dataset.originalString) {\n                            currentResultData = row;\n                        }\n                    });\n\n                    email = currentResultData.decoded_email.split(/[&?]/)[0];\n                } else {\n                    email = result.data[0].decoded_email;\n                }\n                // handle first node\n                let firstNode = popup.querySelector('#apbct_email_ecoder__popup_text_node_first');\n                // get email selectable by click\n                let selectableEmail = document.createElement('b');\n                selectableEmail.setAttribute('class', 'apbct-email-encoder-select-whole-email');\n                selectableEmail.innerText = email;\n                selectableEmail.title = ctPublicFunctions.text__ee_click_to_select;\n                // add email to the first node\n                if (firstNode) {\n                    let msg = ctPublicFunctions.text__ee_original_email + '&nbsp;' + selectableEmail.outerHTML;\n                    firstNode.innerHTML = msg;\n                    firstNode.setAttribute('style', 'flex-direction: row;');\n                }\n                // remove animation\n                let wrapper = popup.querySelector('.apbct-ee-animation-wrapper');\n                if (wrapper) {\n                    wrapper.remove();\n                }\n                // remove second node\n                let secondNode = popup.querySelector('#apbct_email_ecoder__popup_text_node_second');\n                if (secondNode) {\n                    secondNode.remove();\n                }\n                // add button\n                let buttonWrapper = document.createElement('span');\n                buttonWrapper.classList = 'apbct-email-encoder-elements_center top-margin-long';\n                if (!document.querySelector('.apbct-email-encoder-got-it-button')) {\n                    let button = document.createElement('button');\n                    button.innerText = ctPublicFunctions.text__ee_got_it;\n                    button.classList = 'apbct-email-encoder-got-it-button';\n                    button.addEventListener('click', function() {\n                        document.body.classList.remove('apbct-popup-fade');\n                        popup.setAttribute('style', 'display:none');\n                        fillDecodedEmails(encodedEmailNodes, result);\n                        // click on mailto if so\n                        if (typeof ctPublic !== 'undefined' && ctPublic.encodedEmailNodesIsMixed && clickSource) {\n                            clickSource.click();\n                        }\n                    });\n                    buttonWrapper.append(button);\n                    popup.append(buttonWrapper);\n                }\n            }\n        }, 3000);\n    } else {\n        if (clickSource) {\n            if (result.success) {\n                resetEncodedNodes();\n                ctShowDecodeComment(ctPublicFunctions.text__ee_blocked + ': ' + result.data[0].comment);\n            } else {\n                resetEncodedNodes();\n                ctShowDecodeComment(ctPublicFunctions.text__ee_cannot_connect + ': ' + result.apbct.comment);\n            }\n        } else {\n            console.log('result', result);\n        }\n    }\n}\n\n/**\n * Reset click event for encoded email\n */\nfunction resetEncodedNodes() {\n    if (typeof ctPublic.encodedEmailNodes !== 'undefined') {\n        ctPublic.encodedEmailNodes.forEach(function(element) {\n            element.addEventListener('click', ctFillDecodedEmailHandler);\n        });\n    }\n}\n\n/**\n * Show Decode Comment\n * @param {string} comment\n */\nfunction ctShowDecodeComment(comment) {\n    if ( ! comment ) {\n        comment = ctPublicFunctions.text__ee_cannot_decode;\n    }\n\n    let popup = document.getElementById('apbct_popup');\n    let popupText = document.getElementById('apbct_popup_text');\n    if (popup !== null) {\n        document.body.classList.remove('apbct-popup-fade');\n        popupText.innerText = ctPublicFunctions.text__ee_email_decoder + ': ' + comment;\n        setTimeout(function() {\n            popup.setAttribute('style', 'display:none');\n        }, 3000);\n    }\n}\n\n/**\n * Run filling for every node with decoding result.\n * @param {mixed} encodedEmailNodes\n * @param {mixed} decodingResult\n */\nfunction fillDecodedEmails(encodedEmailNodes, decodingResult) {\n    if (encodedEmailNodes.length > 0) {\n        for (let i = 0; i < encodedEmailNodes.length; i++) {\n            // chek what is what\n            let currentResultData;\n            decodingResult.data.forEach((row) => {\n                if (row.encoded_email === encodedEmailNodes[i].dataset.originalString) {\n                    currentResultData = row;\n                }\n            });\n            // quit case on cloud block\n            if (currentResultData.is_allowed === false) {\n                return;\n            }\n            // handler for mailto\n            if (\n                typeof encodedEmailNodes[i].href !== 'undefined' &&\n                encodedEmailNodes[i].href.indexOf('mailto:') === 0\n            ) {\n                let encodedEmail = encodedEmailNodes[i].href.replace('mailto:', '');\n                let baseElementContent = encodedEmailNodes[i].innerHTML;\n                encodedEmailNodes[i].innerHTML = baseElementContent.replace(\n                    encodedEmail,\n                    currentResultData.decoded_email,\n                );\n                encodedEmailNodes[i].href = 'mailto:' + currentResultData.decoded_email;\n\n                encodedEmailNodes[i].querySelectorAll('span.apbct-email-encoder').forEach((el) => {\n                    let encodedEmailTextInsideMailto = '';\n                    decodingResult.data.forEach((row) => {\n                        if (row.encoded_email === el.dataset.originalString) {\n                            encodedEmailTextInsideMailto = row.decoded_email;\n                        }\n                    });\n                    el.innerHTML = encodedEmailTextInsideMailto;\n                });\n            } else {\n                encodedEmailNodes[i].classList.add('no-blur');\n                // fill the nodes\n                setTimeout(() => {\n                    ctProcessDecodedDataResult(currentResultData, encodedEmailNodes[i]);\n                }, 2000);\n            }\n            // remove listeners\n            encodedEmailNodes[i].removeEventListener('click', ctFillDecodedEmailHandler);\n        }\n    } else {\n        let currentResultData = decodingResult.data[0];\n        encodedEmailNodes.classList.add('no-blur');\n        // fill the nodes\n        setTimeout(() => {\n            ctProcessDecodedDataResult(currentResultData, encodedEmailNodes);\n        }, 2000);\n        encodedEmailNodes.removeEventListener('click', ctFillDecodedEmailHandler);\n    }\n}\n\n/**\n * @param {mixed} response\n * @param {mixed} targetElement\n */\nfunction ctProcessDecodedDataResult(response, targetElement) {\n    targetElement.setAttribute('title', '');\n    targetElement.removeAttribute('style');\n    ctFillDecodedEmail(targetElement, response.decoded_email);\n}\n\n/**\n * @param {mixed} target\n * @param {string} email\n */\nfunction ctFillDecodedEmail(target, email) {\n    jQuery(target).html(\n        jQuery(target)\n            .html()\n            .replace(/.+?(<div class=[\"']apbct-tooltip[\"'].+?<\\/div>)/, email + '$1'),\n    );\n}\n"]}