{"version":3,"sources":["cleantalk-admin.js","apbct-common-functions.js"],"names":["apbct_admin_sendAJAX","data","params","obj","let","callback","callbackContext","callback_context","callbackParams","callback_params","async","notJson","timeout","button","spinner","progressbar","ctAdminCommon","_ajax_nonce","Math","random","no_cache","setAttribute","style","cursor","jQuery","css","ajax","type","url","_ajax_url","success","result","removeAttribute","JSON","parse","error","setTimeout","fadeOut","cleantalkModal","loaded","toString","open","alert","apply","concat","jqXHR","textStatus","errorThrown","console","log","ctDecorationSelectorActions","selector","document","querySelector","colorPicker","headingText","defaultThemeExpectedValue","value","addEventListener","event","selectedValue","target","length","apbctSetEmailDecoderPopupAnimation","animationElements","animationWrapper","createElement","classList","i","apbctEEAnimationDogOne","innerText","append","ctFillDecodedEmailHandler","clickSource","ctWlBrandname","encodedEmail","ctPublic","this","removeEventListener","encodedEmailNodesIsMixed","wl_brandname","encodedEmailNodes","plugin_name","encodedEmailNode","body","add","popupHeaderWrapper","popupTextWrapper","popupTextWaiting","popupTextDecoding","encoderPopup","getElementById","innerHTML","ctPublicFunctions","text__ee_wait_for_decoding_2","waitingPopup","popupHeader","color","id","text__ee_wait_for_decoding","text__ee_decoding_process","apbctAjaxEmailDecodeBulk","event_javascript_data","getJavascriptClientData","post_url","location","href","referrer","encodedEmails","encodedEmailsCollection","indexOf","preventDefault","apbctTooltip","apbct","dataset","originalString","stringify","data__ajax_type","apbct_public_sendREST","method","ctSetCookie","emailEncoderPassKey","apbctEmailEncoderCallbackBulk","onErrorCallback","res","resetEncodedNodes","ctShowDecodeComment","action","apbct_public_sendAJAX","0","appendChild","is_allowed","popup","email","currentResultData","forEach","row","encoded_email","decoded_email","split","firstNode","selectableEmail","wrapper","text__ee_click_to_select","title","text__ee_original_email","outerHTML","secondNode","remove","buttonWrapper","text__ee_got_it","fillDecodedEmails","click","text__ee_blocked","comment","text__ee_cannot_connect","element","text__ee_cannot_decode","popupText","text__ee_email_decoder","decodingResult","baseElementContent","replace","querySelectorAll","encodedEmailTextInsideMailto","el","ctProcessDecodedDataResult","response","targetElement","ctFillDecodedEmail","ready","$","on","ctDate","Date","getTime","ctSecure","protocol","cookie","toUTCString","e","parent","after","apbctNoticeDismissSuccess","siblings","apbctNoticeName","attr","notice_id","confirm","notice_when_deleting_user_text","window","btnForceProtectionOn","checked","apbctNoticeForceProtectionOn","spmOrderId","order_id","reload","message","includes"],"mappings":"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","file":"cleantalk-admin.min.js","sourcesContent":["jQuery(document).ready(function($) {\r\n    // Auto update banner close handler\r\n    jQuery('.apbct_update_notice').on('click', 'button', function() {\r\n        let ctDate = new Date(new Date().getTime() + 1000 * 86400 * 30 );\r\n        let ctSecure = location.protocol === 'https:' ? '; secure' : '';\r\n        document.cookie = 'apbct_update_banner_closed=1; path=/; expires=' +\r\n        ctDate.toUTCString() + '; samesite=lax' + ctSecure;\r\n    });\r\n\r\n    jQuery('li a[href=\"options-general.php?page=cleantalk\"]').css('white-space', 'nowrap')\r\n        .css('display', 'inline-block');\r\n\r\n    jQuery('body').on('click', '.apbct-notice .notice-dismiss-link', function(e) {\r\n        jQuery(e.target).parent()\r\n            .parent('.notice')\r\n            .after('<div id=\"apbct-notice-dismiss-success\" class=\"notice notice-success is-dismissible\"><p>' +\r\n                ctAdminCommon.apbctNoticeDismissSuccess +\r\n                '</p></div>');\r\n        setTimeout(function() {\r\n            jQuery('#apbct-notice-dismiss-success').fadeOut();\r\n        }, 2000);\r\n        jQuery(e.target).parent().siblings('.apbct-notice .notice-dismiss').click();\r\n    });\r\n    jQuery('body').on('click', '.apbct-notice .notice-dismiss', function(e) {\r\n        let apbctNoticeName = jQuery(e.target).parent().attr('id');\r\n        if ( apbctNoticeName ) {\r\n            apbct_admin_sendAJAX(\r\n                {\r\n                    'action': 'cleantalk_dismiss_notice',\r\n                    'notice_id': apbctNoticeName,\r\n                },\r\n                {\r\n                    'callback': null,\r\n                    'notJson': true,\r\n                },\r\n            );\r\n        }\r\n    });\r\n\r\n    // Notice when deleting user\r\n    jQuery('.ct_username .row-actions .delete a').on('click', function(e) {\r\n        e.preventDefault();\r\n\r\n        let result = confirm(ctAdminCommon.notice_when_deleting_user_text);\r\n\r\n        if (result) {\r\n            window.location = this.href;\r\n        }\r\n    });\r\n\r\n    let btnForceProtectionOn = document.querySelector('#apbct_setting_forms__force_protection__On');\r\n    if (btnForceProtectionOn) {\r\n        btnForceProtectionOn.addEventListener('click', function(e) {\r\n            if (btnForceProtectionOn.checked) {\r\n                let result = confirm(ctAdminCommon.apbctNoticeForceProtectionOn);\r\n\r\n                if (!result) {\r\n                    e.preventDefault();\r\n                }\r\n            }\r\n        });\r\n    }\r\n    // Restore spam order\r\n    $('.apbct-restore-spam-order-button').click(function() {\r\n        const spmOrderId = $(this).data('spam-order-id');\r\n        let data = {\r\n            action: 'apbct_restore_spam_order',\r\n            _ajax_nonce: ctAdminCommon._ajax_nonce,\r\n            order_id: spmOrderId,\r\n        };\r\n        $.ajax({\r\n            type: 'POST',\r\n            url: ctAdminCommon._ajax_url,\r\n            data: data,\r\n            success: function(result) {\r\n                if (result.success) {\r\n                    window.location.reload();\r\n                } else {\r\n                    alert(result.data.message);\r\n                }\r\n            },\r\n        });\r\n    });\r\n\r\n    // Email decoder example\r\n    if (window.location.href.includes('options-general.php?page=cleantalk')) {\r\n        let encodedEmailNode = document.querySelector('[data-original-string]');\r\n        if (encodedEmailNode) {\r\n            ctAdminCommon.encodedEmailNode = encodedEmailNode;\r\n            encodedEmailNode.style.cursor = 'pointer';\r\n            encodedEmailNode.addEventListener('click', ctFillDecodedEmailHandler);\r\n        }\r\n    }\r\n\r\n    ctDecorationSelectorActions();\r\n});\r\n// eslint-disable-next-line camelcase,require-jsdoc,no-unused-vars\r\nfunction apbct_admin_sendAJAX(data, params, obj) {\r\n    // Default params\r\n    let callback = params.callback || null;\r\n    let callbackContext = params.callback_context || null;\r\n    let callbackParams = params.callback_params || null;\r\n    let async = params.async || true;\r\n    let notJson = params.notJson || null;\r\n    let timeout = params.timeout || 15000;\r\n    var obj = obj || null; // eslint-disable-line no-var\r\n    let button = params.button || null;\r\n    let spinner = params.spinner || null;\r\n    let progressbar = params.progressbar || null;\r\n\r\n    if (typeof (data) === 'string') {\r\n        data = data + '&_ajax_nonce=' + ctAdminCommon._ajax_nonce + '&no_cache=' + Math.random();\r\n    } else {\r\n        data._ajax_nonce = ctAdminCommon._ajax_nonce;\r\n        data.no_cache = Math.random();\r\n    }\r\n    // Button and spinner\r\n    if (button) {\r\n        button.setAttribute('disabled', 'disabled'); button.style.cursor = 'not-allowed';\r\n    }\r\n    if (spinner) jQuery(spinner).css('display', 'inline');\r\n\r\n    jQuery.ajax({\r\n        type: 'POST',\r\n        url: ctAdminCommon._ajax_url,\r\n        data: data,\r\n        async: async,\r\n        success: function(result) {\r\n            if (button) {\r\n                button.removeAttribute('disabled'); button.style.cursor = 'pointer';\r\n            }\r\n            if (spinner) jQuery(spinner).css('display', 'none');\r\n            if (!notJson) result = JSON.parse(result);\r\n            if (result.error) {\r\n                setTimeout(function() {\r\n                    if (progressbar) progressbar.fadeOut('slow');\r\n                }, 1000);\r\n                if ( typeof cleantalkModal !== 'undefined' ) {\r\n                    // Show the result by modal\r\n                    cleantalkModal.loaded = 'Error:<br>' + result.error.toString();\r\n                    cleantalkModal.open();\r\n                } else {\r\n                    alert('Error happens: ' + (result.error || 'Unkown'));\r\n                }\r\n            } else {\r\n                if (callback) {\r\n                    if (callbackParams) {\r\n                        callback.apply( callbackContext, callbackParams.concat( result, data, params, obj ) );\r\n                    } else {\r\n                        callback(result, data, params, obj);\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        error: function(jqXHR, textStatus, errorThrown) {\r\n            if (button) {\r\n                button.removeAttribute('disabled'); button.style.cursor = 'pointer';\r\n            }\r\n            if (spinner) jQuery(spinner).css('display', 'none');\r\n            console.log('APBCT_AJAX_ERROR');\r\n            console.log(jqXHR);\r\n            console.log(textStatus);\r\n            console.log(errorThrown);\r\n        },\r\n        timeout: timeout,\r\n    });\r\n}\r\n/**\r\n* @return {void}\r\n */\r\nfunction ctDecorationSelectorActions() {\r\n    const selector = document.querySelector('#apbct_setting_comments__form_decoration_selector');\r\n    const colorPicker = document.querySelector('#apbct_setting_comments__form_decoration_color');\r\n    const headingText = document.querySelector('#apbct_setting_comments__form_decoration_text');\r\n    const defaultThemeExpectedValue = 'Default Theme';\r\n    if (colorPicker && headingText && selector) {\r\n        if (selector.value === defaultThemeExpectedValue) {\r\n            colorPicker.setAttribute('disabled', 'disabled');\r\n            headingText.setAttribute('disabled', 'disabled');\r\n        }\r\n        selector.addEventListener('change', function(event) {\r\n            const selectedValue = event.target.value;\r\n            if (selectedValue && selectedValue.length > 0 && selectedValue === defaultThemeExpectedValue) {\r\n                colorPicker.setAttribute('disabled', 'disabled');\r\n                headingText.setAttribute('disabled', 'disabled');\r\n            } else {\r\n                colorPicker.removeAttribute('disabled');\r\n                headingText.removeAttribute('disabled');\r\n            }\r\n        });\r\n    }\r\n}\r\n","/**\r\n * @return {HTMLElement} event\r\n */\r\nfunction apbctSetEmailDecoderPopupAnimation() {\r\n    const animationElements = ['apbct_dog_one', 'apbct_dog_two', 'apbct_dog_three'];\r\n    const animationWrapper = document.createElement('div');\r\n    animationWrapper.classList = 'apbct-ee-animation-wrapper';\r\n    for (let i = 0; i < animationElements.length; i++) {\r\n        const apbctEEAnimationDogOne = document.createElement('span');\r\n        apbctEEAnimationDogOne.classList = 'apbct_dog ' + animationElements[i];\r\n        apbctEEAnimationDogOne.innerText = '@';\r\n        animationWrapper.append(apbctEEAnimationDogOne);\r\n    }\r\n    return animationWrapper;\r\n}\r\n\r\n/**\r\n * @param {mixed} event\r\n */\r\nfunction ctFillDecodedEmailHandler(event = false) {\r\n    let clickSource = false;\r\n    let ctWlBrandname = '';\r\n    let encodedEmail = '';\r\n    if (typeof ctPublic !== 'undefined') {\r\n        this.removeEventListener('click', ctFillDecodedEmailHandler);\r\n        // remember clickSource\r\n        clickSource = this;\r\n        // globally remember if emails is mixed with mailto\r\n        ctPublic.encodedEmailNodesIsMixed = false;\r\n        ctWlBrandname = ctPublic.wl_brandname;\r\n        encodedEmail = ctPublic.encodedEmailNodes;\r\n    } else if (typeof ctAdminCommon !== 'undefined') {\r\n        ctWlBrandname = ctAdminCommon.plugin_name;\r\n        encodedEmail = ctAdminCommon.encodedEmailNode;\r\n    }\r\n\r\n    // get fade\r\n    document.body.classList.add('apbct-popup-fade');\r\n    // popup show\r\n    let encoderPopup = document.getElementById('apbct_popup');\r\n    if (!encoderPopup) {\r\n        // construct popup\r\n        let waitingPopup = document.createElement('div');\r\n        waitingPopup.setAttribute('class', 'apbct-popup apbct-email-encoder-popup');\r\n        waitingPopup.setAttribute('id', 'apbct_popup');\r\n\r\n        // construct text header\r\n        let popupHeaderWrapper = document.createElement('span');\r\n        popupHeaderWrapper.classList = 'apbct-email-encoder-elements_center';\r\n        let popupHeader = document.createElement('p');\r\n        popupHeader.innerText = ctWlBrandname;\r\n        popupHeader.setAttribute('class', 'apbct-email-encoder--popup-header');\r\n        popupHeaderWrapper.append(popupHeader);\r\n\r\n        // construct text wrapper\r\n        let popupTextWrapper = document.createElement('div');\r\n        popupTextWrapper.setAttribute('id', 'apbct_popup_text');\r\n        popupTextWrapper.setAttribute('class', 'apbct-email-encoder-elements_center');\r\n        popupTextWrapper.style.color = 'black';\r\n\r\n        // construct text first node\r\n        // todo make translatable\r\n        let popupTextWaiting = document.createElement('p');\r\n        popupTextWaiting.id = 'apbct_email_ecoder__popup_text_node_first';\r\n        if (typeof ctPublicFunctions !== 'undefined' && ctPublicFunctions.text__ee_wait_for_decoding) {\r\n            popupTextWaiting.innerText = ctPublicFunctions.text__ee_wait_for_decoding;\r\n        } else {\r\n            popupTextWaiting.innerText = ctAdminCommon.text__ee_wait_for_decoding;\r\n        }\r\n        popupTextWaiting.setAttribute('class', 'apbct-email-encoder-elements_center');\r\n\r\n        // construct text second node\r\n        // todo make translatable\r\n        let popupTextDecoding = document.createElement('p');\r\n        popupTextDecoding.id = 'apbct_email_ecoder__popup_text_node_second';\r\n        if (typeof ctPublicFunctions !== 'undefined' && ctPublicFunctions.text__ee_decoding_process) {\r\n            popupTextDecoding.innerText = ctPublicFunctions.text__ee_decoding_process;\r\n        } else {\r\n            popupTextDecoding.innerText = ctAdminCommon.text__ee_decoding_process;\r\n        }\r\n\r\n        // appending\r\n        popupTextWrapper.append(popupTextWaiting);\r\n        popupTextWrapper.append(popupTextDecoding);\r\n        waitingPopup.append(popupHeaderWrapper);\r\n        waitingPopup.append(popupTextWrapper);\r\n        waitingPopup.append(apbctSetEmailDecoderPopupAnimation());\r\n        document.body.append(waitingPopup);\r\n    } else {\r\n        encoderPopup.setAttribute('style', 'display: inherit');\r\n        if (typeof ctPublicFunctions !== 'undefined' && ctPublicFunctions.text__ee_wait_for_decoding_2) {\r\n            document.getElementById('apbct_popup_text').innerHTML = ctPublicFunctions.text__ee_wait_for_decoding_2;\r\n        } else {\r\n            document.getElementById('apbct_popup_text').innerHTML =\r\n            ctPublicFunctions.text__ee_wait_for_decoding_2;\r\n        }\r\n    }\r\n\r\n    apbctAjaxEmailDecodeBulk(event, encodedEmail, clickSource);\r\n}\r\n\r\n/**\r\n * @param {mixed} event\r\n * @param {mixed} encodedEmailNodes\r\n * @param {mixed} clickSource\r\n */\r\nfunction apbctAjaxEmailDecodeBulk(event, encodedEmailNodes, clickSource) {\r\n    if (event && clickSource) {\r\n        // collect data\r\n        const javascriptClientData = getJavascriptClientData();\r\n        let data = {\r\n            event_javascript_data: javascriptClientData,\r\n            post_url: document.location.href,\r\n            referrer: document.referrer,\r\n            encodedEmails: '',\r\n        };\r\n        let encodedEmailsCollection = {};\r\n        for (let i = 0; i < encodedEmailNodes.length; i++) {\r\n            // disable click for mailto\r\n            if (\r\n                typeof encodedEmailNodes[i].href !== 'undefined' &&\r\n                encodedEmailNodes[i].href.indexOf('mailto:') === 0\r\n            ) {\r\n                event.preventDefault();\r\n                ctPublic.encodedEmailNodesIsMixed = true;\r\n            }\r\n\r\n            // Adding a tooltip\r\n            let apbctTooltip = document.createElement('div');\r\n            apbctTooltip.setAttribute('class', 'apbct-tooltip');\r\n            apbct(encodedEmailNodes[i]).append(apbctTooltip);\r\n\r\n            // collect encoded email strings\r\n            encodedEmailsCollection[i] = encodedEmailNodes[i].dataset.originalString;\r\n        }\r\n\r\n        // JSONify encoded email strings\r\n        data.encodedEmails = JSON.stringify(encodedEmailsCollection);\r\n\r\n        // Using REST API handler\r\n        if ( ctPublicFunctions.data__ajax_type === 'rest' ) {\r\n            apbct_public_sendREST(\r\n                'apbct_decode_email',\r\n                {\r\n                    data: data,\r\n                    method: 'POST',\r\n                    callback: function(result) {\r\n                        // set alternative cookie to skip next pages encoding\r\n                        ctSetCookie('apbct_email_encoder_passed', ctPublic.emailEncoderPassKey, '');\r\n                        apbctEmailEncoderCallbackBulk(result, encodedEmailNodes, clickSource);\r\n                    },\r\n                    onErrorCallback: function(res) {\r\n                        resetEncodedNodes();\r\n                        ctShowDecodeComment(res);\r\n                    },\r\n                },\r\n            );\r\n\r\n            // Using AJAX request and handler\r\n        } else {\r\n            data.action = 'apbct_decode_email';\r\n            apbct_public_sendAJAX(\r\n                data,\r\n                {\r\n                    notJson: false,\r\n                    callback: function(result) {\r\n                        console.log('result');\r\n                        console.log(result);\r\n\r\n                        // set alternative cookie to skip next pages encoding\r\n                        ctSetCookie('apbct_email_encoder_passed', ctPublic.emailEncoderPassKey, '');\r\n                        apbctEmailEncoderCallbackBulk(result, encodedEmailNodes, clickSource);\r\n                    },\r\n                    onErrorCallback: function(res) {\r\n                        resetEncodedNodes();\r\n                        ctShowDecodeComment(res);\r\n                    },\r\n                },\r\n            );\r\n        }\r\n    } else {\r\n        const encodedEmail = encodedEmailNodes.dataset.originalString;\r\n        let data = {\r\n            encodedEmails: JSON.stringify({0: encodedEmail}),\r\n        };\r\n\r\n        // Adding a tooltip\r\n        let apbctTooltip = document.createElement('div');\r\n        apbctTooltip.setAttribute('class', 'apbct-tooltip');\r\n        encodedEmailNodes.appendChild(apbctTooltip);\r\n\r\n        apbct_admin_sendAJAX(\r\n            {\r\n                'action': 'apbct_decode_email',\r\n                'encodedEmails': data.encodedEmails,\r\n            },\r\n            {\r\n                'callback': function(result) {\r\n                    apbctEmailEncoderCallbackBulk(result, encodedEmailNodes, false);\r\n                },\r\n                'notJson': true,\r\n            },\r\n        );\r\n    }\r\n}\r\n\r\n/**\r\n * @param {mixed} result\r\n * @param {mixed} encodedEmailNodes\r\n * @param {mixed} clickSource\r\n */\r\nfunction apbctEmailEncoderCallbackBulk(result, encodedEmailNodes, clickSource = false) {\r\n    if (result.success && result.data[0].is_allowed === true) {\r\n        // start process of visual decoding\r\n        setTimeout(function() {\r\n            // popup remove\r\n            let popup = document.getElementById('apbct_popup');\r\n            if (popup !== null) {\r\n                let email = '';\r\n                if (clickSource) {\r\n                    let currentResultData;\r\n                    result.data.forEach((row) => {\r\n                        if (row.encoded_email === clickSource.dataset.originalString) {\r\n                            currentResultData = row;\r\n                        }\r\n                    });\r\n\r\n                    email = currentResultData.decoded_email.split(/[&?]/)[0];\r\n                } else {\r\n                    email = result.data[0].decoded_email;\r\n                }\r\n                // handle first node\r\n                let firstNode = popup.querySelector('#apbct_email_ecoder__popup_text_node_first');\r\n                // get email selectable by click\r\n                let selectableEmail = document.createElement('b');\r\n                selectableEmail.setAttribute('class', 'apbct-email-encoder-select-whole-email');\r\n                selectableEmail.innerText = email;\r\n                if (typeof ctPublicFunctions !== 'undefined' && ctPublicFunctions.text__ee_click_to_select) {\r\n                    selectableEmail.title = ctPublicFunctions.text__ee_click_to_select;\r\n                } else {\r\n                    selectableEmail.title = ctAdminCommon.text__ee_click_to_select;\r\n                }\r\n                // add email to the first node\r\n                if (firstNode) {\r\n                    if (typeof ctPublicFunctions !== 'undefined' && ctPublicFunctions.text__ee_original_email) {\r\n                        firstNode.innerHTML = ctPublicFunctions.text__ee_original_email + '&nbsp;' + selectableEmail.outerHTML;\r\n                    } else {\r\n                        firstNode.innerHTML = ctAdminCommon.text__ee_original_email + '&nbsp;' + selectableEmail.outerHTML;\r\n                    }\r\n\r\n                    firstNode.setAttribute('style', 'flex-direction: row;');\r\n                }\r\n                // remove animation\r\n                let wrapper = popup.querySelector('.apbct-ee-animation-wrapper');\r\n                if (wrapper) {\r\n                    wrapper.remove();\r\n                }\r\n                // remove second node\r\n                let secondNode = popup.querySelector('#apbct_email_ecoder__popup_text_node_second');\r\n                if (secondNode) {\r\n                    secondNode.remove();\r\n                }\r\n                // add button\r\n                let buttonWrapper = document.createElement('span');\r\n                buttonWrapper.classList = 'apbct-email-encoder-elements_center top-margin-long';\r\n                if (!document.querySelector('.apbct-email-encoder-got-it-button')) {\r\n                    let button = document.createElement('button');\r\n                    if (typeof ctPublicFunctions !== 'undefined' && ctPublicFunctions.text__ee_got_it) {\r\n                        button.innerText = ctPublicFunctions.text__ee_got_it;\r\n                    } else {\r\n                        button.innerText = ctAdminCommon.text__ee_got_it;\r\n                    }\r\n                    button.classList = 'apbct-email-encoder-got-it-button';\r\n                    button.addEventListener('click', function() {\r\n                        document.body.classList.remove('apbct-popup-fade');\r\n                        popup.setAttribute('style', 'display:none');\r\n                        fillDecodedEmails(encodedEmailNodes, result);\r\n                        // click on mailto if so\r\n                        if (typeof ctPublic !== 'undefined' && ctPublic.encodedEmailNodesIsMixed && clickSource) {\r\n                            clickSource.click();\r\n                        }\r\n                    });\r\n                    buttonWrapper.append(button);\r\n                    popup.append(buttonWrapper);\r\n                }\r\n            }\r\n        }, 3000);\r\n    } else {\r\n        if (clickSource) {\r\n            if (result.success) {\r\n                resetEncodedNodes();\r\n                if (typeof ctPublicFunctions !== 'undefined' && ctPublicFunctions.text__ee_blocked) {\r\n                    ctShowDecodeComment(ctPublicFunctions.text__ee_blocked + ': ' + result.data[0].comment);\r\n                } else {\r\n                    ctShowDecodeComment(ctAdminCommon.text__ee_blocked + ': ' + result.data[0].comment);\r\n                }\r\n            } else {\r\n                resetEncodedNodes();\r\n                if (typeof ctPublicFunctions !== 'undefined' && ctPublicFunctions.text__ee_cannot_connect) {\r\n                    ctShowDecodeComment(ctPublicFunctions.text__ee_cannot_connect + ': ' + result.apbct.comment);\r\n                } else {\r\n                    ctShowDecodeComment(ctAdminCommon.text__ee_cannot_connect + ': ' + result.data[0].comment);\r\n                }\r\n            }\r\n        } else {\r\n            console.log('result', result);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Reset click event for encoded email\r\n */\r\nfunction resetEncodedNodes() {\r\n    if (typeof ctPublic.encodedEmailNodes !== 'undefined') {\r\n        ctPublic.encodedEmailNodes.forEach(function(element) {\r\n            element.addEventListener('click', ctFillDecodedEmailHandler);\r\n        });\r\n    }\r\n}\r\n\r\n/**\r\n * Show Decode Comment\r\n * @param {string} comment\r\n */\r\nfunction ctShowDecodeComment(comment) {\r\n    if ( ! comment ) {\r\n        if (typeof ctPublicFunctions !== 'undefined' && ctPublicFunctions.text__ee_cannot_decode) {\r\n            comment = ctPublicFunctions.text__ee_cannot_decode;\r\n        } else {\r\n            comment = ctAdminCommon.text__ee_cannot_decode;\r\n        }\r\n    }\r\n\r\n    let popup = document.getElementById('apbct_popup');\r\n    let popupText = document.getElementById('apbct_popup_text');\r\n    if (popup !== null) {\r\n        document.body.classList.remove('apbct-popup-fade');\r\n        if (typeof ctPublicFunctions !== 'undefined' && ctPublicFunctions.text__ee_email_decoder) {\r\n            popupText.innerText = ctPublicFunctions.text__ee_email_decoder + ': ' + comment;\r\n        } else {\r\n            popupText.innerText = ctAdminCommon.text__ee_email_decoder + ': ' + comment;\r\n        }\r\n        setTimeout(function() {\r\n            popup.setAttribute('style', 'display:none');\r\n        }, 3000);\r\n    }\r\n}\r\n\r\n/**\r\n * Run filling for every node with decoding result.\r\n * @param {mixed} encodedEmailNodes\r\n * @param {mixed} decodingResult\r\n */\r\nfunction fillDecodedEmails(encodedEmailNodes, decodingResult) {\r\n    if (encodedEmailNodes.length > 0) {\r\n        for (let i = 0; i < encodedEmailNodes.length; i++) {\r\n            // chek what is what\r\n            let currentResultData;\r\n            decodingResult.data.forEach((row) => {\r\n                if (row.encoded_email === encodedEmailNodes[i].dataset.originalString) {\r\n                    currentResultData = row;\r\n                }\r\n            });\r\n            // quit case on cloud block\r\n            if (currentResultData.is_allowed === false) {\r\n                return;\r\n            }\r\n            // handler for mailto\r\n            if (\r\n                typeof encodedEmailNodes[i].href !== 'undefined' &&\r\n                encodedEmailNodes[i].href.indexOf('mailto:') === 0\r\n            ) {\r\n                let encodedEmail = encodedEmailNodes[i].href.replace('mailto:', '');\r\n                let baseElementContent = encodedEmailNodes[i].innerHTML;\r\n                encodedEmailNodes[i].innerHTML = baseElementContent.replace(\r\n                    encodedEmail,\r\n                    currentResultData.decoded_email,\r\n                );\r\n                encodedEmailNodes[i].href = 'mailto:' + currentResultData.decoded_email;\r\n\r\n                encodedEmailNodes[i].querySelectorAll('span.apbct-email-encoder').forEach((el) => {\r\n                    let encodedEmailTextInsideMailto = '';\r\n                    decodingResult.data.forEach((row) => {\r\n                        if (row.encoded_email === el.dataset.originalString) {\r\n                            encodedEmailTextInsideMailto = row.decoded_email;\r\n                        }\r\n                    });\r\n                    el.innerHTML = encodedEmailTextInsideMailto;\r\n                });\r\n            } else {\r\n                encodedEmailNodes[i].classList.add('no-blur');\r\n                // fill the nodes\r\n                setTimeout(() => {\r\n                    ctProcessDecodedDataResult(currentResultData, encodedEmailNodes[i]);\r\n                }, 2000);\r\n            }\r\n            // remove listeners\r\n            encodedEmailNodes[i].removeEventListener('click', ctFillDecodedEmailHandler);\r\n        }\r\n    } else {\r\n        let currentResultData = decodingResult.data[0];\r\n        encodedEmailNodes.classList.add('no-blur');\r\n        // fill the nodes\r\n        setTimeout(() => {\r\n            ctProcessDecodedDataResult(currentResultData, encodedEmailNodes);\r\n        }, 2000);\r\n        encodedEmailNodes.removeEventListener('click', ctFillDecodedEmailHandler);\r\n    }\r\n}\r\n\r\n/**\r\n * @param {mixed} response\r\n * @param {mixed} targetElement\r\n */\r\nfunction ctProcessDecodedDataResult(response, targetElement) {\r\n    targetElement.setAttribute('title', '');\r\n    targetElement.removeAttribute('style');\r\n    ctFillDecodedEmail(targetElement, response.decoded_email);\r\n}\r\n\r\n/**\r\n * @param {mixed} target\r\n * @param {string} email\r\n */\r\nfunction ctFillDecodedEmail(target, email) {\r\n    target.innerHTML = target.innerHTML.replace(/.+?(<div class=[\"']apbct-tooltip[\"'].+?<\\/div>)/, email + '$1');\r\n}\r\n"]}