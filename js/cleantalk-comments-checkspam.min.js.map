{"version":3,"names":[],"mappings":"","sources":["cleantalk-comments-checkspam.js"],"sourcesContent":["// Printf for JS\nString.prototype.printf = function() { // eslint-disable-line no-extend-native\n    let formatted = this;\n    for ( let arg in arguments ) { // eslint-disable-line guard-for-in,prefer-rest-params\n        let beforeFormatted = formatted.substring(0, formatted.indexOf('%s', 0));\n        let afterFormatted = formatted.substring(formatted.indexOf('%s', 0)+2, formatted.length);\n        // eslint-disable-next-line guard-for-in,prefer-rest-params\n        formatted = beforeFormatted + arguments[arg] + afterFormatted;\n    }\n    return formatted;\n};\n\n// Flags\nlet ctWorking = false;\nlet ctNewCheck = true;\nlet ctCoolingDownFlag = false;\nlet ctCloseAnimate = true;\nlet ctAccurateCheck = false;\nlet ctPause = false;\nlet ctPrevAccurate = ctCommentsCheck.ct_prev_accurate;\nlet ctPrevFrom = ctCommentsCheck.ct_prev_from;\nlet ctPrevTill = ctCommentsCheck.ct_prev_till;\n// Settings\nlet ctCoolDownTime = 90000;\nlet ctRequestsCounter = 0;\nlet ctMaxRequests = 60;\n// Variables\nlet ctAjaxNonce = ctCommentsCheck.ct_ajax_nonce;\nlet ctCommentsTotal = 0;\nlet ctCommentsChecked = 0;\nlet ctCommentsSpam = 0;\nlet ctCommentsBad = 0;\nlet ctUnchecked = 'unset';\nlet ctDateFrom = 0;\nlet ctDateTill = 0;\n\n/**\n * @param {mixed} to\n * @param {string} id\n */\nfunction animateComment(to, id) { // eslint-disable-line no-unused-vars\n    if (ctCloseAnimate) {\n        if (to==0.3) {\n            jQuery('#comment-'+id).fadeTo(200, to, function() {\n                animateComment(1, id);\n            });\n        } else {\n            jQuery('#comment-'+id).fadeTo(200, to, function() {\n                animateComment(0.3, id);\n            });\n        }\n    } else {\n        ctCloseAnimate =true;\n    }\n}\n\n/**\n * clear comments\n */\nfunction ctClearComments() {\n    let from = 0; let till = 0;\n    if (jQuery('#ct_allow_date_range').is(':checked')) {\n        from = jQuery('#ct_date_range_from').val();\n        till = jQuery('#ct_date_range_till').val();\n    }\n    let ctSecure = location.protocol === 'https:' ? '; secure' : '';\n    document.cookie = 'apbct_check_comments_offset' + '=' + 0 + '; path=/; samesite=lax' + ctSecure;\n\n    let data = {\n        'action': 'ajax_clear_comments',\n        'security': ctAjaxNonce,\n        'from': from,\n        'till': till,\n    };\n\n    jQuery.ajax({\n        type: 'POST',\n        url: ajaxurl,\n        data: data,\n        success: function(msg) {\n            ctShowInfo();\n            ctSendComments();\n        },\n    });\n}\n\n/**\n * Continues the check after cooldown time\n * Called by ct_send_users();\n */\nfunction ctCoolingDownToggle() {\n    ctCoolingDownFlag = false;\n    ctSendComments();\n    ctShowInfo();\n}\n\n/**\n * send comments\n */\nfunction ctSendComments() {\n    if (ctCoolingDownFlag === true) {\n        return;\n    }\n\n    if (ctRequestsCounter >= ctMaxRequests) {\n        setTimeout(ctCoolingDownToggle, ctCoolDownTime);\n        ctRequestsCounter = 0;\n        ctCoolingDownFlag = true;\n        return;\n    } else {\n        ctRequestsCounter++;\n    }\n\n    let data = {\n        'action': 'ajax_check_comments',\n        'security': ctAjaxNonce,\n        'new_check': ctNewCheck,\n        'unchecked': ctUnchecked,\n        'offset': Number(ctGetCookie('apbct_check_comments_offset')),\n    };\n\n    if (ctAccurateCheck) {\n        data['accurate_check'] = true;\n    }\n\n    if (ctDateFrom && ctDateTill) {\n        data['from'] = ctDateFrom;\n        data['till'] = ctDateTill;\n    }\n\n    jQuery.ajax({\n        type: 'POST',\n        url: ajaxurl,\n        data: data,\n        success: function(msg) {\n            msg = jQuery.parseJSON(msg);\n\n            if (parseInt(msg.error)) {\n                ctWorking = false;\n                if (!confirm(msg.error_message+'. Do you want to proceed?')) {\n                    let newHref = 'edit-comments.php?page=ct_check_spam';\n                    if (ctDateFrom != 0 && ctDateTill != 0) {\n                        newHref+='&from='+ctDateFrom+'&till='+ctDateTill;\n                    }\n                    location.href = newHref;\n                } else {\n                    ctSendComments();\n                }\n            } else {\n                ctNewCheck = false;\n                let offset = Number(ctGetCookie('apbct_check_comments_offset')) + 100;\n\n                if (parseInt(msg.end) == 1 || ctPause === true) {\n                    if (parseInt(msg.end) == 1) {\n                        document.cookie = 'ct_paused_spam_check=0; path=/; samesite=lax';\n                    }\n                    ctWorking = false;\n                    jQuery('#ct_working_message').hide();\n                    let newHref = 'edit-comments.php?page=ct_check_spam';\n                    if (ctDateFrom != 0 && ctDateTill != 0) {\n                        newHref+='&from='+ctDateFrom+'&till='+ctDateTill;\n                    }\n\n                    document.cookie = 'apbct_check_comments_offset' + '=' + offset + '; path=/; samesite=lax'+ctSecure;\n\n                    location.href = newHref;\n                } else if (parseInt(msg.end) == 0) {\n                    ctCommentsChecked += msg.checked;\n                    ctCommentsSpam += msg.spam;\n                    ctCommentsBad += msg.bad;\n                    ctCommentsTotal += msg.total;\n                    ctUnchecked = ctCommentsTotal - ctCommentsChecked - ctCommentsBad;\n                    let statusString = String(ctCommentsCheck.ct_status_string);\n                    statusString = statusString.printf(ctCommentsChecked, ctCommentsSpam, ctCommentsBad);\n                    if (parseInt(ctCommentsSpam) > 0) {\n                        statusString += ctCommentsCheck.ct_status_string_warning;\n                    }\n                    jQuery('#ct_checking_status').html(statusString);\n                    jQuery('#ct_error_message').hide();\n                    // If DB woks not properly\n                    if (+ctCommentsTotal < ctCommentsChecked + ctCommentsBad) {\n                        document.cookie = 'ct_comments_start_check=1; path=/; samesite=lax';\n                        location.href = 'edit-comments.php?page=ct_check_spam';\n                    }\n\n                    document.cookie = 'apbct_check_comments_offset' + '=' + offset + '; path=/; samesite=lax'+ctSecure;\n\n                    ctSendComments();\n                }\n            }\n        },\n        error: function(jqXHR, textStatus, errorThrown) {\n            jQuery('#ct_error_message').show();\n            jQuery('#cleantalk_ajax_error').html(textStatus);\n            jQuery('#cleantalk_js_func').html('Check comments');\n            setTimeout(ctSendComments(), 3000);\n        },\n        timeout: 25000,\n    });\n}\n\n/**\n * show info\n */\nfunction ctShowInfo() {\n    if (ctWorking) {\n        if (ctCoolingDownFlag == true) {\n            jQuery('#ct_cooling_notice').html('Waiting for API to cool down. (About a minute)');\n            jQuery('#ct_cooling_notice').show();\n            return;\n        } else {\n            jQuery('#ct_cooling_notice').hide();\n        }\n\n        if (!ctCommentsTotal) {\n            let data = {\n                'action': 'ajax_info_comments',\n                'security': ctAjaxNonce,\n            };\n\n            if (ctDateFrom && ctDateTill) {\n                data['from'] = ctDateFrom;\n                data['till'] = ctDateTill;\n            }\n\n            jQuery.ajax({\n                type: 'POST',\n                url: ajaxurl,\n                data: data,\n                success: function(msg) {\n                    msg = jQuery.parseJSON(msg);\n                    jQuery('#ct_checking_status').html(msg.message);\n                    ctCommentsTotal = msg.total;\n                    ctCommentsSpam = msg.spam;\n                    ctCommentsChecked = msg.checked;\n                    ctCommentsBad = msg.bad;\n                },\n                error: function(jqXHR, textStatus, errorThrown) {\n                    jQuery('#ct_error_message').show();\n                    jQuery('#cleantalk_ajax_error').html(textStatus);\n                    jQuery('#cleantalk_js_func').html('Check comments');\n                    setTimeout(ctShowInfo(), 3000);\n                },\n                timeout: 15000,\n            });\n        }\n    }\n}\n\n/**\n * Function to toggle dependences\n *\n * @param {object} obj\n * @param {mixed} secondary\n */\nfunction ctToggleDepended(obj, secondary) { // eslint-disable-line no-unused-vars\n    secondary = secondary || null;\n\n    let depended = jQuery(obj.data('depended'));\n    let state = obj.data('state');\n\n    if (!state && !secondary) {\n        obj.data('state', true);\n        depended.removeProp('disabled');\n    } else {\n        obj.data('state', false);\n        depended.prop('disabled', true);\n        depended.removeProp('checked');\n        if (depended.data('depended')) {\n            ctToggleDepended(depended, true);\n        }\n    }\n}\n\n/**\n * trash all\n *\n * @param {object} e\n */\nfunction ctTrashAll( e ) {\n    let data = {\n        'action': 'ajax_trash_all',\n        'security': ctAjaxNonce,\n    };\n\n    jQuery('.' + e.target.id).addClass('disabled');\n    jQuery('.spinner').css('visibility', 'visible');\n    jQuery.ajax({\n        type: 'POST',\n        url: ajaxurl,\n        data: data,\n        success: function( msg ) {\n            if ( msg > 0 ) {\n                jQuery('#cleantalk_comments_left').html(msg);\n                ctTrashAll( e );\n            } else {\n                jQuery('.' + e.target.id).removeClass('disabled');\n                jQuery('.spinner').css('visibility', 'hidden');\n                location.href='edit-comments.php?page=ct_check_spam';\n            }\n        },\n        error: function(jqXHR, textStatus, errorThrown) {\n            jQuery('#ct_error_message').show();\n            jQuery('#cleantalk_ajax_error').html(textStatus);\n            jQuery('#cleantalk_js_func').html('Check comments');\n            setTimeout(ctTrashAll( e ), 3000);\n        },\n        timeout: 25000,\n    });\n}\n\n/**\n * spam all\n *\n * @param {object} e\n */\nfunction ctSpamAll( e ) {\n    let data = {\n        'action': 'ajax_spam_all',\n        'security': ctAjaxNonce,\n    };\n\n    jQuery('.' + e.target.id).addClass('disabled');\n    jQuery('.spinner').css('visibility', 'visible');\n    jQuery.ajax({\n        type: 'POST',\n        url: ajaxurl,\n        data: data,\n        success: function( msg ) {\n            if ( msg > 0 ) {\n                jQuery('#cleantalk_comments_left').html(msg);\n                ctSpamAll( e );\n            } else {\n                jQuery('.' + e.target.id).removeClass('disabled');\n                jQuery('.spinner').css('visibility', 'hidden');\n                location.href='edit-comments.php?page=ct_check_spam';\n            }\n        },\n        error: function(jqXHR, textStatus, errorThrown) {\n            jQuery('#ct_error_message').show();\n            jQuery('#cleantalk_ajax_error').html(textStatus);\n            jQuery('#cleantalk_js_func').html('Check comments');\n            setTimeout(ctSpamAll( e ), 3000);\n        },\n        timeout: 25000,\n    });\n}\n\njQuery(document).ready(function() {\n    // Prev check parameters\n    if (ctPrevAccurate) {\n        jQuery('#ct_accurate_check').prop('checked', true);\n    }\n    if (ctPrevFrom) {\n        jQuery('#ct_allow_date_range').prop('checked', true).data('state', true);\n        jQuery('#ct_date_range_from').removeProp('disabled').val(ctPrevFrom);\n        jQuery('#ct_date_range_till').removeProp('disabled').val(ctPrevTill);\n    }\n\n    // Toggle dependences\n    jQuery('#ct_allow_date_range').on('change', function() {\n        document.cookie = 'ct_spam_dates_from='+ jQuery('#ct_date_range_from').val() +'; path=/; samesite=lax';\n        document.cookie = 'ct_spam_dates_till='+ jQuery('#ct_date_range_till').val() +'; path=/; samesite=lax';\n        if ( this.checked ) {\n            document.cookie = 'ct_spam_dates_allowed=1; path=/; samesite=lax';\n            jQuery('.ct_date').prop('checked', true).attr('disabled', false);\n        } else {\n            document.cookie = 'ct_spam_dates_allowed=0; path=/; samesite=lax';\n            jQuery('.ct_date').prop('disabled', true).attr('disabled', true);\n        }\n    });\n\n    jQuery.datepicker.setDefaults(jQuery.datepicker.regional['en']);\n    var dates = jQuery('#ct_date_range_from, #ct_date_range_till').datepicker( // eslint-disable-line no-var\n        {\n            dateFormat: 'M d yy',\n            maxDate: '+0D',\n            changeMonth: true,\n            changeYear: true,\n            showAnim: 'slideDown',\n            onSelect: function(selectedDate) {\n                let option = this.id == 'ct_date_range_from' ? 'minDate' : 'maxDate';\n                let instance = jQuery( this ).data( 'datepicker' );\n                let date = jQuery.datepicker.parseDate(\n                    instance.settings.dateFormat || jQuery.datepicker._defaults.dateFormat,\n                    selectedDate, instance.settings);\n                dates.not(this).datepicker('option', option, date);\n                document.cookie = 'ct_spam_dates_from='+ jQuery('#ct_date_range_from').val() +'; path=/; samesite=lax';\n                document.cookie = 'ct_spam_dates_till='+ jQuery('#ct_date_range_till').val() +'; path=/; samesite=lax';\n            },\n        },\n    );\n\n    // eslint-disable-next-line require-jsdoc\n    function ctStartCheck(continueCheck) {\n        continueCheck = continueCheck || null;\n\n        if (jQuery('#ct_allow_date_range').is(':checked')) {\n            ctDateFrom = jQuery('#ct_date_range_from').val();\n            ctDateTill = jQuery('#ct_date_range_till').val();\n\n            if (!(ctDateFrom != '' && ctDateTill != '')) {\n                alert('Please, specify a date range.');\n                return;\n            }\n        }\n\n        if (jQuery('#ct_accurate_check').is(':checked')) {\n            ctAccurateCheck = true;\n        }\n\n        if (\n            jQuery('#ct_accurate_check').is(':checked') &&\n            ! jQuery('#ct_allow_date_range').is(':checked')\n        ) {\n            alert('Please, select a date range.');\n            return;\n        }\n\n        jQuery('.ct_to_hide').hide();\n        jQuery('#ct_working_message').show();\n        jQuery('#ct_preloader').show();\n        jQuery('#ct_pause').show();\n\n        ctWorking = true;\n\n        if (continueCheck) {\n            ctShowInfo();\n            ctSendComments();\n        } else {\n            ctClearComments();\n        }\n    }\n\n    // Check comments\n    jQuery('#ct_check_spam_button').click(function() {\n        document.cookie = 'ct_paused_spam_check=0; path=/; samesite=lax';\n        ctStartCheck(false);\n    });\n    jQuery('#ct_proceed_check_button').click(function() {\n        ctStartCheck(true);\n    });\n\n    // Pause the check\n    jQuery('#ct_pause').on('click', function() {\n        ctPause = true;\n        let ctCheck = {\n            'accurate': ctAccurateCheck,\n            'from': ctDateFrom,\n            'till': ctDateTill,\n        };\n        document.cookie = 'ct_paused_spam_check=' + JSON.stringify(ctCheck) + '; path=/; samesite=lax';\n    });\n\n\n    if (ctCommentsCheck.start === '1') {\n        document.cookie = 'ct_comments_start_check=0; expires=' + new Date(0).toUTCString() + '; path=/; samesite=lax';\n        jQuery('#ct_check_spam_button').click();\n    }\n\n    // Delete all spam comments\n    jQuery('.ct_trash_all').click(function( e ) {\n        if (!confirm(ctCommentsCheck.ct_confirm_trash_all)) {\n            return false;\n        }\n\n        ctTrashAll( e );\n    });\n\n    // Mark as spam all spam comments\n    jQuery('.ct_spam_all').click(function( e ) {\n        if (!confirm(ctCommentsCheck.ct_confirm_spam_all)) {\n            return false;\n        }\n\n        ctSpamAll( e );\n    });\n\n    /**\n     * Checked ct_accurate_check\n     */\n    jQuery('#ct_accurate_check').change(function() {\n        if (this.checked) {\n            jQuery('#ct_allow_date_range').prop('checked', true);\n            jQuery('.ct_date').prop('checked', true).attr('disabled', false);\n        }\n    });\n});\n\n\n/**\n * Get cookie by name\n * @param {string} name\n * @return {string|undefined}\n */\nfunction ctGetCookie(name) {\n    let matches = document.cookie.match(new RegExp(\n        '(?:^|; )' + name.replace(/([\\.$?*|{}\\(\\)\\[\\]\\\\\\/\\+^])/g, '\\\\$1') + '=([^;]*)',\n    ));\n    return matches ? decodeURIComponent(matches[1]) : undefined;\n}\n"],"file":"cleantalk-comments-checkspam.min.js"}