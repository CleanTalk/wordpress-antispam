"use strict";

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
/**
 * Base class
 */
var ApbctCore = /*#__PURE__*/function () {
  /**
   * Default constructor
   * @param {string} selector
   */
  function ApbctCore(selector) {
    _classCallCheck(this, ApbctCore);
    _defineProperty(this, "ajax_parameters", {});
    _defineProperty(this, "restParameters", {});
    _defineProperty(this, "selector", null);
    _defineProperty(this, "elements", []);
    // Event properties
    _defineProperty(this, "eventCallback", void 0);
    _defineProperty(this, "eventSelector", void 0);
    _defineProperty(this, "event", void 0);
    this.select(selector);
  }

  /**
   * Get elements by CSS selector
   *
   * @param {string} selector
   * @return {*}
   */
  _createClass(ApbctCore, [{
    key: "select",
    value: function select(selector) {
      if (selector instanceof HTMLCollection) {
        this.selector = null;
        this.elements = [];
        this.elements = Array.prototype.slice.call(selector);
      } else if (_typeof(selector) === 'object') {
        this.selector = null;
        this.elements = [];
        this.elements[0] = selector;
      } else if (typeof selector === 'string') {
        this.selector = selector;
        this.elements = Array.prototype.slice.call(document.querySelectorAll(selector));
        // this.elements = document.querySelectorAll(selector)[0];
      } else {
        this.deselect();
      }
      return this;
    }

    /**
     * @param {object|string} elemToAdd
     */
  }, {
    key: "addElement",
    value: function addElement(elemToAdd) {
      if (_typeof(elemToAdd) === 'object') {
        this.elements.push(elemToAdd);
      } else if (typeof elemToAdd === 'string') {
        this.selector = elemToAdd;
        this.elements = Array.prototype.slice.call(document.querySelectorAll(elemToAdd));
      } else {
        this.deselect();
      }
    }

    /**
     * @param {object} elem
     */
  }, {
    key: "push",
    value: function push(elem) {
      this.elements.push(elem);
    }

    /**
     * reduce
     */
  }, {
    key: "reduce",
    value: function reduce() {
      this.elements = this.elements.slice(0, -1);
    }

    /**
     * deselect
     */
  }, {
    key: "deselect",
    value: function deselect() {
      this.elements = [];
    }

    /**
     * Set or get CSS for/of currently selected element
     *
     * @param {object|string} style
     * @param {boolean} getRaw
     *
     * @return {boolean|*}
     */
  }, {
    key: "css",
    value: function css(style, getRaw) {
      getRaw = getRaw || false;

      // Set style
      if (_typeof(style) === 'object') {
        var stringToCamelCase = function stringToCamelCase(str) {
          return str.replace(/([-_][a-z])/g, function (group) {
            return group.toUpperCase().replace('-', '').replace('_', '');
          });
        };

        // Apply multiple styles
        for (var styleName in style) {
          if (Object.hasOwn(style, styleName)) {
            var DomStyleName = stringToCamelCase(styleName);

            // Apply to multiple elements (currently selected)
            for (var i = 0; i < this.elements.length; i++) {
              this.elements[i].style[DomStyleName] = style[styleName];
            }
          }
        }
        return this;
      }

      // Get style of first currently selected element
      if (typeof style === 'string') {
        var computedStyle = getComputedStyle(this.elements[0])[style];

        // Process
        if (typeof computedStyle !== 'undefined' && !getRaw) {
          // Cut of units
          computedStyle = computedStyle.replace(/(\d)(em|pt|%|px){1,2}$/, '$1');
          // Cast to INT
          computedStyle = Number(computedStyle) == computedStyle ? Number(computedStyle) : computedStyle;
          return computedStyle;
        }

        // Return unprocessed
        return computedStyle;
      }
    }

    /**
     * hide
     */
  }, {
    key: "hide",
    value: function hide() {
      this.prop('prev-display', this.css('display'));
      this.css({
        'display': 'none'
      });
    }

    /**
     * show
     */
  }, {
    key: "show",
    value: function show() {
      this.css({
        'display': this.prop('prev-display')
      });
    }

    /**
     * addClass
     */
  }, {
    key: "addClass",
    value: function addClass() {
      for (var i = 0; i < this.elements.length; i++) {
        this.elements[i].classList.add(className);
      }
    }

    /**
     * removeClass
     */
  }, {
    key: "removeClass",
    value: function removeClass() {
      for (var i = 0; i < this.elements.length; i++) {
        this.elements[i].classList.remove(className);
      }
    }

    /**
     * @param {string} className
     */
  }, {
    key: "toggleClass",
    value: function toggleClass(className) {
      for (var i = 0; i < this.elements.length; i++) {
        this.elements[i].classList.toggle(className);
      }
    }

    /**
     * Wrapper for apbctAJAX class
     *
     * @param {object|array} ajaxParameters
     * @return {ApbctAjax}
     */
  }, {
    key: "ajax",
    value: function ajax(ajaxParameters) {
      this.ajax_parameters = ajaxParameters;
      return new ApbctAjax(ajaxParameters);
    }

    /**
     * Wrapper for apbctREST class
     *
     * @param {object|array} restParameters
     * @return {ApbctRest}
     */
  }, {
    key: "rest",
    value: function rest(restParameters) {
      this.restParameters = restParameters;
      return new ApbctRest(restParameters);
    }

    /**
     * ************ EVENTS *************
     */

    /**
     *
     * Why the mess with arguments?
     *
     * Because we need to support the following function signatures:
     *      on('click',                   function(){ alert('some'); });
     *      on('click', 'inner_selector', function(){ alert('some'); });
     *
     * @param {object|array} args
     */
  }, {
    key: "on",
    value: function on() {
      this.event = arguments.length <= 0 ? undefined : arguments[0];
      this.eventCallback = (arguments.length <= 2 ? undefined : arguments[2]) || (arguments.length <= 1 ? undefined : arguments[1]);
      this.eventSelector = typeof (arguments.length <= 1 ? undefined : arguments[1]) === 'string' ? arguments.length <= 1 ? undefined : arguments[1] : null;
      for (var i = 0; i < this.elements.length; i++) {
        this.elements[i].addEventListener(this.event, this.eventSelector !== null ? this.onChecker.bind(this) : this.eventCallback);
      }
    }

    /**
     * Check if a selector of an event matches current target
     *
     * @param {object} event
     * @return {*}
     */
  }, {
    key: "onChecker",
    value: function onChecker(event) {
      if (event.target === document.querySelector(this.eventSelector)) {
        event.stopPropagation();
        return this.eventCallback(event);
      }
    }

    /**
     * @param {object|function|string} callback
     */
  }, {
    key: "ready",
    value: function ready(callback) {
      document.addEventListener('DOMContentLoaded', callback);
    }

    /**
     * @param {object|function|string} callback
     */
  }, {
    key: "change",
    value: function change(callback) {
      this.on('change', callback);
    }

    /**
     * ATTRIBUTES
     */

    /**
     * Get an attribute or property of an element
     *
     * @param {string} attrName
     * @return {*|*[]}
     */
  }, {
    key: "attr",
    value: function attr(attrName) {
      var outputValue = [];
      for (var i = 0; i < this.elements.length; i++) {
        // Use property instead of attribute if possible
        if (typeof this.elements[i][attrName] !== 'undefined') {
          outputValue.push(this.elements[i][attrName]);
        } else {
          outputValue.push(this.elements[i].getAttribute(attrName));
        }
      }

      // Return a single value instead of array if only one value is present
      return outputValue.length === 1 ? outputValue[0] : outputValue;
    }

    /**
     * @param {string} propName
     * @param {mixed} value
     * @return {*|*[]|ApbctCore}
     */
  }, {
    key: "prop",
    value: function prop(propName, value) {
      // Setting values
      if (typeof value !== 'undefined') {
        for (var i = 0; i < this.elements.length; i++) {
          this.elements[i][propName] = value;
        }
        return this;

        // Getting values
      } else {
        var outputValue = [];
        for (var _i = 0; _i < this.elements.length; _i++) {
          outputValue.push(this.elements[_i][propName]);
        }

        // Return a single value instead of array if only one value is present
        return outputValue.length === 1 ? outputValue[0] : outputValue;
      }
    }

    /**
     * Set or get inner HTML
     *
     * @param {string} value
     * @return {*|*[]}
     */
  }, {
    key: "html",
    value: function html(value) {
      return typeof value !== 'undefined' ? this.prop('innerHTML', value) : this.prop('innerHTML');
    }

    /**
     * Set or get value of input tags
     *
     * @param {mixed} value
     * @return {*|*[]|undefined}
     */
  }, {
    key: "val",
    value: function val(value) {
      return typeof value !== 'undefined' ? this.prop('value', value) : this.prop('value');
    }

    /**
     * @param {string} name
     * @param {mixed} value
     * @return {*|*[]|ApbctCore}
     */
  }, {
    key: "data",
    value: function data(name, value) {
      return typeof value !== 'undefined' ? this.prop('apbct-data', name, value) : this.prop('apbct-data');
    }

    /**
     * END OF ATTRIBUTES
     */

    /**
     * FILTERS
     */

    /**
     * Check if the current elements are corresponding to filter
     *
     * @param {mixed} filter
     * @return {boolean}
     */
  }, {
    key: "is",
    value: function is(filter) {
      var outputValue = false;
      var _iterator = _createForOfIteratorHelper(this.elements),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var elem = _step.value;
          outputValue || (outputValue = this.isElem(elem, filter));
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      return outputValue;
    }

    /**
     * @param {string|object} elemToCheck
     * @param {mixed} filter
     * @return {boolean}
     */
  }, {
    key: "isElem",
    value: function isElem(elemToCheck, filter) {
      var is = false;
      var isRegisteredTagName = function isRegisteredTagName(name) {
        var newlyCreatedElement = document.createElement(name).constructor;
        return !Boolean(~[HTMLElement, HTMLUnknownElement].indexOf(newlyCreatedElement));
      };

      // Check for filter function
      if (typeof filter === 'function') {
        is || (is = filter.call(this, elemToCheck));
      }

      // Check for filter function
      if (typeof filter === 'string') {
        // Filter is tag name
        if (filter.match(/^[a-z]/) && isRegisteredTagName(filter)) {
          is || (is = elemToCheck.tagName.toLowerCase() === filter.toLowerCase());

          // Filter is property
        } else if (filter.match(/^[a-z]/)) {
          is || (is = Boolean(elemToCheck[filter]));

          // Filter is CSS selector
        } else {
          is || (is = this.selector !== null ? document.querySelector(this.selector + filter) !== null :
          // If possible
          this.isWithoutSelector(elemToCheck, filter)); // Search through all elems with such selector
        }
      }
      return is;
    }

    /**
     * @param {object|string} elemToCheck
     * @param {mixed} filter
     * @return {boolean}
     */
  }, {
    key: "isWithoutSelector",
    value: function isWithoutSelector(elemToCheck, filter) {
      var elems = document.querySelectorAll(filter);
      var outputValue = false;
      var _iterator2 = _createForOfIteratorHelper(elems),
        _step2;
      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var elem = _step2.value;
          outputValue || (outputValue = elemToCheck === elem);
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
      return outputValue;
    }

    /**
     * @param {mixed} filter
     * @return {ApbctCore}
     */
  }, {
    key: "filter",
    value: function filter(_filter) {
      this.selector = null;
      for (var i = this.elements.length - 1; i >= 0; i--) {
        if (!this.isElem(this.elements[i], _filter)) {
          this.elements.splice(Number(i), 1);
        }
      }
      return this;
    }

    /**
     * NODES
     */

    /**
     * @param {mixed} filter
     * @return {ApbctCore}
     */
  }, {
    key: "parent",
    value: function parent(filter) {
      this.select(this.elements[0].parentElement);
      if (typeof filter !== 'undefined' && !this.is(filter)) {
        this.deselect();
      }
      return this;
    }

    /**
     * @param {mixed} filter
     * @return {ApbctCore}
     */
  }, {
    key: "parents",
    value: function parents(filter) {
      this.select(this.elements[0]);
      for (; this.elements[this.elements.length - 1].parentElement !== null;) {
        this.push(this.elements[this.elements.length - 1].parentElement);
      }
      this.elements.splice(0, 1); // Deleting initial element from the set

      if (typeof filter !== 'undefined') {
        this.filter(filter);
      }
      return this;
    }

    /**
     * @param {mixed} filter
     * @return {ApbctCore}
     */
  }, {
    key: "children",
    value: function children(filter) {
      this.select(this.elements[0].children);
      if (typeof filter !== 'undefined') {
        this.filter(filter);
      }
      return this;
    }

    /**
     * @param {mixed} filter
     * @return {ApbctCore}
     */
  }, {
    key: "siblings",
    value: function siblings(filter) {
      var current = this.elements[0]; // Remember current to delete it later

      this.parent();
      this.children(filter);
      this.elements.splice(this.elements.indexOf(current), 1); // Remove current element

      return this;
    }

    /** ************ DOM MANIPULATIONS **************/
  }, {
    key: "remove",
    value: function remove() {
      var _iterator3 = _createForOfIteratorHelper(this.elements),
        _step3;
      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var elem = _step3.value;
          elem.remove();
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }
    }

    /**
     * @param {string} content
     */
  }, {
    key: "after",
    value: function after(content) {
      var _iterator4 = _createForOfIteratorHelper(this.elements),
        _step4;
      try {
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          var elem = _step4.value;
          elem.after(content);
        }
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }
    }

    /**
     * @param {string} content
     */
  }, {
    key: "append",
    value: function append(content) {
      var _iterator5 = _createForOfIteratorHelper(this.elements),
        _step5;
      try {
        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
          var elem = _step5.value;
          elem.append(content);
        }
      } catch (err) {
        _iterator5.e(err);
      } finally {
        _iterator5.f();
      }
    }

    /** ************  ANIMATION  **************/
    /**
     * @param {number} time
     */
  }, {
    key: "fadeIn",
    value: function fadeIn(time) {
      var _iterator6 = _createForOfIteratorHelper(this.elements),
        _step6;
      try {
        var _loop = function _loop() {
          var elem = _step6.value;
          elem.style.opacity = 0;
          elem.style.display = 'block';
          var last = +new Date();
          var tick = function tick() {
            elem.style.opacity = +elem.style.opacity + (new Date() - last) / time;
            last = +new Date();
            if (+elem.style.opacity < 1) {
              window.requestAnimationFrame && requestAnimationFrame(tick) || setTimeout(tick, 16);
            }
          };
          tick();
        };
        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
          _loop();
        }
      } catch (err) {
        _iterator6.e(err);
      } finally {
        _iterator6.f();
      }
    }

    /**
     * @param {number} time
     */
  }, {
    key: "fadeOut",
    value: function fadeOut(time) {
      var _iterator7 = _createForOfIteratorHelper(this.elements),
        _step7;
      try {
        var _loop2 = function _loop2() {
          var elem = _step7.value;
          elem.style.opacity = 1;
          var last = +new Date();
          var tick = function tick() {
            elem.style.opacity = +elem.style.opacity - (new Date() - last) / time;
            last = +new Date();
            if (+elem.style.opacity > 0) {
              window.requestAnimationFrame && requestAnimationFrame(tick) || setTimeout(tick, 16);
            } else {
              elem.style.display = 'none';
            }
          };
          tick();
        };
        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
          _loop2();
        }
      } catch (err) {
        _iterator7.e(err);
      } finally {
        _iterator7.f();
      }
    }
  }]);
  return ApbctCore;
}();
/**
 * Hack
 *
 * Make a proxy to keep both properties and methods from:
 *  - the native object and
 *  - the new one from ApbctCore for selected element.
 *
 * For example:
 * apbct('#id).innerHTML = 'some';
 * apbct('#id).css({'backgorund-color': 'black'});
 */
// apbct = new Proxy(
//         apbct,
//         {
//             get(target, prop) {
//                 if (target.elements.length) {
//                     return target.elements[0][prop];
//                 } else {
//                     return null;
//                 }
//             },
//             set(target, prop, value){
//                 if (target.elements.length) {
//                     target.elements[0][prop] = value;
//                     return true;
//                 } else {
//                     return false;
//                 }
//             },
//             apply(target, thisArg, argArray) {
//
//             }
//         }
//     );
/**
 * @param {mixed} msg
 * @param {string} url
 */
function ctProcessError(msg, url) {
  var log = {};
  if (msg && msg.message) {
    log.err = {
      'msg': msg.message,
      'file': !!msg.fileName ? msg.fileName : false,
      'ln': !!msg.lineNumber ? msg.lineNumber : !!lineNo ? lineNo : false,
      'col': !!msg.columnNumber ? msg.columnNumber : !!columnNo ? columnNo : false,
      'stacktrace': !!msg.stack ? msg.stack : false,
      'cause': !!url ? JSON.stringify(url) : false,
      'errorObj': !!error ? error : false
    };
  } else {
    log.err = {
      'msg': msg
    };
    if (!!url) {
      log.err.file = url;
    }
  }
  log.url = window.location.href;
  log.userAgent = window.navigator.userAgent;
  var ctJsErrors = 'ct_js_errors';
  var errArray = localStorage.getItem(ctJsErrors);
  if (errArray === null) errArray = '[]';
  errArray = JSON.parse(errArray);
  for (var i = 0; i < errArray.length; i++) {
    if (errArray[i].err.msg === log.err.msg) {
      return;
    }
  }
  errArray.push(log);
  localStorage.setItem(ct_js_errors, JSON.stringify(errArray));
}
if (Math.floor(Math.random() * 100) === 1) {
  window.onerror = function (exception, url) {
    var filterWords = ['apbct', 'ctPublic'];
    var length = filterWords.length;
    while (length--) {
      if (exception.indexOf(filterWords[length]) !== -1) {
        ctProcessError(exception, url);
      }
    }
    return false;
  };
}

/**
 * Enter point to ApbctCore class
 *
 * @param {array|object} params
 * @return {*}
 */
// eslint-disable-next-line no-unused-vars, require-jsdoc
function apbct(params) {
  return new ApbctCore().select(params);
}

/**
 * ApbctXhr
 */
var ApbctXhr = /*#__PURE__*/function () {
  // eslint-disable-next-line require-jsdoc
  function ApbctXhr(parameters) {
    _classCallCheck(this, ApbctXhr);
    _defineProperty(this, "xhr", new XMLHttpRequest());
    // Base parameters
    _defineProperty(this, "method", 'POST');
    // HTTP-request type
    _defineProperty(this, "url", '');
    // URL to send the request
    _defineProperty(this, "async", true);
    _defineProperty(this, "user", null);
    // HTTP-authorization username
    _defineProperty(this, "password", null);
    // HTTP-authorization password
    _defineProperty(this, "data", {});
    // Data to send
    // Optional params
    _defineProperty(this, "button", null);
    // Button that should be disabled when request is performing
    _defineProperty(this, "spinner", null);
    // Spinner that should appear when request is in process
    _defineProperty(this, "progressbar", null);
    // Progress bar for the current request
    _defineProperty(this, "context", this);
    // Context
    _defineProperty(this, "callback", null);
    _defineProperty(this, "onErrorCallback", null);
    _defineProperty(this, "responseType", 'json');
    // Expected data type from server
    _defineProperty(this, "headers", {});
    _defineProperty(this, "timeout", 15000);
    // Request timeout in milliseconds
    _defineProperty(this, "methods_to_convert_data_to_URL", ['GET', 'HEAD']);
    _defineProperty(this, "body", null);
    _defineProperty(this, "http_code", 0);
    _defineProperty(this, "status_text", '');
    // Set class properties
    for (var key in parameters) {
      if (typeof this[key] !== 'undefined') {
        this[key] = parameters[key];
      }
    }

    // Modifying DOM-elements
    this.prepare();

    // Modify URL with data for GET and HEAD requests
    if (Object.keys(this.data).length) {
      this.deleteDoubleJSONEncoding(this.data);
      this.convertData();
    }
    if (!this.url) {
      console.log('%cXHR%c not URL provided', 'color: red; font-weight: bold;', 'color: grey; font-weight: normal;');
      return false;
    }

    // Configure the request
    this.xhr.open(this.method, this.url, this.async, this.user, this.password);
    this.setHeaders();
    this.xhr.responseType = this.responseType;
    this.xhr.timeout = this.timeout;

    /* EVENTS */
    // Monitoring status
    this.xhr.onreadystatechange = function () {
      this.onReadyStateChange();
    }.bind(this);

    // Run callback
    this.xhr.onload = function () {
      this.onLoad();
    }.bind(this);

    // On progress
    this.xhr.onprogress = function (event) {
      this.onProgress(event);
    }.bind(this);

    // On error
    this.xhr.onerror = function () {
      this.onError();
    }.bind(this);
    this.xhr.ontimeout = function () {
      this.onTimeout();
    }.bind(this);

    // Send the request
    this.xhr.send(this.body);
  }

  /**
   * prepare
   */
  _createClass(ApbctXhr, [{
    key: "prepare",
    value: function prepare() {
      // Disable button
      if (this.button) {
        this.button.setAttribute('disabled', 'disabled');
        this.button.style.cursor = 'not-allowed';
      }

      // Enable spinner
      if (this.spinner) {
        this.spinner.style.display = 'inline';
      }
    }

    /**
     * complete
     */
  }, {
    key: "complete",
    value: function complete() {
      this.http_code = this.xhr.status;
      this.status_text = this.xhr.statusText;

      // Disable button
      if (this.button) {
        this.button.removeAttribute('disabled');
        this.button.style.cursor = 'auto';
      }

      // Enable spinner
      if (this.spinner) {
        this.spinner.style.display = 'none';
      }
      if (this.progressbar) {
        this.progressbar.fadeOut('slow');
      }
    }

    /**
     * onReadyStateChange
     */
  }, {
    key: "onReadyStateChange",
    value: function onReadyStateChange() {
      if (this.on_ready_state_change !== null && typeof this.on_ready_state_change === 'function') {
        this.on_ready_state_change();
      }
    }

    /**
     * @param {object} event
     */
  }, {
    key: "onProgress",
    value: function onProgress(event) {
      if (this.on_progress !== null && typeof this.on_progress === 'function') {
        this.on_progress();
      }
    }

    /**
     * onError
     */
  }, {
    key: "onError",
    value: function onError() {
      console.log('error');
      this.complete();
      this.error(this.http_code, this.status_text);
      if (this.onErrorCallback !== null && typeof this.onErrorCallback === 'function') {
        this.onErrorCallback(this.status_text);
      }
    }

    /**
     * onTimeout
     */
  }, {
    key: "onTimeout",
    value: function onTimeout() {
      this.complete();
      this.error(0, 'timeout');
      if (this.onErrorCallback !== null && typeof this.onErrorCallback === 'function') {
        this.onErrorCallback('Timeout');
      }
    }

    /**
     * @return {boolean}
     */
  }, {
    key: "onLoad",
    value: function onLoad() {
      this.complete();
      if (this.responseType === 'json') {
        if (this.xhr.response === null) {
          this.error(this.http_code, this.status_text, 'No response');
          return false;
        } else if (typeof this.xhr.response.error !== 'undefined') {
          this.error(this.http_code, this.status_text, this.xhr.response.error);
          return false;
        }
      }
      if (this.callback !== null && typeof this.callback === 'function') {
        this.callback.call(this.context, this.xhr.response, this.data);
      }
    }

    /**
     * @param {number} httpCode
     * @param {string} statusText
     * @param {string} additionalMsg
     */
  }, {
    key: "error",
    value: function error(httpCode, statusText, additionalMsg) {
      var errorString = '';
      if (statusText === 'timeout') {
        errorString += 'Server response timeout';
      } else if (httpCode === 200) {
        if (statusText === 'parsererror') {
          errorString += 'Unexpected response from server. See console for details.';
        } else {
          errorString += 'Unexpected error. Status: ' + statusText + '.';
          if (typeof additionalMsg !== 'undefined') {
            errorString += ' Additional error info: ' + additionalMsg;
          }
        }
      } else if (httpCode === 500) {
        errorString += 'Internal server error.';
      } else {
        errorString += 'Unexpected response code:' + httpCode;
      }
      this.errorOutput(errorString);
    }

    /**
     * @param {string} errorMsg
     */
  }, {
    key: "errorOutput",
    value: function errorOutput(errorMsg) {
      console.log('%c ctXHR error: %c' + errorMsg, 'color: red;', 'color: grey;');
    }

    /**
     * setHeaders
     */
  }, {
    key: "setHeaders",
    value: function setHeaders() {
      // Set headers if passed
      for (var headerName in this.headers) {
        if (typeof this.headers[headerName] !== 'undefined') {
          this.xhr.setRequestHeader(headerName, this.headers[headerName]);
        }
      }
    }

    /**
     * @return {string|*}
     */
  }, {
    key: "convertData",
    value: function convertData() {
      // GET, HEAD request-type
      if (~this.methods_to_convert_data_to_URL.indexOf(this.method)) {
        return this.convertDataToURL();

        // POST request-type
      } else {
        return this.convertDataToBody();
      }
    }

    /**
     * @return {string}
     */
  }, {
    key: "convertDataToURL",
    value: function convertDataToURL() {
      var paramsAppendix = new URLSearchParams(this.data).toString();
      var paramsPrefix = this.url.match(/^(https?:\/{2})?[a-z0-9.]+\?/) ? '&' : '?';
      this.url += paramsPrefix + paramsAppendix;
      return this.url;
    }

    /**
     * @return {null}
     */
  }, {
    key: "convertDataToBody",
    value: function convertDataToBody() {
      this.body = new FormData();
      for (var dataKey in this.data) {
        if (Object.hasOwn(this.data, dataKey)) {
          this.body.append(dataKey, _typeof(this.data[dataKey]) === 'object' ? JSON.stringify(this.data[dataKey]) : this.data[dataKey]);
        }
      }
      return this.body;
    }

    /**
     * Recursive
     *
     * Recursively decode JSON-encoded properties
     *
     * @param {object} object
     * @return {*}
     */
  }, {
    key: "deleteDoubleJSONEncoding",
    value: function deleteDoubleJSONEncoding(object) {
      if (_typeof(object) === 'object') {
        for (var objectKey in object) {
          if (Object.hasOwn(object, objectKey)) {
            // Recursion
            if (_typeof(object[objectKey]) === 'object') {
              object[objectKey] = this.deleteDoubleJSONEncoding(object[objectKey]);
            }

            // Common case (out)
            if (typeof object[objectKey] === 'string' && object[objectKey].match(/^[\[{].*?[\]}]$/) !== null // is like JSON
            ) {
              var parsedValue = JSON.parse(object[objectKey]);
              if (_typeof(parsedValue) === 'object') {
                object[objectKey] = parsedValue;
              }
            }
          }
        }
      }
      return object;
    }
  }]);
  return ApbctXhr;
}(); // eslint-disable-next-line require-jsdoc
var ApbctAjax = /*#__PURE__*/function (_ApbctXhr) {
  _inherits(ApbctAjax, _ApbctXhr);
  // eslint-disable-next-line require-jsdoc
  function ApbctAjax() {
    _classCallCheck(this, ApbctAjax);
    return _callSuper(this, ApbctAjax, [arguments.length <= 0 ? undefined : arguments[0]]);
  }
  return _createClass(ApbctAjax);
}(ApbctXhr); // eslint-disable-next-line require-jsdoc
var ApbctRest = /*#__PURE__*/function (_ApbctXhr2) {
  _inherits(ApbctRest, _ApbctXhr2);
  // eslint-disable-next-line require-jsdoc
  function ApbctRest() {
    var _this;
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _classCallCheck(this, ApbctRest);
    args = args[0];
    args.url = ApbctRest.default_route + args.route;
    args.headers = {
      'X-WP-Nonce': ctPublicFunctions._rest_nonce
    };
    _this = _callSuper(this, ApbctRest, [args]);
    _defineProperty(_assertThisInitialized(_this), "route", '');
    return _this;
  }
  return _createClass(ApbctRest);
}(ApbctXhr);
/**
 * @param {object|array|string} cookies
 * @param {object|array|string} value
 * @param {string|number} expires
 */
// eslint-disable-next-line no-unused-vars,require-jsdoc
_defineProperty(ApbctRest, "default_route", ctPublicFunctions._rest_url + 'cleantalk-antispam/v1/');
function ctSetCookie(cookies, value, expires) {
  var listOfCookieNamesToForceAlt = ['ct_sfw_pass_key', 'ct_sfw_passed', 'wordpress_apbct_antibot', 'apbct_anticrawler_passed', 'apbct_antiflood_passed', 'apbct_email_encoder_passed'];
  var skipAlt = false;
  if (typeof cookies === 'string') {
    skipAlt = cookies === 'ct_pointer_data';
    if (typeof value === 'string' || typeof value === 'number') {
      cookies = [[cookies, value, expires]];
    }
  }

  // Cookies disabled
  if (ctPublicFunctions.data__cookies_type === 'none') {
    var forcedAltCookiesSet = [];
    cookies.forEach(function (item) {
      if (listOfCookieNamesToForceAlt.indexOf(item[0]) !== -1) {
        forcedAltCookiesSet.push(item);
      } else {
        apbctLocalStorage.set(item[0], encodeURIComponent(item[1]));
      }
    });
    // if cookies from list found use alt cookies for this selection set
    if (forcedAltCookiesSet.length > 0) {
      ctSetAlternativeCookie(forcedAltCookiesSet);
    }

    // If problem integration forms detected use alt cookies for whole cookies set
    if (ctPublic.force_alt_cookies && !skipAlt) {
      // do it just once
      ctSetAlternativeCookie(cookies, {
        forceAltCookies: true
      });
    } else {
      ctNoCookieAttachHiddenFieldsToForms();
    }

    // Using traditional cookies
  } else if (ctPublicFunctions.data__cookies_type === 'native') {
    // If problem integration forms detected use alt cookies for whole cookies set
    if (ctPublic.force_alt_cookies && !skipAlt) {
      // do it just once
      ctSetAlternativeCookie(cookies, {
        forceAltCookies: true
      });
    }
    cookies.forEach(function (item) {
      var _expires = typeof item[2] !== 'undefined' ? 'expires=' + expires + '; ' : '';
      var ctSecure = location.protocol === 'https:' ? '; secure' : '';
      document.cookie = ctPublicFunctions.cookiePrefix + item[0] + '=' + encodeURIComponent(item[1]) + '; ' + _expires + 'path=/; samesite=lax' + ctSecure;
    });

    // Using alternative cookies
  } else if (ctPublicFunctions.data__cookies_type === 'alternative' && !skipAlt) {
    ctSetAlternativeCookie(cookies);
  }
}

// eslint-disable-next-line no-unused-vars,require-jsdoc
function ctDetectForcedAltCookiesForms() {
  var ninjaFormsSign = document.querySelectorAll('#tmpl-nf-layout').length > 0;
  var elementorUltimateAddonsRegister = document.querySelectorAll('.uael-registration-form-wrapper').length > 0;
  var smartFormsSign = document.querySelectorAll('script[id*="smart-forms"]').length > 0;
  var jetpackCommentsForm = document.querySelectorAll('iframe[name="jetpack_remote_comment"]').length > 0;
  var cwginstockForm = document.querySelectorAll('.cwginstock-subscribe-form').length > 0;
  var userRegistrationProForm = document.querySelectorAll('div[id^="user-registration-form"]').length > 0;
  var etPbDiviSubscriptionForm = document.querySelectorAll('div[class^="et_pb_newsletter_form"]').length > 0;
  var fluentBookingApp = document.querySelectorAll('div[class^="fluent_booking_app"]').length > 0;
  var bloomPopup = document.querySelectorAll('div[class^="et_bloom_form_container"]').length > 0;
  var pafeFormsFormElementor = document.querySelectorAll('div[class*="pafe-form"]').length > 0;
  ctPublic.force_alt_cookies = smartFormsSign || ninjaFormsSign || jetpackCommentsForm || elementorUltimateAddonsRegister || cwginstockForm || userRegistrationProForm || etPbDiviSubscriptionForm || fluentBookingApp || pafeFormsFormElementor || bloomPopup;
  setTimeout(function () {
    if (!ctPublic.force_alt_cookies) {
      var bookingPress = document.querySelectorAll('main[id^="bookingpress_booking_form"]').length > 0;
      ctPublic.force_alt_cookies = bookingPress;
    }
  }, 1000);
}

// eslint-disable-next-line require-jsdoc
function ctSetAlternativeCookie(cookies, params) {
  if (typeof getJavascriptClientData === 'function') {
    // reprocess already gained cookies data
    if (Array.isArray(cookies)) {
      cookies = getJavascriptClientData(cookies);
    }
  } else {
    console.log('APBCT ERROR: getJavascriptClientData() is not loaded');
  }
  try {
    cookies = JSON.parse(cookies);
  } catch (e) {
    console.log('APBCT ERROR: JSON parse error:' + e);
    return;
  }
  var callback = params && params.callback || null;
  var onErrorCallback = params && params.onErrorCallback || null;
  if (params && params.forceAltCookies) {
    cookies.apbct_force_alt_cookies = true;
  }

  // Using REST API handler
  if (ctPublicFunctions.data__ajax_type === 'rest') {
    // fix for url encoded cookie apbct_pixel_url on REST route
    if (typeof cookies.apbct_pixel_url === 'string' && cookies.apbct_pixel_url.indexOf('%3A') !== -1) {
      cookies.apbct_pixel_url = decodeURIComponent(cookies.apbct_pixel_url);
    }
    apbct_public_sendREST('alt_sessions', {
      method: 'POST',
      data: {
        cookies: cookies
      },
      callback: callback,
      onErrorCallback: onErrorCallback
    });

    // Using AJAX request and handler
  } else if (ctPublicFunctions.data__ajax_type === 'admin_ajax') {
    apbct_public_sendAJAX({
      action: 'apbct_alt_session__save__AJAX',
      cookies: cookies
    }, {
      notJson: 1,
      callback: callback,
      onErrorCallback: onErrorCallback,
      beforeSend: function beforeSend(xhr) {
        xhr.setRequestHeader('X-Robots-Tag', 'noindex, nofollow');
      }
    });
  }
}

/**
 * Get cookie by name
 * @param name
 * @return {string|undefined}
 */
// eslint-disable-next-line require-jsdoc,no-unused-vars
function ctGetCookie(name) {
  var matches = document.cookie.match(new RegExp('(?:^|; )' + name.replace(/([\.$?*|{}\(\)\[\]\\\/\+^])/g, '\\$1') + '=([^;]*)'));
  return matches ? decodeURIComponent(matches[1]) : undefined;
}

// eslint-disable-next-line require-jsdoc,no-unused-vars
function ctDeleteCookie(cookieName) {
  // Cookies disabled
  if (ctPublicFunctions.data__cookies_type === 'none') {
    return;

    // Using traditional cookies
  } else if (ctPublicFunctions.data__cookies_type === 'native') {
    var ctSecure = location.protocol === 'https:' ? '; secure' : '';
    document.cookie = cookieName + '=""; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/; samesite=lax' + ctSecure;

    // Using alternative cookies
  } else if (ctPublicFunctions.data__cookies_type === 'alternative') {
    // @ToDo implement this logic
  }
}

// eslint-disable-next-line require-jsdoc,camelcase
function apbct_public_sendAJAX(data, params, obj) {
  // Default params
  var _params = [];
  _params['callback'] = params.callback || null;
  _params['onErrorCallback'] = params.onErrorCallback || null;
  _params['callback_context'] = params.callback_context || null;
  _params['callback_params'] = params.callback_params || null;
  _params['async'] = params.async || true;
  _params['notJson'] = params.notJson || null;
  _params['responseType'] = params.notJson ? 'text' : 'json';
  _params['timeout'] = params.timeout || 15000;
  _params['obj'] = obj || null;
  _params['button'] = params.button || null;
  _params['spinner'] = params.spinner || null;
  _params['progressbar'] = params.progressbar || null;
  _params['silent'] = params.silent || null;
  _params['no_nonce'] = params.no_nonce || null;
  _params['data'] = data;
  _params['url'] = ctPublicFunctions._ajax_url;
  if (typeof data === 'string') {
    if (!_params['no_nonce']) {
      _params['data'] = _params['data'] + '&_ajax_nonce=' + ctPublicFunctions._ajax_nonce;
    }
    _params['data'] = _params['data'] + '&no_cache=' + Math.random();
  } else {
    if (!_params['no_nonce']) {
      _params['data']._ajax_nonce = ctPublicFunctions._ajax_nonce;
    }
    _params['data'].no_cache = Math.random();
  }
  new ApbctCore().ajax(_params);
}

// eslint-disable-next-line require-jsdoc,camelcase
function apbct_public_sendREST(route, params) {
  var _params = [];
  _params['route'] = route;
  _params['callback'] = params.callback || null;
  _params['onErrorCallback'] = params.onErrorCallback || null;
  _params['data'] = params.data || [];
  _params['method'] = params.method || 'POST';
  new ApbctCore().rest(_params);
}

/**
 * Generate unique ID
 * @return {string}
 */
// eslint-disable-next-line no-unused-vars,require-jsdoc
function apbctGenerateUniqueID() {
  return Math.random().toString(36).replace(/[^a-z]+/g, '').substr(2, 10);
}
var apbctLocalStorage = {
  get: function get(key, property) {
    if (typeof property === 'undefined') {
      property = 'value';
    }
    var storageValue = localStorage.getItem(key);
    if (storageValue !== null) {
      try {
        var json = JSON.parse(storageValue);
        if (json.hasOwnProperty(property)) {
          try {
            // if property can be parsed as JSON - do it
            return JSON.parse(json[property]);
          } catch (e) {
            // if not - return string of value
            return json[property].toString();
          }
        } else {
          return json;
        }
      } catch (e) {
        return storageValue;
      }
    }
    return false;
  },
  set: function set(key, value) {
    var isJson = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
    if (isJson) {
      var objToSave = {
        'value': JSON.stringify(value),
        'timestamp': Math.floor(new Date().getTime() / 1000)
      };
      localStorage.setItem(key, JSON.stringify(objToSave));
    } else {
      localStorage.setItem(key, value);
    }
  },
  isAlive: function isAlive(key, maxLifetime) {
    if (typeof maxLifetime === 'undefined') {
      maxLifetime = 86400;
    }
    var keyTimestamp = this.get(key, 'timestamp');
    return keyTimestamp + maxLifetime > Math.floor(new Date().getTime() / 1000);
  },
  isSet: function isSet(key) {
    return localStorage.getItem(key) !== null;
  },
  "delete": function _delete(key) {
    localStorage.removeItem(key);
  },
  getCleanTalkData: function getCleanTalkData() {
    var data = {};
    for (var i = 0; i < localStorage.length; i++) {
      var key = localStorage.key(i);
      if (key.indexOf('ct_') !== -1 || key.indexOf('apbct_') !== -1) {
        data[key.toString()] = apbctLocalStorage.get(key);
      }
    }
    return data;
  }
};
var apbctSessionStorage = {
  get: function get(key, property) {
    if (typeof property === 'undefined') {
      property = 'value';
    }
    var storageValue = sessionStorage.getItem(key);
    if (storageValue !== null) {
      try {
        var json = JSON.parse(storageValue);
        return json.hasOwnProperty(property) ? JSON.parse(json[property]) : json;
      } catch (e) {
        return storageValue;
      }
    }
    return false;
  },
  set: function set(key, value) {
    var isJson = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
    if (isJson) {
      var objToSave = {
        'value': JSON.stringify(value),
        'timestamp': Math.floor(new Date().getTime() / 1000)
      };
      sessionStorage.setItem(key, JSON.stringify(objToSave));
    } else {
      sessionStorage.setItem(key, value);
    }
  },
  isSet: function isSet(key) {
    return sessionStorage.getItem(key) !== null;
  },
  "delete": function _delete(key) {
    sessionStorage.removeItem(key);
  },
  getCleanTalkData: function getCleanTalkData() {
    var data = {};
    for (var i = 0; i < sessionStorage.length; i++) {
      var key = sessionStorage.key(i);
      if (key.indexOf('ct_') !== -1 || key.indexOf('apbct_') !== -1) {
        data[key.toString()] = apbctSessionStorage.get(key);
      }
    }
    return data;
  }
};

/**
 * Handler for -webkit based browser that listen for a custom
 * animation create using the :pseudo-selector in the stylesheet.
 * Works with Chrome, Safari
 *
 * @param {AnimationEvent} event
 */
// eslint-disable-next-line no-unused-vars,require-jsdoc
function apbctOnAnimationStart(event) {
  'onautofillstart' === event.animationName ? apbctAutocomplete(event.target) : apbctCancelAutocomplete(event.target);
}

/**
 * Handler for non-webkit based browser that listen for input
 * event to trigger the autocomplete-cancel process.
 * Works with Firefox, Edge, IE11
 *
 * @param {InputEvent} event
 */
// eslint-disable-next-line no-unused-vars,require-jsdoc
function apbctOnInput(event) {
  'insertReplacementText' === event.inputType || !('data' in event) ? apbctAutocomplete(event.target) : apbctCancelAutocomplete(event.target);
}

/**
 * Manage an input element when its value is autocompleted
 * by the browser in the following steps:
 * - add [autocompleted] attribute from event.target
 * - create 'onautocomplete' cancelable CustomEvent
 * - dispatch the Event
 *
 * @param {HtmlInputElement} element
 */
function apbctAutocomplete(element) {
  if (element.hasAttribute('autocompleted')) return;
  element.setAttribute('autocompleted', '');
  var event = new window.CustomEvent('onautocomplete', {
    bubbles: true,
    cancelable: true,
    detail: null
  });

  // no autofill if preventDefault is called
  if (!element.dispatchEvent(event)) {
    element.value = '';
  }
}

/**
 * Manage an input element when its autocompleted value is
 * removed by the browser in the following steps:
 * - remove [autocompleted] attribute from event.target
 * - create 'onautocomplete' non-cancelable CustomEvent
 * - dispatch the Event
 *
 * @param {HtmlInputElement} element
 */
function apbctCancelAutocomplete(element) {
  if (!element.hasAttribute('autocompleted')) return;
  element.removeAttribute('autocompleted');

  // dispatch event
  element.dispatchEvent(new window.CustomEvent('onautocomplete', {
    bubbles: true,
    cancelable: false,
    detail: null
  }));
}

/**
 * Class for gathering data about user typing.
 *
 * ==============================
 * isAutoFill       - only person can use auto fill
 * isUseBuffer      - use buffer for fill current field
 * ==============================
 * lastKeyTimestamp - timestamp of last key press in current field
 * speedDelta       - change for each key press in current field,
 *                    as difference between current and previous key press timestamps,
 *                    robots in general have constant speed of typing.
 *                    If speedDelta is constant for each key press in current field,
 *                    so, speedDelta will be roughly to 0, then it is robot.
 * ==============================
 */
// eslint-disable-next-line no-unused-vars,require-jsdoc
var CTTypoData = /*#__PURE__*/function () {
  function CTTypoData() {
    _classCallCheck(this, CTTypoData);
    _defineProperty(this, "fieldData", {
      isAutoFill: false,
      isUseBuffer: false,
      speedDelta: 0,
      firstKeyTimestamp: 0,
      lastKeyTimestamp: 0,
      lastDelta: 0,
      countOfKey: 0
    });
    _defineProperty(this, "fields", document.querySelectorAll('textarea[name=comment]'));
    _defineProperty(this, "data", []);
  }
  _createClass(CTTypoData, [{
    key: "gatheringFields",
    value:
    /**
     * Gather fields.
     */
    function gatheringFields() {
      var _this2 = this;
      var fieldSet = Array.prototype.slice.call(this.fields);
      fieldSet.forEach(function (field, i) {
        _this2.data.push(Object.assign({}, _this2.fieldData));
      });
    }

    /**
     * Set listeners.
     */
  }, {
    key: "setListeners",
    value: function setListeners() {
      var _this3 = this;
      this.fields.forEach(function (field, i) {
        field.addEventListener('paste', function () {
          _this3.data[i].isUseBuffer = true;
        });
      });
      this.fields.forEach(function (field, i) {
        field.addEventListener('onautocomplete', function () {
          _this3.data[i].isAutoFill = true;
        });
      });
      this.fields.forEach(function (field, i) {
        field.addEventListener('input', function () {
          _this3.data[i].countOfKey++;
          var time = +new Date();
          var currentDelta = 0;
          if (_this3.data[i].countOfKey === 1) {
            _this3.data[i].lastKeyTimestamp = time;
            _this3.data[i].firstKeyTimestamp = time;
            return;
          }
          currentDelta = time - _this3.data[i].lastKeyTimestamp;
          if (_this3.data[i].countOfKey === 2) {
            _this3.data[i].lastKeyTimestamp = time;
            _this3.data[i].lastDelta = currentDelta;
            return;
          }
          if (_this3.data[i].countOfKey > 2) {
            _this3.data[i].speedDelta += Math.abs(_this3.data[i].lastDelta - currentDelta);
            _this3.data[i].lastKeyTimestamp = time;
            _this3.data[i].lastDelta = currentDelta;
          }
        });
      });
    }
  }]);
  return CTTypoData;
}(); // eslint-disable-next-line camelcase
var ctDate = new Date();
var ctTimeMs = new Date().getTime();
var ctMouseEventTimerFlag = true; // Reading interval flag
var ctMouseData = [];
var ctMouseDataCounter = 0;
var ctCheckedEmails = {};
var ctMouseReadInterval;
var ctMouseWriteDataInterval;
var tokenCheckerIntervalId;

// eslint-disable-next-line require-jsdoc,camelcase
function apbct_attach_event_handler(elem, event, callback) {
  if (typeof window.addEventListener === 'function') elem.addEventListener(event, callback);else elem.attachEvent(event, callback);
}
// eslint-disable-next-line require-jsdoc,camelcase
function apbct_remove_event_handler(elem, event, callback) {
  if (typeof window.removeEventListener === 'function') elem.removeEventListener(event, callback);else elem.detachEvent(event, callback);
}

// Writing first key press timestamp
var ctFunctionFirstKey = function output(event) {
  var KeyTimestamp = Math.floor(new Date().getTime() / 1000);
  ctSetCookie('ct_fkp_timestamp', KeyTimestamp);
  ctKeyStopStopListening();
};

// run cron jobs
cronFormsHandler(2000);

// mouse read
if (ctPublic.data__key_is_ok) {
  // Reading interval
  ctMouseReadInterval = setInterval(function () {
    ctMouseEventTimerFlag = true;
  }, 150);

  // Writting interval
  ctMouseWriteDataInterval = setInterval(function () {
    ctSetCookie('ct_pointer_data', JSON.stringify(ctMouseData));
  }, 1200);
}

// Logging mouse position each 150 ms
var ctFunctionMouseMove = function output(event) {
  ctSetMouseMoved();
  if (ctMouseEventTimerFlag === true) {
    ctMouseData.push([Math.round(event.clientY), Math.round(event.clientX), Math.round(new Date().getTime() - ctTimeMs)]);
    ctMouseDataCounter++;
    ctMouseEventTimerFlag = false;
    if (ctMouseDataCounter >= 50) {
      ctMouseStopData();
    }
  }
};

/**
 * Do handle periodical actions.
 * @param {int} cronStartTimeout Time to go before cron start.
 */
function cronFormsHandler() {
  var cronStartTimeout = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 2000;
  setTimeout(function () {
    setInterval(function () {
      restartFieldsListening();
      restartBotDetectorEventTokenAttach();
    }, 2000);
  }, cronStartTimeout);
}

/**
 * Restart event_token attachment if some forms load after document ready.
 */
function restartBotDetectorEventTokenAttach() {
  // List there any new conditions, right now it works only for LatePoint forms.
  // Probably, we can remove this condition at all, because setEventTokenField()
  // checks all the forms without the field
  var doAttach = document.getElementsByClassName('latepoint-form').length > 0 || document.getElementsByClassName('mec-booking-form-container').length > 0 || document.getElementById('login-form-popup') !== null;
  try {
    if (doAttach) {
      // get token from LS
      var token = apbctLocalStorage.get('bot_detector_event_token');
      if (typeof setEventTokenField === 'function' && token !== undefined && token.length === 64) {
        setEventTokenField(token);
      }
      // probably there we could use a new botDetectorInit if token is not found
    }
  } catch (e) {
    console.log(e.toString());
  }
}

/**
 * Stop mouse observing function
 */
function ctMouseStopData() {
  apbct_remove_event_handler(document, 'mousemove', ctFunctionMouseMove);
  clearInterval(ctMouseReadInterval);
  clearInterval(ctMouseWriteDataInterval);
}

/**
 * Stop key listening function
 */
function ctKeyStopStopListening() {
  apbct_remove_event_handler(document, 'mousedown', ctFunctionFirstKey);
  apbct_remove_event_handler(document, 'keydown', ctFunctionFirstKey);
}

/**
 * @param {mixed} e
 */
function checkEmail(e) {
  var currentEmail = e.target.value;
  if (currentEmail && !(currentEmail in ctCheckedEmails)) {
    // Using REST API handler
    if (ctPublicFunctions.data__ajax_type === 'rest') {
      apbct_public_sendREST('check_email_before_post', {
        method: 'POST',
        data: {
          'email': currentEmail
        },
        callback: function callback(result) {
          if (result.result) {
            ctCheckedEmails[currentEmail] = {
              'result': result.result,
              'timestamp': Date.now() / 1000 | 0
            };
            ctSetCookie('ct_checked_emails', JSON.stringify(ctCheckedEmails));
          }
        }
      });
      // Using AJAX request and handler
    } else if (ctPublicFunctions.data__ajax_type === 'admin_ajax') {
      apbct_public_sendAJAX({
        action: 'apbct_email_check_before_post',
        email: currentEmail
      }, {
        callback: function callback(result) {
          if (result.result) {
            ctCheckedEmails[currentEmail] = {
              'result': result.result,
              'timestamp': Date.now() / 1000 | 0
            };
            ctSetCookie('ct_checked_emails', JSON.stringify(ctCheckedEmails));
          }
        }
      });
    }
  }
}

/**
 * @return {bool}
 */
function ctIsDrawPixel() {
  return +ctPublic.pixel__enabled || ctPublic.data__cookies_type === 'none' && document.querySelectorAll('img#apbct_pixel').length === 0 || ctPublic.data__cookies_type === 'alternative' && document.querySelectorAll('img#apbct_pixel').length === 0;
}

/**
 * @param {string} pixelUrl
 */
function ctSetPixelImg(pixelUrl) {
  ctSetCookie('apbct_pixel_url', pixelUrl);
  if (ctIsDrawPixel()) {
    if (!document.getElementById('apbct_pixel')) {
      var insertedImg = document.createElement('img');
      insertedImg.setAttribute('alt', 'CleanTalk Pixel');
      insertedImg.setAttribute('title', 'CleanTalk Pixel');
      insertedImg.setAttribute('id', 'apbct_pixel');
      insertedImg.setAttribute('style', 'display: none; left: 99999px;');
      insertedImg.setAttribute('src', pixelUrl);
      apbct('body').append(insertedImg);
    }
  }
}

/**
 * @param {string} pixelUrl
 */
function ctSetPixelImgFromLocalstorage(pixelUrl) {
  if (ctIsDrawPixel()) {
    if (!document.getElementById('apbct_pixel')) {
      var insertedImg = document.createElement('img');
      insertedImg.setAttribute('alt', 'CleanTalk Pixel');
      insertedImg.setAttribute('title', 'CleanTalk Pixel');
      insertedImg.setAttribute('id', 'apbct_pixel');
      insertedImg.setAttribute('style', 'display: none; left: 99999px;');
      insertedImg.setAttribute('src', decodeURIComponent(pixelUrl));
      apbct('body').append(insertedImg);
    }
  }
}

/**
 * ctGetPixelUrl
 */
function ctGetPixelUrl() {
  // Check if pixel is already in localstorage and is not outdated
  var localStoragePixelUrl = apbctLocalStorage.get('apbct_pixel_url');
  if (localStoragePixelUrl !== false) {
    if (!apbctLocalStorage.isAlive('apbct_pixel_url', 3600 * 3)) {
      apbctLocalStorage["delete"]('apbct_pixel_url');
    } else {
      // if so - load pixel from localstorage and draw it skipping AJAX
      ctSetPixelImgFromLocalstorage(localStoragePixelUrl);
      return;
    }
  }
  // Using REST API handler
  if (ctPublicFunctions.data__ajax_type === 'rest') {
    apbct_public_sendREST('apbct_get_pixel_url', {
      method: 'POST',
      callback: function callback(result) {
        if (result && (typeof result === 'string' || result instanceof String) && result.indexOf('https') === 0) {
          // set  pixel url to localstorage
          if (!apbctLocalStorage.get('apbct_pixel_url')) {
            // set pixel to the storage
            apbctLocalStorage.set('apbct_pixel_url', result);
            // update pixel data in the hidden fields
            ctNoCookieAttachHiddenFieldsToForms();
          }
          // then run pixel drawing
          ctSetPixelImg(result);
        }
      }
    });
    // Using AJAX request and handler
  } else {
    apbct_public_sendAJAX({
      action: 'apbct_get_pixel_url'
    }, {
      notJson: true,
      callback: function callback(result) {
        if (result && (typeof result === 'string' || result instanceof String) && result.indexOf('https') === 0) {
          // set  pixel url to localstorage
          if (!apbctLocalStorage.get('apbct_pixel_url')) {
            // set pixel to the storage
            apbctLocalStorage.set('apbct_pixel_url', result);
            // update pixel data in the hidden fields
            ctNoCookieAttachHiddenFieldsToForms();
          }
          // then run pixel drawing
          ctSetPixelImg(result);
        }
      },
      beforeSend: function beforeSend(xhr) {
        xhr.setRequestHeader('X-Robots-Tag', 'noindex, nofollow');
      }
    });
  }
}

/**
 * ctSetHasScrolled
 */
function ctSetHasScrolled() {
  if (!apbctLocalStorage.isSet('ct_has_scrolled') || !apbctLocalStorage.get('ct_has_scrolled')) {
    ctSetCookie('ct_has_scrolled', 'true');
    apbctLocalStorage.set('ct_has_scrolled', true);
  }
  if (ctPublic.data__cookies_type === 'native' && ctGetCookie('ct_has_scrolled') === undefined) {
    ctSetCookie('ct_has_scrolled', 'true');
  }
}

/**
 * ctSetMouseMoved
 */
function ctSetMouseMoved() {
  if (!apbctLocalStorage.isSet('ct_mouse_moved') || !apbctLocalStorage.get('ct_mouse_moved')) {
    ctSetCookie('ct_mouse_moved', 'true');
    apbctLocalStorage.set('ct_mouse_moved', true);
  }
  if (ctPublic.data__cookies_type === 'native' && ctGetCookie('ct_mouse_moved') === undefined) {
    ctSetCookie('ct_mouse_moved', 'true');
  }
}

/**
 * Restart listen fields to set ct_has_input_focused or ct_has_key_up
 */
function restartFieldsListening() {
  if (!apbctLocalStorage.isSet('ct_has_input_focused') && !apbctLocalStorage.isSet('ct_has_key_up')) {
    ctStartFieldsListening();
  }
}

/**
 * init listeners for keyup and focus events
 */
function ctStartFieldsListening() {
  if ((apbctLocalStorage.isSet('ct_has_key_up') || apbctLocalStorage.get('ct_has_key_up')) && (apbctLocalStorage.isSet('ct_has_input_focused') || apbctLocalStorage.get('ct_has_input_focused')) && ctPublic.data__cookies_type === 'native' && ctGetCookie('ct_has_input_focused') !== undefined && ctGetCookie('ct_has_key_up') !== undefined) {
    // already set
    return;
  }
  var forms = ctGetPageForms();
  ctPublic.handled_fields = [];
  if (forms.length > 0) {
    for (var i = 0; i < forms.length; i++) {
      // handle only inputs and textareas
      var handledFormFields = forms[i].querySelectorAll('input,textarea');
      for (var _i2 = 0; _i2 < handledFormFields.length; _i2++) {
        if (handledFormFields[_i2].type !== 'hidden') {
          // collect handled fields to remove handler in the future
          ctPublic.handled_fields.push(handledFormFields[_i2]);
          // do attach handlers
          apbct_attach_event_handler(handledFormFields[_i2], 'focus', ctFunctionHasInputFocused);
          apbct_attach_event_handler(handledFormFields[_i2], 'keyup', ctFunctionHasKeyUp);
        }
      }
    }
  }
}

/**
 * stop listening keyup and focus
 * @param {string} eventName
 * @param {string} functionName
 */
function ctStopFieldsListening(eventName, functionName) {
  if (typeof ctPublic.handled_fields !== 'undefined' && ctPublic.handled_fields.length > 0) {
    for (var i = 0; i < ctPublic.handled_fields.length; i++) {
      apbct_remove_event_handler(ctPublic.handled_fields[i], eventName, functionName);
    }
  }
}
var ctFunctionHasInputFocused = function output(event) {
  ctSetHasInputFocused();
  ctStopFieldsListening('focus', ctFunctionHasInputFocused);
};
var ctFunctionHasKeyUp = function output(event) {
  ctSetHasKeyUp();
  ctStopFieldsListening('keyup', ctFunctionHasKeyUp);
};

/**
 * set ct_has_input_focused ct_has_key_up cookies on session period
 */
function ctSetHasInputFocused() {
  if (!apbctLocalStorage.isSet('ct_has_input_focused') || !apbctLocalStorage.get('ct_has_input_focused')) {
    apbctLocalStorage.set('ct_has_input_focused', true);
  }
  if (ctPublic.data__cookies_type === 'native' && ctGetCookie('ct_has_input_focused') === undefined || ctPublic.data__cookies_type === 'alternative' || ctPublic.data__cookies_type === 'none' && (typeof ctPublic.force_alt_cookies !== 'undefined' || ctPublic.force_alt_cookies !== undefined && ctPublic.force_alt_cookies)) {
    ctSetCookie('ct_has_input_focused', 'true');
  }
}

/**
 * ctSetHasKeyUp
 */
function ctSetHasKeyUp() {
  if (!apbctLocalStorage.isSet('ct_has_key_up') || !apbctLocalStorage.get('ct_has_key_up')) {
    apbctLocalStorage.set('ct_has_key_up', true);
  }
  if (ctPublic.data__cookies_type === 'native' && ctGetCookie('ct_has_key_up') === undefined || ctPublic.data__cookies_type === 'alternative' || ctPublic.data__cookies_type === 'none' && (typeof ctPublic.force_alt_cookies !== 'undefined' || ctPublic.force_alt_cookies !== undefined && ctPublic.force_alt_cookies)) {
    ctSetCookie('ct_has_key_up', 'true');
  }
}

/**
 * ctPreloadLocalStorage
 */
function ctPreloadLocalStorage() {
  if (ctPublic.data__to_local_storage) {
    var data = Object.entries(ctPublic.data__to_local_storage);
    data.forEach(function (_ref) {
      var _ref2 = _slicedToArray(_ref, 2),
        key = _ref2[0],
        value = _ref2[1];
      apbctLocalStorage.set(key, value);
    });
  }
}
if (ctPublic.data__key_is_ok) {
  apbct_attach_event_handler(document, 'mousemove', ctFunctionMouseMove);
  apbct_attach_event_handler(document, 'mousedown', ctFunctionFirstKey);
  apbct_attach_event_handler(document, 'keydown', ctFunctionFirstKey);
  apbct_attach_event_handler(document, 'scroll', ctSetHasScrolled);
}

/**
 * Prepare block to intercept AJAX response
 */
function apbctPrepareBlockForAjaxForms() {
  // eslint-disable-next-line require-jsdoc
  function ctPrepareBlockMessage(xhr) {
    if (xhr.responseText && xhr.responseText.indexOf('"apbct') !== -1 && xhr.responseText.indexOf('DOCTYPE') === -1) {
      try {
        ctParseBlockMessage(JSON.parse(xhr.responseText));
      } catch (e) {
        console.log(e.toString());
      }
    }
  }
  if (typeof jQuery !== 'undefined') {
    // Capturing responses and output block message for unknown AJAX forms
    if (typeof jQuery(document).ajaxComplete() !== 'function') {
      jQuery(document).on('ajaxComplete', function (event, xhr, settings) {
        ctPrepareBlockMessage(xhr);
      });
    } else {
      jQuery(document).ajaxComplete(function (event, xhr, settings) {
        ctPrepareBlockMessage(xhr);
      });
    }
  }
}

/**
 * For forced alt cookies.
 * If token is not added to the LS on apbc_ready, check every second if so and send token to the alt sessions.
 */
function startForcedAltEventTokenChecker() {
  tokenCheckerIntervalId = setInterval(function () {
    if (apbctLocalStorage.get('event_token_forced_set') === '1') {
      clearInterval(tokenCheckerIntervalId);
      return;
    }
    var eventToken = apbctLocalStorage.get('bot_detector_event_token');
    if (eventToken) {
      ctSetAlternativeCookie([['ct_bot_detector_event_token', eventToken]], {
        forceAltCookies: true
      });
      apbctLocalStorage.set('event_token_forced_set', '1');
      clearInterval(tokenCheckerIntervalId);
    } else {}
  }, 1000);
}

/**
 * Ready function
 */
// eslint-disable-next-line camelcase,require-jsdoc
function apbct_ready() {
  // this way calls a lot of apbct_ready(), needs to find another way
  // if (typeof jQuery !== 'undefined') {
  //     jQuery(document).on('gform_page_loaded', function() {
  //         apbct_ready();
  //     });
  // }

  apbctPrepareBlockForAjaxForms();
  ctPreloadLocalStorage();

  // set session ID
  if (!apbctSessionStorage.isSet('apbct_session_id')) {
    var sessionID = apbctGenerateUniqueID();
    apbctSessionStorage.set('apbct_session_id', sessionID, false);
    apbctLocalStorage.set('apbct_page_hits', 1);
    if (document.referrer) {
      var urlReferer = new URL(document.referrer);
      if (urlReferer.host !== location.host) {
        apbctSessionStorage.set('apbct_site_referer', document.referrer, false);
      }
    }
  } else {
    apbctLocalStorage.set('apbct_page_hits', Number(apbctLocalStorage.get('apbct_page_hits')) + 1);
  }
  apbctWriteReferrersToSessionStorage();
  var cookiesType = apbctLocalStorage.get('ct_cookies_type');
  if (!cookiesType || cookiesType !== ctPublic.data__cookies_type) {
    apbctLocalStorage.set('ct_cookies_type', ctPublic.data__cookies_type);
    apbctLocalStorage["delete"]('ct_mouse_moved');
    apbctLocalStorage["delete"]('ct_has_scrolled');
  }
  if (ctPublic.data__cookies_type !== 'alternative') {
    ctStartFieldsListening();
    // 2nd try to add listeners for delayed appears forms
    setTimeout(ctStartFieldsListening, 1000);
  }
  window.addEventListener('animationstart', apbctOnAnimationStart, true);
  window.addEventListener('input', apbctOnInput, true);
  document.ctTypoData = new CTTypoData();
  document.ctTypoData.gatheringFields();
  document.ctTypoData.setListeners();

  // Collect scrolling info
  var initCookies = [['ct_ps_timestamp', Math.floor(new Date().getTime() / 1000)], ['ct_fkp_timestamp', '0'], ['ct_pointer_data', '0'],
  // eslint-disable-next-line camelcase
  ['ct_timezone', ctDate.getTimezoneOffset() / 60 * -1], ['ct_screen_info', apbctGetScreenInfo()], ['apbct_headless', navigator.webdriver]];
  apbctLocalStorage.set('ct_ps_timestamp', Math.floor(new Date().getTime() / 1000));
  apbctLocalStorage.set('ct_fkp_timestamp', '0');
  apbctLocalStorage.set('ct_pointer_data', '0');
  // eslint-disable-next-line camelcase
  apbctLocalStorage.set('ct_timezone', ctDate.getTimezoneOffset() / 60 * -1);
  apbctLocalStorage.set('ct_screen_info', apbctGetScreenInfo());
  apbctLocalStorage.set('apbct_headless', navigator.webdriver);
  if (ctPublic.data__cookies_type !== 'native') {
    initCookies.push(['apbct_visible_fields', '0']);
  } else {
    // Delete all visible fields cookies on load the page
    var cookiesArray = document.cookie.split(';');
    if (cookiesArray.length !== 0) {
      for (var i = 0; i < cookiesArray.length; i++) {
        var currentCookie = cookiesArray[i].trim();
        var cookieName = currentCookie.split('=')[0];
        if (cookieName.indexOf('apbct_visible_fields_') === 0) {
          ctDeleteCookie(cookieName);
        }
      }
    }
  }
  if (+ctPublic.pixel__setting) {
    if (ctIsDrawPixel()) {
      ctGetPixelUrl();
    } else {
      initCookies.push(['apbct_pixel_url', ctPublic.pixel__url]);
    }
  }
  if (+ctPublic.data__email_check_before_post) {
    initCookies.push(['ct_checked_emails', '0']);
    apbct('input[type = \'email\'], #email').on('blur', checkEmail);
  }
  if (apbctLocalStorage.isSet('ct_checkjs')) {
    initCookies.push(['ct_checkjs', apbctLocalStorage.get('ct_checkjs')]);
  } else {
    initCookies.push(['ct_checkjs', 0]);
  }

  // detect integrated forms that need to be handled via alternative cookies
  ctDetectForcedAltCookiesForms();

  // send bot detector event token to alt cookies on problem forms
  var tokenForForceAlt = apbctLocalStorage.get('bot_detector_event_token');
  if (typeof ctPublic.force_alt_cookies !== 'undefined' && ctPublic.force_alt_cookies && ctPublic.settings__data__bot_detector_enabled) {
    apbctLocalStorage.set('event_token_forced_set', '0');
    if (tokenForForceAlt) {
      initCookies.push(['ct_bot_detector_event_token', tokenForForceAlt]);
      apbctLocalStorage.set('event_token_forced_set', '1');
    } else {
      startForcedAltEventTokenChecker();
    }
  }
  ctSetCookie(initCookies);
  setTimeout(function () {
    if (typeof ctPublic.force_alt_cookies == 'undefined' || ctPublic.force_alt_cookies !== 'undefined' && !ctPublic.force_alt_cookies) {
      ctNoCookieAttachHiddenFieldsToForms();
    }
    if (typeof ctPublic.data__cookies_type !== 'undefined' && ctPublic.data__cookies_type === 'none') {
      ctAjaxSetupAddCleanTalkDataBeforeSendAjax();
    }
    for (var _i3 = 0; _i3 < document.forms.length; _i3++) {
      var form = document.forms[_i3];

      // Exclusion for forms
      if (ctCheckHiddenFieldsExclusions(document.forms[_i3], 'visible_fields')) {
        continue;
      }

      // The Form has hidden field like apbct_visible_fields
      if (document.forms[_i3].elements.apbct_visible_fields !== undefined && document.forms[_i3].elements.apbct_visible_fields.length > 0) {
        continue;
      }
      if (form.querySelector('input[name="apbct_visible_fields"]')) {
        var visibleFields = form.querySelector('input[name="apbct_visible_fields"]');
        form.removeChild(visibleFields);
      }
      var hiddenInput = document.createElement('input');
      hiddenInput.setAttribute('type', 'hidden');
      hiddenInput.setAttribute('id', 'apbct_visible_fields_' + _i3);
      hiddenInput.setAttribute('name', 'apbct_visible_fields');
      var visibleFieldsToInput = {};
      visibleFieldsToInput[0] = apbct_collect_visible_fields(form);
      hiddenInput.value = btoa(JSON.stringify(visibleFieldsToInput));
      form.append(hiddenInput);
      form.onsubmit_prev = form.onsubmit;
      form.ctFormIndex = _i3;
      form.onsubmit = function (event) {
        if (ctPublic.data__cookies_type !== 'native' && typeof event.target.ctFormIndex !== 'undefined') {
          var _visibleFields = {};
          _visibleFields[0] = apbct_collect_visible_fields(this);
          apbct_visible_fields_set_cookie(_visibleFields, event.target.ctFormIndex);
        }
        if (ctPublic.data__cookies_type === 'none' && isFormThatNeedCatchXhr(event.target)) {
          window.XMLHttpRequest.prototype.send = function (data) {
            var noCookieData = getNoCookieData();
            noCookieData = 'data%5Bct_no_cookie_hidden_field%5D=' + noCookieData + '&';
            defaultSend.call(this, noCookieData + data);
            setTimeout(function () {
              window.XMLHttpRequest.prototype.send = defaultSend;
            }, 0);
          };
        }

        // Call previous submit action
        if (event.target.onsubmit_prev instanceof Function && !ctOnsubmitPrevCallExclude(event.target)) {
          setTimeout(function () {
            event.target.onsubmit_prev.call(event.target, event);
          }, 500);
        }
      };
    }
  }, 1000);

  // Listen clicks on encoded emails
  var encodedEmailNodes = document.querySelectorAll('[data-original-string]');
  ctPublic.encodedEmailNodes = encodedEmailNodes;
  if (encodedEmailNodes.length) {
    for (var _i4 = 0; _i4 < encodedEmailNodes.length; ++_i4) {
      encodedEmailNodes[_i4].addEventListener('click', ctFillDecodedEmailHandler);
    }
  }

  // WordPress Search form processing
  var _iterator8 = _createForOfIteratorHelper(document.forms),
    _step8;
  try {
    var _loop3 = function _loop3() {
      var _form = _step8.value;
      if (typeof ctPublic !== 'undefined' && +ctPublic.settings__forms__search_test === 1 && (_form.getAttribute('id') === 'searchform' || _form.getAttribute('class') !== null && _form.getAttribute('class').indexOf('search-form') !== -1 || _form.getAttribute('role') !== null && _form.getAttribute('role').indexOf('search') !== -1)) {
        _form.apbctSearchPrevOnsubmit = _form.onsubmit;
        if (ctPublic.data__cookies_type === 'none') {
          _form.append(ctNoCookieConstructHiddenField('submit'));
        }
        if (+ctPublic.settings__data__bot_detector_enabled) {
          _form.append(ctEventTokenConstructHiddenField());
        }
        // this handles search forms onsubmit process
        _form.onsubmit = function (e) {
          return ctSearchFormOnSubmitHandler(e, _form);
        };
      }
    };
    for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
      _loop3();
    }

    // Check any XMLHttpRequest connections
  } catch (err) {
    _iterator8.e(err);
  } finally {
    _iterator8.f();
  }
  apbctCatchXmlHttpRequest();
}

/**
 * Insert event_token and no_cookies_data to some ajax request
 */
function apbctCatchXmlHttpRequest() {
  // 1) Check the page if it needed to catch XHR
  if (document.querySelector('div.wfu_container') !== null) {
    var originalSend = XMLHttpRequest.prototype.send;
    XMLHttpRequest.prototype.send = function (body) {
      // 2) Check the caught request fi it needed to modify
      if (body && typeof body === 'string' && body.indexOf('action=wfu_ajax_action_ask_server') !== -1) {
        var addidionalCleantalkData = '';
        var eventToken = localStorage.getItem('bot_detector_event_token');
        try {
          eventToken = JSON.parse(eventToken);
        } catch (_unused) {
          eventToken = false;
        }
        if (eventToken !== null && eventToken !== false && eventToken.hasOwnProperty('value') && eventToken.value !== '') {
          eventToken = eventToken.value;
          addidionalCleantalkData += '&' + 'data%5Bct_bot_detector_event_token%5D=' + eventToken;
        }
        var noCookieData = getNoCookieData();
        addidionalCleantalkData += '&' + 'data%5Bct_no_cookie_hidden_field%5D=' + noCookieData;
        body += addidionalCleantalkData;
        return originalSend.apply(this, [body]);
      }
      return originalSend.apply(this, [body]);
    };
  }

  // Set important parameters via ajax
  if (ctPublic.advancedCacheExists) {
    if (ctPublicFunctions.data__ajax_type === 'rest') {
      apbct_public_sendREST('apbct_set_important_parameters', {});
    } else if (ctPublicFunctions.data__ajax_type === 'admin_ajax') {
      apbct_public_sendAJAX({
        action: 'apbct_set_important_parameters'
      }, {});
    }
  }
}

/**
 * Prepare jQuery.ajaxSetup to add nocookie data to the jQuery ajax request.
 * Notes:
 * - Do it just once, the ajaxSetup.beforeSend will be overwritten for any calls.
 * - Signs of forms need to be caught will be checked during ajaxSetup.settings.data process on send.
 * - Any sign of the form HTML of the caller is insignificant in this process.
 * @return {void}
 */
function ctAjaxSetupAddCleanTalkDataBeforeSendAjax() {
  // jquery ajax call intercept
  var eventToken = false;
  if (typeof jQuery !== 'undefined') {
    jQuery.ajaxSetup({
      beforeSend: function beforeSend(xhr, settings) {
        var sourceSign = false;
        // settings data is string (important!)
        if (typeof settings.data === 'string') {
          if (settings.data.indexOf('twt_cc_signup') !== -1) {
            sourceSign = 'twt_cc_signup';
          }
          if (settings.data.indexOf('action=mailpoet') !== -1) {
            sourceSign = 'action=mailpoet';
          }
          if (settings.data.indexOf('action=user_registration') !== -1 && settings.data.indexOf('ur_frontend_form_nonce') !== -1) {
            sourceSign = 'action=user_registration';
          }
          if (settings.data.indexOf('action=happyforms_message') !== -1) {
            sourceSign = 'action=happyforms_message';
          }
          if (settings.data.indexOf('action=new_activity_comment') !== -1) {
            sourceSign = 'action=new_activity_comment';
          }
        }
        if (typeof settings.url === 'string') {
          if (settings.url.indexOf('wc-ajax=add_to_cart') !== -1) {
            sourceSign = 'wc-ajax=add_to_cart';
            if (localStorage.getItem('bot_detector_event_token') !== null) {
              eventToken = localStorage.getItem('bot_detector_event_token');
              try {
                eventToken = JSON.parse(eventToken);
              } catch (_unused2) {
                eventToken = false;
              }
              if (eventToken !== false && eventToken.hasOwnProperty('value') && eventToken.value !== '') {
                eventToken = eventToken.value;
              }
            }
          }
        }
        if (sourceSign) {
          var noCookieData = getNoCookieData();
          if (typeof eventToken === 'string') {
            eventToken = 'data%5Bct_bot_detector_event_token%5D=' + eventToken + '&';
          } else {
            eventToken = '';
          }
          noCookieData = 'data%5Bct_no_cookie_hidden_field%5D=' + noCookieData + '&';
          settings.data = noCookieData + eventToken + settings.data;
        }
      }
    });
  }
}

// eslint-disable-next-line require-jsdoc
function ctOnsubmitPrevCallExclude(form) {
  if (form.classList.contains('hb-booking-search-form')) {
    return true;
  }
  return false;
}
if (ctPublic.data__key_is_ok) {
  if (document.readyState !== 'loading') {
    apbct_ready();
  } else {
    apbct_attach_event_handler(document, 'DOMContentLoaded', apbct_ready);
  }
  apbctLocalStorage.set('ct_checkjs', ctPublic.ct_checkjs_key, true);
}

/**
 * @param {SubmitEvent} e
 * @param {object} targetForm
 */
function ctSearchFormOnSubmitHandler(e, targetForm) {
  try {
    // set NoCookie data if is provided
    var noCookieField = targetForm.querySelector('[name="ct_no_cookie_hidden_field"]');
    // set honeypot data if is provided
    var honeyPotField = targetForm.querySelector('[id*="apbct__email_id__"]');
    var botDetectorField = targetForm.querySelector('[name*="ct_bot_detector_event_token"]');
    var hpValue = null;
    var hpEventId = null;

    // get honeypot field and it's value
    if (honeyPotField !== null && honeyPotField.value !== null && honeyPotField.getAttribute('apbct_event_id') !== null) {
      hpValue = honeyPotField.value;
      hpEventId = honeyPotField.getAttribute('apbct_event_id');
    }

    // if noCookie data or honeypot data is set, proceed handling
    if (noCookieField !== null || honeyPotField !== null || botDetectorField !== null) {
      e.preventDefault();
      var callBack = function callBack() {
        if (noCookieField !== null) {
          noCookieField.parentNode.removeChild(noCookieField);
        }
        if (honeyPotField !== null) {
          honeyPotField.parentNode.removeChild(honeyPotField);
        }
        if (botDetectorField !== null) {
          botDetectorField.parentNode.removeChild(botDetectorField);
        }
        if (typeof targetForm.apbctSearchPrevOnsubmit === 'function') {
          targetForm.apbctSearchPrevOnsubmit();
        } else {
          HTMLFormElement.prototype.submit.call(targetForm);
        }
      };
      var parsedCookies = '{}';

      // if noCookie data provided trim prefix and add data from base64 decoded value then
      if (noCookieField !== null) {
        parsedCookies = atob(noCookieField.value.replace('_ct_no_cookie_data_', ''));
      }
      var cookiesArray = JSON.parse(parsedCookies);

      // if honeypot data provided add the fields to the parsed data
      if (hpValue !== null && hpEventId !== null) {
        cookiesArray.apbct_search_form__honeypot_value = hpValue;
        cookiesArray.apbct_search_form__honeypot_id = hpEventId;
      }
      if (botDetectorField !== null) {
        cookiesArray.ct_bot_detector_event_token = botDetectorField.value;
      }

      // if the pixel needs to be decoded
      if (typeof cookiesArray.apbct_pixel_url === 'string' && cookiesArray.apbct_pixel_url.indexOf('%3A') !== -1) {
        cookiesArray.apbct_pixel_url = decodeURIComponent(cookiesArray.apbct_pixel_url);
      }
      parsedCookies = JSON.stringify(cookiesArray);

      // if any data provided, proceed data to xhr
      if (parsedCookies.length !== 0) {
        ctSetAlternativeCookie(parsedCookies, {
          callback: callBack,
          onErrorCallback: callBack,
          forceAltCookies: true
        });
      } else {
        callBack();
      }
    }
  } catch (error) {
    console.warn('APBCT search form onsubmit handler error. ' + error);
  }
}

/**
 * @param {mixed} event
 */
function ctFillDecodedEmailHandler(event) {
  this.removeEventListener('click', ctFillDecodedEmailHandler);
  // remember clickSource
  var clickSource = this;
  // globally remember if emails is mixed with mailto
  ctPublic.encodedEmailNodesIsMixed = false;
  // get fade
  document.body.classList.add('apbct-popup-fade');
  // popup show
  var encoderPopup = document.getElementById('apbct_popup');
  if (!encoderPopup) {
    var waitingPopup = document.createElement('div');
    waitingPopup.setAttribute('class', 'apbct-popup');
    waitingPopup.setAttribute('id', 'apbct_popup');
    var popupText = document.createElement('p');
    popupText.setAttribute('id', 'apbct_popup_text');
    popupText.style.color = 'black';
    popupText.innerText = 'Please wait while ' + ctPublic.wl_brandname + ' is decoding the email addresses.';
    waitingPopup.append(popupText);
    document.body.append(waitingPopup);
  } else {
    encoderPopup.setAttribute('style', 'display: inherit');
    document.getElementById('apbct_popup_text').innerHTML = 'Please wait while ' + ctPublic.wl_brandname + ' is decoding the email addresses.';
  }
  apbctAjaxEmailDecodeBulk(event, ctPublic.encodedEmailNodes, clickSource);
}

/**
 * @param {mixed} event
 * @param {mixed} encodedEmailNodes
 * @param {mixed} clickSource
 */
function apbctAjaxEmailDecodeBulk(event, encodedEmailNodes, clickSource) {
  // collect data
  var javascriptClientData = getJavascriptClientData();
  var data = {
    event_javascript_data: javascriptClientData,
    post_url: document.location.href,
    referrer: document.referrer,
    encodedEmails: ''
  };
  var encodedEmailsCollection = {};
  for (var i = 0; i < encodedEmailNodes.length; i++) {
    // disable click for mailto
    if (typeof encodedEmailNodes[i].href !== 'undefined' && encodedEmailNodes[i].href.indexOf('mailto:') === 0) {
      event.preventDefault();
      ctPublic.encodedEmailNodesIsMixed = true;
    }

    // Adding a tooltip
    var apbctTooltip = document.createElement('div');
    apbctTooltip.setAttribute('class', 'apbct-tooltip');
    apbct(encodedEmailNodes[i]).append(apbctTooltip);

    // collect encoded email strings
    encodedEmailsCollection[i] = encodedEmailNodes[i].dataset.originalString;
  }

  // JSONify encoded email strings
  data.encodedEmails = JSON.stringify(encodedEmailsCollection);

  // Using REST API handler
  if (ctPublicFunctions.data__ajax_type === 'rest') {
    apbct_public_sendREST('apbct_decode_email', {
      data: data,
      method: 'POST',
      callback: function callback(result) {
        // set alternative cookie to skip next pages encoding
        ctSetCookie('apbct_email_encoder_passed', ctPublic.emailEncoderPassKey);
        apbctEmailEncoderCallbackBulk(result, encodedEmailNodes, clickSource);
      },
      onErrorCallback: function onErrorCallback(res) {
        resetEncodedNodes();
        ctShowDecodeComment(res);
      }
    });

    // Using AJAX request and handler
  } else {
    data.action = 'apbct_decode_email';
    apbct_public_sendAJAX(data, {
      notJson: false,
      callback: function callback(result) {
        // set alternative cookie to skip next pages encoding
        ctSetCookie('apbct_email_encoder_passed', ctPublic.emailEncoderPassKey);
        apbctEmailEncoderCallbackBulk(result, encodedEmailNodes, clickSource);
      },
      onErrorCallback: function onErrorCallback(res) {
        resetEncodedNodes();
        ctShowDecodeComment(res);
      }
    });
  }
}

/**
 * @param {mixed} result
 * @param {mixed} encodedEmailNodes
 * @param {mixed} clickSource
 */
function apbctEmailEncoderCallbackBulk(result, encodedEmailNodes, clickSource) {
  if (result.success && result.data[0].is_allowed === true) {
    // start process of visual decoding
    setTimeout(function () {
      var _loop4 = function _loop4(i) {
        // chek what is what
        var currentResultData;
        result.data.forEach(function (row) {
          if (row.encoded_email === encodedEmailNodes[i].dataset.originalString) {
            currentResultData = row;
          }
        });
        // quit case on cloud block
        if (currentResultData.is_allowed === false) {
          return 1; // break
        }
        // handler for mailto
        if (typeof encodedEmailNodes[i].href !== 'undefined' && encodedEmailNodes[i].href.indexOf('mailto:') === 0) {
          var encodedEmail = encodedEmailNodes[i].href.replace('mailto:', '');
          var baseElementContent = encodedEmailNodes[i].innerHTML;
          var decodedEmail = currentResultData.decoded_email.split('&')[0];
          encodedEmailNodes[i].innerHTML = baseElementContent.replace(encodedEmail, decodedEmail);
          encodedEmailNodes[i].href = 'mailto:' + currentResultData.decoded_email;
        } else {
          // fill the nodes
          ctProcessDecodedDataResult(currentResultData, encodedEmailNodes[i]);
        }
        // remove listeners
        encodedEmailNodes[i].removeEventListener('click', ctFillDecodedEmailHandler);
      };
      for (var i = 0; i < encodedEmailNodes.length; i++) {
        if (_loop4(i)) break;
      }
      // popup remove
      var popup = document.getElementById('apbct_popup');
      if (popup !== null) {
        document.body.classList.remove('apbct-popup-fade');
        popup.setAttribute('style', 'display:none');
        // click on mailto if so
        if (ctPublic.encodedEmailNodesIsMixed) {
          clickSource.click();
        }
      }
    }, 3000);
  } else {
    if (result.success) {
      resetEncodedNodes();
      ctShowDecodeComment('Blocked: ' + result.data[0].comment);
    } else {
      resetEncodedNodes();
      ctShowDecodeComment('Cannot connect with CleanTalk server: ' + result.comment);
    }
  }
}

/**
 * resetEncodedNodes
 */
function resetEncodedNodes() {
  if (typeof ctPublic.encodedEmailNodes !== 'undefined') {
    ctPublic.encodedEmailNodes.forEach(function (element) {
      element.addEventListener('click', ctFillDecodedEmailHandler);
    });
  }
}

/**
 * @param {mixed} commonCookies
 * @return {string}
 */
function getJavascriptClientData() {
  var commonCookies = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var resultDataJson = {};
  resultDataJson.apbct_headless = !!ctGetCookie(ctPublicFunctions.cookiePrefix + 'apbct_headless');
  resultDataJson.ct_checked_emails = ctGetCookie(ctPublicFunctions.cookiePrefix + 'ct_checked_emails');
  resultDataJson.ct_checkjs = ctGetCookie(ctPublicFunctions.cookiePrefix + 'ct_checkjs');
  resultDataJson.ct_fkp_timestamp = ctGetCookie(ctPublicFunctions.cookiePrefix + 'ct_fkp_timestamp');
  resultDataJson.ct_pointer_data = ctGetCookie(ctPublicFunctions.cookiePrefix + 'ct_pointer_data');
  resultDataJson.ct_ps_timestamp = ctGetCookie(ctPublicFunctions.cookiePrefix + 'ct_ps_timestamp');
  resultDataJson.ct_screen_info = ctGetCookie(ctPublicFunctions.cookiePrefix + 'ct_screen_info');
  resultDataJson.ct_timezone = ctGetCookie(ctPublicFunctions.cookiePrefix + 'ct_timezone');

  // collecting data from localstorage
  var ctMouseMovedLocalStorage = apbctLocalStorage.get(ctPublicFunctions.cookiePrefix + 'ct_mouse_moved');
  var ctHasScrolledLocalStorage = apbctLocalStorage.get(ctPublicFunctions.cookiePrefix + 'ct_has_scrolled');
  var ctCookiesTypeLocalStorage = apbctLocalStorage.get(ctPublicFunctions.cookiePrefix + 'ct_cookies_type');
  var apbctPageHits = apbctLocalStorage.get('apbct_page_hits');
  var apbctPrevReferer = apbctSessionStorage.get('apbct_prev_referer');
  var apbctSiteReferer = apbctSessionStorage.get('apbct_site_referer');
  var ctJsErrorsLocalStorage = apbctLocalStorage.get(ctPublicFunctions.cookiePrefix + 'ct_js_errors');
  var ctPixelUrl = apbctLocalStorage.get(ctPublicFunctions.cookiePrefix + 'apbct_pixel_url');

  // collecting data from cookies
  var ctMouseMovedCookie = ctGetCookie(ctPublicFunctions.cookiePrefix + 'ct_mouse_moved');
  var ctHasScrolledCookie = ctGetCookie(ctPublicFunctions.cookiePrefix + 'ct_has_scrolled');
  var ctCookiesTypeCookie = ctGetCookie(ctPublicFunctions.cookiePrefix + 'ct_cookies_type');
  var ctCookiesPixelUrl = ctGetCookie(ctPublicFunctions.cookiePrefix + 'apbct_pixel_url');
  resultDataJson.ct_mouse_moved = ctMouseMovedLocalStorage !== undefined ? ctMouseMovedLocalStorage : ctMouseMovedCookie;
  resultDataJson.ct_has_scrolled = ctHasScrolledLocalStorage !== undefined ? ctHasScrolledLocalStorage : ctHasScrolledCookie;
  resultDataJson.ct_cookies_type = ctCookiesTypeLocalStorage !== undefined ? ctCookiesTypeLocalStorage : ctCookiesTypeCookie;
  resultDataJson.apbct_pixel_url = ctPixelUrl !== undefined ? ctPixelUrl : ctCookiesPixelUrl;
  if (resultDataJson.apbct_pixel_url.indexOf('%3A%2F')) {
    resultDataJson.apbct_pixel_url = decodeURIComponent(resultDataJson.apbct_pixel_url);
  }
  resultDataJson.apbct_page_hits = apbctPageHits;
  resultDataJson.apbct_prev_referer = apbctPrevReferer;
  resultDataJson.apbct_site_referer = apbctSiteReferer;
  resultDataJson.apbct_ct_js_errors = ctJsErrorsLocalStorage;
  if (!resultDataJson.apbct_pixel_url) {
    resultDataJson.apbct_pixel_url = ctPublic.pixel__url;
  }
  if (_typeof(commonCookies) === 'object' && commonCookies !== []) {
    for (var i = 0; i < commonCookies.length; ++i) {
      if (_typeof(commonCookies[i][1]) === 'object') {
        // this is for handle SFW cookies
        resultDataJson[commonCookies[i][1][0]] = commonCookies[i][1][1];
      } else {
        resultDataJson[commonCookies[i][0]] = commonCookies[i][1];
      }
    }
  } else {
    console.log('APBCT JS ERROR: Collecting data type mismatch');
  }

  // Parse JSON properties to prevent double JSON encoding
  resultDataJson = removeDoubleJsonEncoding(resultDataJson);
  return JSON.stringify(resultDataJson);
}

/**
 * Recursive
 *
 * Recursively decode JSON-encoded properties
 *
 * @param {mixed} object
 * @return {*}
 */
function removeDoubleJsonEncoding(object) {
  if (_typeof(object) === 'object') {
    // eslint-disable-next-line guard-for-in
    for (var objectKey in object) {
      // Recursion
      if (_typeof(object[objectKey]) === 'object') {
        object[objectKey] = removeDoubleJsonEncoding(object[objectKey]);
      }

      // Common case (out)
      if (typeof object[objectKey] === 'string' && object[objectKey].match(/^[\[{].*?[\]}]$/) !== null // is like JSON
      ) {
        var parsedValue = JSON.parse(object[objectKey]);
        if (_typeof(parsedValue) === 'object') {
          object[objectKey] = parsedValue;
        }
      }
    }
  }
  return object;
}

/**
 * @param {mixed} response
 * @param {mixed} targetElement
 */
function ctProcessDecodedDataResult(response, targetElement) {
  targetElement.setAttribute('title', '');
  targetElement.removeAttribute('style');
  ctFillDecodedEmail(targetElement, response.decoded_email);
}

/**
 * @param {mixed} target
 * @param {string} email
 */
function ctFillDecodedEmail(target, email) {
  apbct(target).html(apbct(target).html().replace(/.+?(<div class=["']apbct-tooltip["'].+?<\/div>)/, email + '$1'));
}

/**
 * @param {string} comment
 */
function ctShowDecodeComment(comment) {
  if (!comment) {
    comment = 'Can not decode email. Unknown reason';
  }
  var popup = document.getElementById('apbct_popup');
  var popupText = document.getElementById('apbct_popup_text');
  if (popup !== null) {
    document.body.classList.remove('apbct-popup-fade');
    popupText.innerText = 'CleanTalk email decoder: ' + comment;
    setTimeout(function () {
      popup.setAttribute('style', 'display:none');
    }, 3000);
  }
}

// eslint-disable-next-line camelcase,require-jsdoc
function apbct_collect_visible_fields(form) {
  // Get only fields
  var inputs = [];
  var inputsVisible = '';
  var inputsVisibleCount = 0;
  var inputsInvisible = '';
  var inputsInvisibleCount = 0;
  var inputsWithDuplicateNames = [];
  for (var key in form.elements) {
    if (!isNaN(+key)) {
      inputs[key] = form.elements[key];
    }
  }

  // Filter fields
  inputs = inputs.filter(function (elem) {
    // Filter already added fields
    if (inputsWithDuplicateNames.indexOf(elem.getAttribute('name')) !== -1) {
      return false;
    }
    // Filter inputs with same names for type == radio
    if (-1 !== ['radio', 'checkbox'].indexOf(elem.getAttribute('type'))) {
      inputsWithDuplicateNames.push(elem.getAttribute('name'));
      return false;
    }
    return true;
  });

  // Visible fields
  inputs.forEach(function (elem, i, elements) {
    // Unnecessary fields
    if (elem.getAttribute('type') === 'submit' ||
    // type == submit
    elem.getAttribute('name') === null || elem.getAttribute('name') === 'ct_checkjs') {
      return;
    }
    // Invisible fields
    if (getComputedStyle(elem).display === 'none' ||
    // hidden
    getComputedStyle(elem).visibility === 'hidden' ||
    // hidden
    getComputedStyle(elem).opacity === '0' ||
    // hidden
    elem.getAttribute('type') === 'hidden' // type == hidden
    ) {
      if (elem.classList.contains('wp-editor-area')) {
        inputsVisible += ' ' + elem.getAttribute('name');
        inputsVisibleCount++;
      } else {
        inputsInvisible += ' ' + elem.getAttribute('name');
        inputsInvisibleCount++;
      }
      // eslint-disable-next-line brace-style
    }
    // Visible fields
    else {
      inputsVisible += ' ' + elem.getAttribute('name');
      inputsVisibleCount++;
    }
  });
  inputsInvisible = inputsInvisible.trim();
  inputsVisible = inputsVisible.trim();
  return {
    visible_fields: inputsVisible,
    visible_fields_count: inputsVisibleCount,
    invisible_fields: inputsInvisible,
    invisible_fields_count: inputsInvisibleCount
  };
}

// eslint-disable-next-line camelcase,require-jsdoc
function apbct_visible_fields_set_cookie(visibleFieldsCollection, formId) {
  var collection = _typeof(visibleFieldsCollection) === 'object' && visibleFieldsCollection !== null ? visibleFieldsCollection : {};
  if (ctPublic.data__cookies_type === 'native') {
    // eslint-disable-next-line guard-for-in
    for (var i in collection) {
      if (i > 10) {
        // Do not generate more than 10 cookies
        return;
      }
      var collectionIndex = formId !== undefined ? formId : i;
      ctSetCookie('apbct_visible_fields_' + collectionIndex, JSON.stringify(collection[i]));
    }
  } else {
    if (ctPublic.data__cookies_type === 'none') {
      ctSetCookie('apbct_visible_fields', JSON.stringify(collection[0]));
    } else {
      ctSetCookie('apbct_visible_fields', JSON.stringify(collection));
    }
  }
}

// eslint-disable-next-line camelcase,require-jsdoc,no-unused-vars
function apbct_js_keys__set_input_value(result, data, params, obj) {
  if (document.querySelectorAll('[name^=ct_checkjs]').length > 0) {
    var elements = document.querySelectorAll('[name^=ct_checkjs]');
    for (var i = 0; i < elements.length; i++) {
      elements[i].value = result.js_key;
    }
  }
}

/**
 * @return {string}
 */
function apbctGetScreenInfo() {
  return JSON.stringify({
    fullWidth: document.documentElement.scrollWidth,
    fullHeight: Math.max(document.body.scrollHeight, document.documentElement.scrollHeight, document.body.offsetHeight, document.documentElement.offsetHeight, document.body.clientHeight, document.documentElement.clientHeight),
    visibleWidth: document.documentElement.clientWidth,
    visibleHeight: document.documentElement.clientHeight
  });
}

// eslint-disable-next-line require-jsdoc
function ctParseBlockMessage(response) {
  if (typeof response.apbct !== 'undefined') {
    response = response.apbct;
    if (response.blocked) {
      document.dispatchEvent(new CustomEvent('apbctAjaxBockAlert', {
        bubbles: true,
        detail: {
          message: response.comment
        }
      }));

      // Show the result by modal
      cleantalkModal.loaded = response.comment;
      cleantalkModal.open();
      if (+response.stop_script === 1) {
        window.stop();
      }
    }
  }
}

// eslint-disable-next-line no-unused-vars,require-jsdoc
function ctSetPixelUrlLocalstorage(ajaxPixelUrl) {
  // set pixel to the storage
  ctSetCookie('apbct_pixel_url', ajaxPixelUrl);
}

/**
 * This function generates a hidden input field with a unique ID and name.
 * The value of this field is retrieved from the local storage using the key 'bot_detector_event_token'.
 * This hidden field can be used to store and pass the bot detector event token in a form.
 *
 * @return {HTMLInputElement} - The created hidden input field element.
 */
function ctEventTokenConstructHiddenField() {
  var eventToken = apbctLocalStorage.get('bot_detector_event_token');
  var hiddenInput = document.createElement('input');
  hiddenInput.setAttribute('type', 'hidden');
  var rnd = 100 + Math.floor(Math.random() * 899);
  rnd = rnd.toString();
  hiddenInput.setAttribute('id', 'ct_bot_detector_event_token_' + rnd);
  hiddenInput.setAttribute('name', 'ct_bot_detector_event_token');
  hiddenInput.value = eventToken;
  return hiddenInput;
}

// eslint-disable-next-line require-jsdoc
function ctNoCookieConstructHiddenField(type) {
  var inputType = 'hidden';
  if (type === 'submit') {
    inputType = 'submit';
  }
  var field = '';
  var noCookieDataLocal = apbctLocalStorage.getCleanTalkData();
  var noCookieDataSession = apbctSessionStorage.getCleanTalkData();
  var noCookieDataTypo = {
    typo: []
  };
  if (document.ctTypoData && document.ctTypoData.data) {
    noCookieDataTypo = {
      typo: document.ctTypoData.data
    };
  }
  var noCookieData = _objectSpread(_objectSpread(_objectSpread({}, noCookieDataLocal), noCookieDataSession), noCookieDataTypo);
  noCookieData = JSON.stringify(noCookieData);
  noCookieData = '_ct_no_cookie_data_' + btoa(noCookieData);
  field = document.createElement('input');
  field.setAttribute('name', 'ct_no_cookie_hidden_field');
  field.setAttribute('value', noCookieData);
  field.setAttribute('type', inputType);
  field.classList.add('apbct_special_field');
  field.classList.add('ct_no_cookie_hidden_field');
  return field;
}

/**
 * @return {boolean|*}
 */
function ctGetPageForms() {
  var forms = document.forms;
  if (forms) {
    return forms;
  }
  return false;
}

/**
 * Get type of the field should be excluded. Return exclusion signs via object.
 * @param {object} form Form dom object.
 * @return {object} {'no_cookie': 1|0, 'visible_fields': 1|0}
 */
function ctGetHiddenFieldExclusionsType(form) {
  // visible fields
  var result = {
    'no_cookie': 0,
    'visible_fields': 0
  };
  if (+ctPublic.data__visible_fields_required === 0 || form.method.toString().toLowerCase() === 'get' && form.querySelectorAll('.nf-form-content').length === 0 && form.id !== 'twt_cc_signup' || form.classList.contains('slp_search_form') ||
  // StoreLocatorPlus form
  form.parentElement.classList.contains('mec-booking') || form.action.toString().indexOf('activehosted.com') !== -1 ||
  // Active Campaign
  form.id && form.id === 'caspioform' ||
  // Caspio Form
  form.classList && form.classList.contains('tinkoffPayRow') ||
  // TinkoffPayForm
  form.classList && form.classList.contains('give-form') ||
  // GiveWP
  form.id && form.id === 'ult-forgot-password-form' ||
  // ult forgot password
  form.id && form.id.toString().indexOf('calculatedfields') !== -1 ||
  // CalculatedFieldsForm
  form.id && form.id.toString().indexOf('sac-form') !== -1 ||
  // Simple Ajax Chat
  form.id && form.id.toString().indexOf('cp_tslotsbooking_pform') !== -1 ||
  // WP Time Slots Booking Form
  form.name && form.name.toString().indexOf('cp_tslotsbooking_pform') !== -1 ||
  // WP Time Slots Booking Form
  form.action.toString() === 'https://epayment.epymtservice.com/epay.jhtml' ||
  // Custom form
  form.name && form.name.toString().indexOf('tribe-bar-form') !== -1 ||
  // The Events Calendar
  form.id && form.id === 'ihf-login-form' ||
  // Optima Express login
  form.id && form.id === 'subscriberForm' && form.action.toString().indexOf('actionType=update') !== -1 ||
  // Optima Express update
  form.id && form.id === 'ihf-main-search-form' ||
  // Optima Express search
  form.id && form.id === 'frmCalc' ||
  // nobletitle-calc
  form.action.toString().indexOf('property-organizer-delete-saved-search-submit') !== -1 || form.querySelector('a[name="login"]') !== null // digimember login form
  ) {
    result.visible_fields = 1;
  }

  // ajax search pro exclusion
  var ncFieldExclusionsSign = form.parentNode;
  if (ncFieldExclusionsSign && ncFieldExclusionsSign.classList.contains('proinput') || form.name === 'options' && form.classList.contains('asp-fss-flex')) {
    result.no_cookie = 1;
  }

  // woocommerce login form
  if (form && form.classList.contains('woocommerce-form-login')) {
    result.visible_fields = 1;
    result.no_cookie = 1;
  }
  return result;
}

/**
 * Check if the form should be skipped from hidden field attach.
 * Return exclusion description if it is found, false otherwise.
 * @param {object} form Form dom object.
 * @param {string} hiddenFieldType Type of hidden field that needs to be checked.
 * Possible values: 'no_cookie'|'visible_fields'.
 * @return {boolean}
 */
function ctCheckHiddenFieldsExclusions(form, hiddenFieldType) {
  // Ajax Search Lite
  if (Boolean(form.querySelector('fieldset.asl_sett_scroll'))) {
    return true;
  }
  if (typeof hiddenFieldType === 'string' && ['visible_fields', 'no_cookie'].indexOf(hiddenFieldType) !== -1) {
    var exclusions = ctGetHiddenFieldExclusionsType(form);
    return exclusions[hiddenFieldType] === 1;
  }
  return false;
}

/**
 * ctNoCookieAttachHiddenFieldsToForms
 */
function ctNoCookieAttachHiddenFieldsToForms() {
  if (ctPublic.data__cookies_type !== 'none') {
    return;
  }
  var forms = ctGetPageForms();
  if (forms) {
    for (var i = 0; i < forms.length; i++) {
      if (ctCheckHiddenFieldsExclusions(document.forms[i], 'no_cookie')) {
        continue;
      }

      // ignore forms with get method @todo We need to think about this
      if (document.forms[i].getAttribute('method') === null || document.forms[i].getAttribute('method').toLowerCase() === 'post') {
        // remove old sets
        var fields = forms[i].querySelectorAll('.ct_no_cookie_hidden_field');
        for (var j = 0; j < fields.length; j++) {
          fields[j].outerHTML = '';
        }
        // add new set
        document.forms[i].append(ctNoCookieConstructHiddenField());
      }
    }
  }
}
var defaultFetch = window.fetch;
var defaultSend = XMLHttpRequest.prototype.send;
if (document.readyState !== 'loading') {
  checkFormsExistForCatching();
  apbctRealUserBadge();
} else {
  apbct_attach_event_handler(document, 'DOMContentLoaded', checkFormsExistForCatching);
  apbct_attach_event_handler(document, 'DOMContentLoaded', apbctRealUserBadge);
}

/**
 * Handle real user badge
 */
function apbctRealUserBadge() {
  document.querySelectorAll('.apbct-real-user-badge').forEach(function (el) {
    el.addEventListener('click', function (e) {
      e.preventDefault();
      e.stopPropagation();
      e.currentTarget.querySelector('.apbct-real-user-popup').style.display = 'inline-flex';
    });
  });
  document.querySelector('body').addEventListener('click', function (e) {
    document.querySelectorAll('.apbct-real-user-popup').forEach(function (el) {
      el.style.display = 'none';
    });
  });
}

/**
 * Handle real user badge for woocommerce
 * @param template
 * @param id
 */
// eslint-disable-next-line no-unused-vars,require-jsdoc
function apbctRealUserBadgeWoocommerce(template, id) {
  if (window.innerWidth < 768) {
    return;
  }
  var badge = document.createElement('div');
  badge.className = 'apbct-real-user-wrapper';
  var attachmentPlace = document.querySelector('#comment-' + id).querySelector('.woocommerce-review__author');
  try {
    template = atob(template);
    badge.innerHTML = template;
    if (typeof attachmentPlace !== 'undefined') {
      attachmentPlace.style.display = 'inline-flex';
      attachmentPlace.appendChild(badge);
    }
  } catch (e) {
    console.log('APBCT error: ' + e.toString());
  }
}

/**
 * checkFormsExistForCatching
 */
function checkFormsExistForCatching() {
  setTimeout(function () {
    if (isFormThatNeedCatch()) {
      window.fetch = function () {
        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }
        if (args && args[0] && typeof args[0].includes === 'function' && args[0].includes('/wp-json/metform/')) {
          var noCookieData = getNoCookieData();
          if (args && args[1] && args[1].body) {
            args[1].body.append('ct_no_cookie_hidden_field', noCookieData);
          }
        }
        return defaultFetch.apply(window, args);
      };
    }
  }, 1000);
}

/**
 * @return {boolean}
 */
function isFormThatNeedCatch() {
  var formClasses = ['metform-form-content'];
  var classExists = false;
  var forms = document.forms;
  var _iterator9 = _createForOfIteratorHelper(forms),
    _step9;
  try {
    var _loop5 = function _loop5() {
      var form = _step9.value;
      formClasses.forEach(function (classForm) {
        if (form.classList.contains(classForm)) {
          classExists = true;
        }
      });
    };
    for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
      _loop5();
    }
  } catch (err) {
    _iterator9.e(err);
  } finally {
    _iterator9.f();
  }
  return classExists;
}

/**
 * @param {HTMLElement} form
 * @return {boolean}
 */
function isFormThatNeedCatchXhr(form) {
  if (document.querySelector('div.elementor-widget[title=\'Login/Signup\']') != null) {
    return false;
  }
  if (form && form.action && form.action.toString().indexOf('mailpoet_subscription_form') !== -1) {
    return true;
  }
  return false;
}

/**
 * @return {string}
 */
function getNoCookieData() {
  var noCookieDataLocal = apbctLocalStorage.getCleanTalkData();
  var noCookieDataSession = apbctSessionStorage.getCleanTalkData();
  var noCookieData = _objectSpread(_objectSpread({}, noCookieDataLocal), noCookieDataSession);
  noCookieData = JSON.stringify(noCookieData);
  return '_ct_no_cookie_data_' + btoa(noCookieData);
}

/**
 * Set three statements to the sessions storage: apbct_session_current_page, apbct_prev_referer.
 * @return {void}
 */
function apbctWriteReferrersToSessionStorage() {
  var sessionCurrentPage = apbctSessionStorage.get('apbct_session_current_page');

  // set session apbct_referer
  if (sessionCurrentPage !== false && document.location.href !== sessionCurrentPage) {
    apbctSessionStorage.set('apbct_prev_referer', sessionCurrentPage, false);
  }

  // set session current page to know referrer
  apbctSessionStorage.set('apbct_session_current_page', document.location.href, false);
}

/* Cleantalk Modal object */
var cleantalkModal = {
  // Flags
  loaded: false,
  loading: false,
  opened: false,
  opening: false,
  // Methods
  load: function load(action) {
    if (!this.loaded) {
      this.loading = true;
      var callback = function callback(result, data, params, obj) {
        cleantalkModal.loading = false;
        cleantalkModal.loaded = result;
        document.dispatchEvent(new CustomEvent('cleantalkModalContentLoaded', {
          bubbles: true
        }));
      };
      // eslint-disable-next-line camelcase
      if (typeof apbct_admin_sendAJAX === 'function') {
        apbct_admin_sendAJAX({
          'action': action
        }, {
          'callback': callback,
          'notJson': true
        });
      } else {
        apbct_public_sendAJAX({
          'action': action
        }, {
          'callback': callback,
          'notJson': true
        });
      }
    }
  },
  open: function open() {
    /* Cleantalk Modal CSS start */
    var renderCss = function renderCss() {
      var cssStr = '';
      // eslint-disable-next-line guard-for-in
      for (var key in this.styles) {
        cssStr += key + ':' + this.styles[key] + ';';
      }
      return cssStr;
    };
    var overlayCss = {
      styles: {
        'z-index': '9999999999',
        'position': 'fixed',
        'top': '0',
        'left': '0',
        'width': '100%',
        'height': '100%',
        'background': 'rgba(0,0,0,0.5)',
        'display': 'flex',
        'justify-content': 'center',
        'align-items': 'center'
      },
      toString: renderCss
    };
    var innerCss = {
      styles: {
        'position': 'relative',
        'padding': '30px',
        'background': '#FFF',
        'border': '1px solid rgba(0,0,0,0.75)',
        'border-radius': '4px',
        'box-shadow': '7px 7px 5px 0px rgba(50,50,50,0.75)'
      },
      toString: renderCss
    };
    var closeCss = {
      styles: {
        'position': 'absolute',
        'background': '#FFF',
        'width': '20px',
        'height': '20px',
        'border': '2px solid rgba(0,0,0,0.75)',
        'border-radius': '15px',
        'cursor': 'pointer',
        'top': '-8px',
        'right': '-8px',
        'box-sizing': 'content-box'
      },
      toString: renderCss
    };
    var closeCssBefore = {
      styles: {
        'content': '""',
        'display': 'block',
        'position': 'absolute',
        'background': '#000',
        'border-radius': '1px',
        'width': '2px',
        'height': '16px',
        'top': '2px',
        'left': '9px',
        'transform': 'rotate(45deg)'
      },
      toString: renderCss
    };
    var closeCssAfter = {
      styles: {
        'content': '""',
        'display': 'block',
        'position': 'absolute',
        'background': '#000',
        'border-radius': '1px',
        'width': '2px',
        'height': '16px',
        'top': '2px',
        'left': '9px',
        'transform': 'rotate(-45deg)'
      },
      toString: renderCss
    };
    var bodyCss = {
      styles: {
        'overflow': 'hidden'
      },
      toString: renderCss
    };
    var cleantalkModalStyle = document.createElement('style');
    cleantalkModalStyle.setAttribute('id', 'cleantalk-modal-styles');
    cleantalkModalStyle.innerHTML = 'body.cleantalk-modal-opened{' + bodyCss + '}';
    cleantalkModalStyle.innerHTML += '#cleantalk-modal-overlay{' + overlayCss + '}';
    cleantalkModalStyle.innerHTML += '#cleantalk-modal-close{' + closeCss + '}';
    cleantalkModalStyle.innerHTML += '#cleantalk-modal-close:before{' + closeCssBefore + '}';
    cleantalkModalStyle.innerHTML += '#cleantalk-modal-close:after{' + closeCssAfter + '}';
    document.body.append(cleantalkModalStyle);
    /* Cleantalk Modal CSS end */

    var overlay = document.createElement('div');
    overlay.setAttribute('id', 'cleantalk-modal-overlay');
    document.body.append(overlay);
    document.body.classList.add('cleantalk-modal-opened');
    var inner = document.createElement('div');
    inner.setAttribute('id', 'cleantalk-modal-inner');
    inner.setAttribute('style', innerCss);
    overlay.append(inner);
    var close = document.createElement('div');
    close.setAttribute('id', 'cleantalk-modal-close');
    inner.append(close);
    var content = document.createElement('div');
    if (this.loaded) {
      var urlRegex = /(https?:\/\/[^\s]+)/g;
      var serviceContentRegex = /.*\/inc/g;
      if (serviceContentRegex.test(this.loaded)) {
        content.innerHTML = this.loaded;
      } else {
        content.innerHTML = this.loaded.replace(urlRegex, '<a href="$1" target="_blank">$1</a>');
      }
    } else {
      content.innerHTML = 'Loading...';
      // @ToDo Here is hardcoded parameter. Have to get this from a 'data-' attribute.
      this.load('get_options_template');
    }
    content.setAttribute('id', 'cleantalk-modal-content');
    inner.append(content);
    this.opened = true;
  },
  close: function close() {
    document.body.classList.remove('cleantalk-modal-opened');
    document.getElementById('cleantalk-modal-overlay').remove();
    document.getElementById('cleantalk-modal-styles').remove();
    document.dispatchEvent(new CustomEvent('cleantalkModalClosed', {
      bubbles: true
    }));
  }
};

/* Cleantalk Modal helpers */
document.addEventListener('click', function (e) {
  if (e.target && (e.target.id === 'cleantalk-modal-overlay' || e.target.id === 'cleantalk-modal-close')) {
    cleantalkModal.close();
  }
});
document.addEventListener('cleantalkModalContentLoaded', function (e) {
  if (cleantalkModal.opened && cleantalkModal.loaded) {
    document.getElementById('cleantalk-modal-content').innerHTML = cleantalkModal.loaded;
  }
});

/**
 * Handle external forms
 */
function ctProtectExternal() {
  for (var i = 0; i < document.forms.length; i++) {
    if (document.forms[i].cleantalk_hidden_action === undefined && document.forms[i].cleantalk_hidden_method === undefined) {
      // current form
      var currentForm = document.forms[i];

      // skip excluded forms
      if (formIsExclusion(currentForm)) {
        continue;
      }

      // Ajax checking for the integrated forms - will be changed the whole form object to make protection
      if (isIntegratedForm(currentForm)) {
        apbctProcessExternalForm(currentForm, i, document);

        // Ajax checking for the integrated forms - will be changed only submit button to make protection
      } else if (
      // MooForm 3rd party service
      currentForm.dataset.mailingListId !== undefined || typeof currentForm.action == 'string' && currentForm.action.indexOf('webto.salesforce.com') !== -1) {
        apbctProcessExternalFormByFakeButton(currentForm, i, document);

        // Common flow - modify form's action
      } else if (typeof currentForm.action == 'string' && (currentForm.action.indexOf('http://') !== -1 || currentForm.action.indexOf('https://') !== -1)) {
        var tmp = currentForm.action.split('//');
        tmp = tmp[1].split('/');
        var host = tmp[0].toLowerCase();
        if (host !== location.hostname.toLowerCase()) {
          var ctAction = document.createElement('input');
          ctAction.name = 'cleantalk_hidden_action';
          ctAction.value = currentForm.action;
          ctAction.type = 'hidden';
          currentForm.appendChild(ctAction);
          var ctMethod = document.createElement('input');
          ctMethod.name = 'cleantalk_hidden_method';
          ctMethod.value = currentForm.method;
          ctMethod.type = 'hidden';
          currentForm.method = 'POST';
          currentForm.appendChild(ctMethod);
          currentForm.action = document.location;
        }
      }
    }
  }
  // Trying to process external form into an iframe
  apbctProcessIframes();
  // if form is still not processed by fields listening, do it here
  ctStartFieldsListening();
}

/**
 * Exclusion forms
 * @param {HTMLElement} currentForm
 * @return {boolean}
 */
function formIsExclusion(currentForm) {
  var exclusionsById = ['give-form',
  // give form exclusion because of direct integration
  'frmCalc',
  // nobletitle-calc
  'ihf-contact-request-form', 'wpforms' // integration with wpforms
  ];
  var exclusionsByRole = ['search' // search forms
  ];
  var exclusionsByClass = ['search-form',
  // search forms
  'hs-form',
  // integrated hubspot plugin through dynamicRenderedForms logic
  'ihc-form-create-edit',
  // integrated Ultimate Membership Pro plugin through dynamicRenderedForms logic
  'nf-form-content',
  // integration with Ninja Forms for js events
  'elementor-form',
  // integration with elementor-form
  'wpforms',
  // integration with wpforms
  'et_pb_searchform' // integration with elementor-search-form
  ];
  var result = false;
  try {
    // mewto forms exclusion
    if (currentForm.parentElement && currentForm.parentElement.classList.length > 0 && currentForm.parentElement.classList[0].indexOf('mewtwo') !== -1) {
      result = true;
    }
    exclusionsById.forEach(function (exclusionId) {
      var formId = currentForm.getAttribute('id');
      if (formId !== null && typeof formId !== 'undefined' && formId.indexOf(exclusionId) !== -1) {
        result = true;
      }
    });
    exclusionsByClass.forEach(function (exclusionClass) {
      var foundClass = '';
      if (currentForm.getAttribute('class')) {
        foundClass = currentForm.getAttribute('class');
      } else {
        foundClass = apbctGetFormClass(currentForm, exclusionClass);
      }
      var formClass = foundClass;
      if (formClass !== null && typeof formClass !== 'undefined' && formClass.indexOf(exclusionClass) !== -1) {
        result = true;
      }
    });
    exclusionsByRole.forEach(function (exclusionRole) {
      var formRole = currentForm.getAttribute('id');
      if (formRole !== null && typeof formRole !== 'undefined' && formRole.indexOf(exclusionRole) !== -1) {
        result = true;
      }
    });
  } catch (e) {
    console.table('APBCT ERROR: formIsExclusion() - ', e);
  }
  return result;
}

/**
 * Gets the form class if it is not in <form>
 * @param {HTMLElement} currentForm
 * @param {string} exclusionClass
 * @return {string}
 */
function apbctGetFormClass(currentForm, exclusionClass) {
  if (_typeof(currentForm) == 'object' && currentForm.querySelector('.' + exclusionClass)) {
    return exclusionClass;
  }
}

/**
 * Handle external forms in iframes
 */
function apbctProcessIframes() {
  var frames = document.getElementsByTagName('iframe');
  if (frames.length > 0) {
    for (var j = 0; j < frames.length; j++) {
      if (frames[j].contentDocument == null) {
        continue;
      }
      var iframeForms = frames[j].contentDocument.forms;
      if (iframeForms.length === 0) {
        continue;
      }
      for (var y = 0; y < iframeForms.length; y++) {
        var currentForm = iframeForms[y];
        if (formIsExclusion(currentForm)) {
          continue;
        }
        apbctProcessExternalForm(currentForm, y, frames[j].contentDocument);
      }
    }
  }
}

/**
 * Process external forms
 * @param {HTMLElement} currentForm
 * @param {int} iterator
 * @param {HTMLElement} documentObject
 */
function apbctProcessExternalForm(currentForm, iterator, documentObject) {
  var cleantalkPlaceholder = document.createElement('i');
  cleantalkPlaceholder.className = 'cleantalk_placeholder';
  cleantalkPlaceholder.style = 'display: none';
  currentForm.parentElement.insertBefore(cleantalkPlaceholder, currentForm);

  // Deleting form to prevent submit event
  var prev = currentForm.previousSibling;
  var formHtml = currentForm.outerHTML;
  var formOriginal = currentForm;

  // Remove the original form
  currentForm.parentElement.removeChild(currentForm);

  // Insert a clone
  var placeholder = document.createElement('div');
  placeholder.innerHTML = formHtml;
  prev.after(placeholder.firstElementChild);
  var forceAction = document.createElement('input');
  forceAction.name = 'action';
  forceAction.value = 'cleantalk_force_ajax_check';
  forceAction.type = 'hidden';
  var reUseCurrentForm = documentObject.forms[iterator];
  reUseCurrentForm.appendChild(forceAction);
  reUseCurrentForm.apbctPrev = prev;
  reUseCurrentForm.apbctFormOriginal = formOriginal;

  // mailerlite integration - disable click on submit button
  var mailerliteDetectedClass = false;
  if (reUseCurrentForm.classList !== undefined) {
    // list there all the mailerlite classes
    var mailerliteClasses = ['newsletterform', 'ml-block-form'];
    mailerliteClasses.forEach(function (mailerliteClass) {
      if (reUseCurrentForm.classList.contains(mailerliteClass)) {
        mailerliteDetectedClass = mailerliteClass;
      }
    });
  }
  if (mailerliteDetectedClass) {
    var mailerliteSubmitButton = documentObject.querySelector('form.' + mailerliteDetectedClass).querySelector('button[type="submit"]');
    if (mailerliteSubmitButton !== undefined) {
      mailerliteSubmitButton.addEventListener('click', function (event) {
        event.preventDefault();
        sendAjaxCheckingFormData(reUseCurrentForm);
      });
    }
    return;
  }
  documentObject.forms[iterator].onsubmit = function (event) {
    event.preventDefault();
    sendAjaxCheckingFormData(event.currentTarget);
  };
}

/**
 * Process external forms via fake button replacing
 * @param {HTMLElement} currentForm
 * @param {int} iterator
 * @param {HTMLElement} documentObject
 */
function apbctProcessExternalFormByFakeButton(currentForm, iterator, documentObject) {
  var submitButtonOriginal = currentForm.querySelector('[type="submit"]');
  var onsubmitOriginal = currentForm.querySelector('[type="submit"]').form.onsubmit;
  if (!submitButtonOriginal) {
    return;
  }
  var parent = submitButtonOriginal.parentElement;
  var submitButtonHtml = submitButtonOriginal.outerHTML;

  // Remove the original submit button
  submitButtonOriginal.remove();

  // Insert a clone of the submit button
  var placeholder = document.createElement('div');
  placeholder.innerHTML = submitButtonHtml;
  parent.appendChild(placeholder.firstElementChild);
  var forceAction = document.createElement('input');
  forceAction.name = 'action';
  forceAction.value = 'cleantalk_force_ajax_check';
  forceAction.type = 'hidden';
  var reUseCurrentForm = documentObject.forms[iterator];
  reUseCurrentForm.appendChild(forceAction);
  reUseCurrentForm.apbctParent = parent;
  reUseCurrentForm.submitButtonOriginal = submitButtonOriginal;
  reUseCurrentForm.onsubmitOriginal = onsubmitOriginal;
  documentObject.forms[iterator].onsubmit = function (event) {
    event.preventDefault();
    sendAjaxCheckingFormData(event.currentTarget);
  };
}

/**
 * Process external forms
 * @param {HTMLElement} formSource
 * @param {HTMLElement} formTarget
 */
function apbctReplaceInputsValuesFromOtherForm(formSource, formTarget) {
  var inputsSource = formSource.querySelectorAll('button, input, textarea, select');
  var inputsTarget = formTarget.querySelectorAll('button, input, textarea, select');
  if (formSource.outerHTML.indexOf('action="https://www.kulahub.net') !== -1) {
    inputsSource.forEach(function (elemSource) {
      inputsTarget.forEach(function (elemTarget) {
        if (elemSource.name === elemTarget.name) {
          if (elemTarget.type === 'checkbox' || elemTarget.type === 'radio') {
            elemTarget.checked = apbctVal(elemSource);
          } else {
            elemTarget.value = apbctVal(elemSource);
          }
        }
      });
    });
    return;
  }
  inputsSource.forEach(function (elemSource) {
    inputsTarget.forEach(function (elemTarget) {
      if (elemSource.outerHTML === elemTarget.outerHTML) {
        if (elemTarget.type === 'checkbox' || elemTarget.type === 'radio') {
          elemTarget.checked = apbctVal(elemSource);
        } else {
          elemTarget.value = apbctVal(elemSource);
        }
      }
    });
  });
}
// clear protected iframes list
apbctLocalStorage.set('apbct_iframes_protected', []);
window.onload = function () {
  if (!+ctPublic.settings__forms__check_external) {
    return;
  }
  setTimeout(function () {
    ctProtectExternal();
    catchDynamicRenderedForm();
    catchNextendSocialLoginForm();
    ctProtectOutsideIframe();
  }, 2000);
};

/**
 * Protect forms placed in iframe with outside src
 */
function ctProtectOutsideIframe() {
  var iframes = document.querySelectorAll('iframe');
  if (iframes.length > 0) {
    iframes.forEach(function (iframe) {
      if (iframe.src.indexOf('form.typeform.com') !== -1 || iframe.src.indexOf('forms.zohopublic.com') !== -1 || iframe.src.indexOf('link.surepathconnect.com') !== -1 || iframe.classList.contains('hs-form-iframe') || iframe.src.indexOf('facebook.com') !== -1 && iframe.src.indexOf('plugins/comments.php') !== -1) {
        // pass if is already protected
        if (false !== apbctLocalStorage.get('apbct_iframes_protected') && apbctLocalStorage.get('apbct_iframes_protected').length > 0 && typeof iframe.id !== 'undefined' && apbctLocalStorage.get('apbct_iframes_protected').indexOf[iframe.id] !== -1) {
          return;
        }
        ctProtectOutsideIframeHandler(iframe);
      }
    });
  }
}
var ctProtectOutsideIframeCheck;
/**
 * Protect forms placed in iframe with outside src handler
 * @param {HTMLElement} iframe
 */
function ctProtectOutsideIframeHandler(iframe) {
  var cover = document.createElement('div');
  cover.style.width = '100%';
  cover.style.height = '100%';
  cover.style.background = 'black';
  cover.style.opacity = 0;
  cover.style.position = 'absolute';
  cover.style.top = 0;
  cover.onclick = function (e) {
    if (ctProtectOutsideIframeCheck === undefined) {
      var currentDiv = e.currentTarget;
      currentDiv.style.opacity = 0.5;
      var preloader = document.createElement('div');
      preloader.className = 'apbct-iframe-preloader';
      currentDiv.appendChild(preloader);
      var botDetectorToken = '';
      if (document.querySelector('[name*="ct_bot_detector_event_token"]')) {
        botDetectorToken = document.querySelector('[name*="ct_bot_detector_event_token"]').value;
      }
      var data = {
        'action': 'cleantalk_outside_iframe_ajax_check',
        'ct_no_cookie_hidden_field': getNoCookieData(),
        'ct_bot_detector_event_token': botDetectorToken
      };
      apbct_public_sendAJAX(data, {
        async: false,
        callback: function callback(result) {
          ctProtectOutsideIframeCheck = true;
          if (result.apbct.blocked === false) {
            document.querySelectorAll('div.apbct-iframe-preloader').forEach(function (el) {
              el.parentNode.remove();
            });
          } else {
            document.querySelectorAll('div.apbct-iframe-preloader').forEach(function (el) {
              el.parentNode.style.color = 'white';
              el.parentNode.innerHTML += result.apbct.comment;
            });
            document.querySelectorAll('div.apbct-iframe-preloader').forEach(function (el) {
              el.remove();
            });
          }
        }
      });
    }
  };
  iframe.parentNode.style.position = 'relative';
  iframe.parentNode.appendChild(cover);
  var iframes = apbctLocalStorage.get('apbct_iframes_protected');
  if (false === iframes) {
    iframes = [];
  }
  if (typeof iframe.id !== 'undefined') {
    iframes.push(iframe.id);
    apbctLocalStorage.set('apbct_iframes_protected', iframes);
  }
}

/**
 * Catch NSL form integration
 */
function catchNextendSocialLoginForm() {
  var blockNSL = document.getElementById('nsl-custom-login-form-main');
  if (blockNSL) {
    blockBtnNextendSocialLogin(blockNSL);
  }
}

/**
 * Blocking NSL plugin buttons
 * @param {HTMLElement} blockNSL
 */
function blockBtnNextendSocialLogin(blockNSL) {
  var parentBtnsNSL = blockNSL.querySelectorAll('.nsl-container-buttons a');
  var childBtnsNSL = blockNSL.querySelectorAll('a[data-plugin="nsl"] .nsl-button');
  parentBtnsNSL.forEach(function (el) {
    el.setAttribute('data-oauth-login-blocked', 'true');
    el.addEventListener('click', function (event) {
      event.preventDefault();
    });
  });
  childBtnsNSL.forEach(function (el) {
    el.addEventListener('click', function (event) {
      event.preventDefault();
      event.stopPropagation();
      ctCheckAjax(el);
    });
  });
}

/**
 * Unlocking the button and clicking on it after an ajax response
 * @param {HTMLElement} childBtn
 */
function allowAjaxNextendSocialLogin(childBtn) {
  childBtn.parentElement.setAttribute('data-oauth-login-blocked', 'false');
  childBtn.parentElement.click();
}

/**
 * Locking the button and entering a message after an ajax response
 * @param {HTMLElement} childBtn
 * @param {string} msg
 */
function forbiddenAjaxNextendSocialLogin(childBtn, msg) {
  var parentElement = childBtn.parentElement;
  if (parentElement.getAttribute('data-oauth-login-blocked') == 'false') {
    parentElement.setAttribute('data-oauth-login-blocked', 'true');
  }
  if (!document.querySelector('.ct-forbidden-msg')) {
    var elemForMsg = document.createElement('div');
    elemForMsg.className = 'ct-forbidden-msg';
    elemForMsg.style.background = 'red';
    elemForMsg.style.color = 'white';
    elemForMsg.style.padding = '5px';
    elemForMsg.innerHTML = msg;
    parentElement.insertAdjacentElement('beforebegin', elemForMsg);
  }
}

/**
 * User verification using user data and ajax
 * @param {HTMLElement} elem
 */
function ctCheckAjax(elem) {
  var data = {
    'action': 'cleantalk_nsl_ajax_check',
    'ct_no_cookie_hidden_field': document.getElementsByName('ct_no_cookie_hidden_field')[0].value
  };
  apbct_public_sendAJAX(data, {
    async: false,
    callback: function callback(result) {
      if (result.apbct.blocked === false) {
        allowAjaxNextendSocialLogin(elem);
      } else {
        forbiddenAjaxNextendSocialLogin(elem, result.apbct.comment);
      }
    }
  });
}

/**
 * Checking the form integration
 * @param {HTMLElement} formObj
 * @return {boolean}
 */
function isIntegratedForm(formObj) {
  var formAction = typeof formObj.action == 'string' ? formObj.action : '';
  var formId = formObj.getAttribute('id') !== null ? formObj.getAttribute('id') : '';
  if (formAction.indexOf('activehosted.com') !== -1 ||
  // ActiveCampaign form
  formAction.indexOf('app.convertkit.com') !== -1 ||
  // ConvertKit form
  formObj.firstChild.classList !== undefined && formObj.firstChild.classList.contains('cb-form-group') ||
  // Convertbox form
  formAction.indexOf('mailerlite.com') !== -1 ||
  // Mailerlite integration
  formAction.indexOf('colcolmail.co.uk') !== -1 ||
  // colcolmail.co.uk integration
  formAction.indexOf('paypal.com') !== -1 || formAction.indexOf('infusionsoft.com') !== -1 || formAction.indexOf('secure2.convio.net') !== -1 || formAction.indexOf('hookb.in') !== -1 || formAction.indexOf('external.url') !== -1 || formAction.indexOf('tp.media') !== -1 || formAction.indexOf('flodesk.com') !== -1 || formAction.indexOf('sendfox.com') !== -1 || formAction.indexOf('aweber.com') !== -1 || formAction.indexOf('secure.payu.com') !== -1 || formAction.indexOf('mautic') !== -1 || formId.indexOf('mauticform_') !== -1 || formId.indexOf('ihf-contact-request-form') !== -1 || formAction.indexOf('crm.zoho.com') !== -1 || formId.indexOf('delivra-external-form') !== -1 || formObj.classList !== undefined && !formObj.classList.contains('woocommerce-checkout') && formObj.hasAttribute('data-hs-cf-bound') ||
  // Hubspot integration in Elementor form// Hubspot integration in Elementor form
  formAction.indexOf('eloqua.com') !== -1 ||
  // Eloqua integration
  formAction.indexOf('kulahub.net') !== -1 // Kulahub integration
  ) {
    return true;
  }
  return false;
}

/**
 * Sending Ajax for checking form data
 * @param {HTMLElement} form
 * @param {HTMLElement} prev
 * @param {HTMLElement} formOriginal
 */
function sendAjaxCheckingFormData(form) {
  // Get visible fields and set cookie
  var visibleFields = {};
  visibleFields[0] = apbct_collect_visible_fields(form);
  apbct_visible_fields_set_cookie(visibleFields);
  var data = {
    'ct_bot_detector_event_token': apbctLocalStorage.get('bot_detector_event_token')
  };
  var elems = form.elements;
  elems = Array.prototype.slice.call(elems);
  elems.forEach(function (elem, y) {
    if (elem.name === '') {
      data['input_' + y] = elem.value;
    } else {
      data[elem.name] = elem.value;
    }
  });
  apbct_public_sendAJAX(data, {
    async: false,
    callback: function callback(result, data, params, obj) {
      if (result.apbct === undefined || !+result.apbct.blocked) {
        // MooSend integration
        if (form.dataset.mailingListId !== undefined) {
          var submitButton = form.querySelector('[type="submit"]');
          submitButton.remove();
          var parent = form.apbctParent;
          parent.appendChild(form.submitButtonOriginal);
          submitButton = form.querySelector('[type="submit"]');
          submitButton.click();
          return;
        }

        // Salesforce integration
        if (form.hasAttribute('action') && form.getAttribute('action').indexOf('webto.salesforce.com') !== -1) {
          var _submitButton = form.querySelector('[type="submit"]');
          _submitButton.remove();
          var _parent = form.apbctParent;
          _parent.appendChild(form.submitButtonOriginal);
          form.onsubmit = form.onsubmitOriginal;
          _submitButton = form.querySelector('[type="submit"]');
          _submitButton.click();
          return;
        }
        var formNew = form;
        form.parentElement.removeChild(form);
        var prev = form.apbctPrev;
        var formOriginal = form.apbctFormOriginal;
        var mauticIntegration = false;
        apbctReplaceInputsValuesFromOtherForm(formNew, formOriginal);

        // mautic forms integration
        if (formOriginal.id.indexOf('mautic') !== -1) {
          mauticIntegration = true;
        }
        prev.after(formOriginal);

        // Clear visible_fields input
        var _iterator10 = _createForOfIteratorHelper(formOriginal.querySelectorAll('input[name="apbct_visible_fields"]')),
          _step10;
        try {
          for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
            var el = _step10.value;
            el.remove();
          }
        } catch (err) {
          _iterator10.e(err);
        } finally {
          _iterator10.f();
        }
        var _iterator11 = _createForOfIteratorHelper(formOriginal.querySelectorAll('input[value="cleantalk_force_ajax_check"]')),
          _step11;
        try {
          for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {
            var _el = _step11.value;
            _el.remove();
          }

          // Common click event
        } catch (err) {
          _iterator11.e(err);
        } finally {
          _iterator11.f();
        }
        var submButton = formOriginal.querySelectorAll('button[type=submit]');
        if (submButton.length !== 0) {
          submButton[0].click();
          if (mauticIntegration) {
            setTimeout(function () {
              ctProtectExternal();
            }, 1500);
          }
          return;
        }
        submButton = formOriginal.querySelectorAll('input[type=submit]');
        if (submButton.length !== 0) {
          submButton[0].click();
          return;
        }

        // ConvertKit direct integration
        submButton = formOriginal.querySelectorAll('button[data-element="submit"]');
        if (submButton.length !== 0) {
          submButton[0].click();
          return;
        }

        // Paypal integration
        submButton = formOriginal.querySelectorAll('input[type="image"][name="submit"]');
        if (submButton.length !== 0) {
          submButton[0].click();
        }
      }
      if (result.apbct !== undefined && +result.apbct.blocked) {
        ctParseBlockMessage(result);
      }
    }
  });
}

/**
 * Handle dynamic rendered form
 */
function catchDynamicRenderedForm() {
  var forms = document.getElementsByTagName('form');
  catchDynamicRenderedFormHandler(forms);
  var frames = document.getElementsByTagName('iframe');
  if (frames.length > 0) {
    for (var j = 0; j < frames.length; j++) {
      if (frames[j].contentDocument == null) {
        continue;
      }
      var iframeForms = frames[j].contentDocument.forms;
      if (iframeForms.length === 0) {
        return;
      }
      catchDynamicRenderedFormHandler(iframeForms, frames[j].contentDocument);
    }
  }
}

/**
 * Process dynamic rendered form
 * @param {HTMLElements} forms
 * @param {HTMLElement} documentObject
 */
function catchDynamicRenderedFormHandler(forms) {
  var documentObject = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document;
  var neededFormIds = [];
  var _iterator12 = _createForOfIteratorHelper(forms),
    _step12;
  try {
    for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {
      var _form2 = _step12.value;
      if (_form2.id.indexOf('hsForm') !== -1) {
        neededFormIds.push(_form2.id);
      }
      if (_form2.id.indexOf('createuser') !== -1 && _form2.classList !== undefined && _form2.classList.contains('ihc-form-create-edit')) {
        neededFormIds.push(_form2.id);
      }
    }
  } catch (err) {
    _iterator12.e(err);
  } finally {
    _iterator12.f();
  }
  for (var _i5 = 0, _neededFormIds = neededFormIds; _i5 < _neededFormIds.length; _i5++) {
    var formId = _neededFormIds[_i5];
    var form = documentObject.getElementById(formId);
    form.apbct_external_onsubmit_prev = form.onsubmit;
    form.onsubmit = sendAjaxCheckingDynamicFormData;
  }
}

/**
 * Sending Ajax for checking form data on dynamic rendered form
 * @param {HTMLElement} form
 */
function sendAjaxCheckingDynamicFormData(form) {
  form.preventDefault();
  form.stopImmediatePropagation();
  var formEvent = form;
  form = form.target;
  var forceAction = document.createElement('input');
  forceAction.name = 'action';
  forceAction.value = 'cleantalk_force_ajax_check';
  forceAction.type = 'hidden';
  form.appendChild(forceAction);

  // Get visible fields and set cookie
  var visibleFields = {};
  visibleFields[0] = apbct_collect_visible_fields(form);
  apbct_visible_fields_set_cookie(visibleFields);
  form.append(ctNoCookieConstructHiddenField('hidden'));
  var data = {};
  var elems = form.elements;
  elems = Array.prototype.slice.call(elems);
  elems.forEach(function (elem, y) {
    if (elem.name === '') {
      data['input_' + y] = elem.value;
    } else {
      data[elem.name] = elem.value;
    }
  });
  apbct_public_sendAJAX(data, {
    async: false,
    callback: function callback(result) {
      if (result.apbct === undefined || !+result.apbct.blocked) {
        form.onsubmit = null;

        // Clear service fields
        var _iterator13 = _createForOfIteratorHelper(form.querySelectorAll('input[name="apbct_visible_fields"]')),
          _step13;
        try {
          for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {
            var el = _step13.value;
            el.remove();
          }
        } catch (err) {
          _iterator13.e(err);
        } finally {
          _iterator13.f();
        }
        var _iterator14 = _createForOfIteratorHelper(form.querySelectorAll('input[value="cleantalk_force_ajax_check"]')),
          _step14;
        try {
          for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {
            var _el2 = _step14.value;
            _el2.remove();
          }
        } catch (err) {
          _iterator14.e(err);
        } finally {
          _iterator14.f();
        }
        var _iterator15 = _createForOfIteratorHelper(form.querySelectorAll('input[name="ct_no_cookie_hidden_field"]')),
          _step15;
        try {
          for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {
            var _el3 = _step15.value;
            _el3.remove();
          }

          // Call previous submit action
        } catch (err) {
          _iterator15.e(err);
        } finally {
          _iterator15.f();
        }
        if (form.apbct_external_onsubmit_prev instanceof Function) {
          var timerId = setTimeout(function () {
            form.apbct_external_onsubmit_prev.call(form, formEvent);
          }, 500);
          clearTimeout(timerId);
        }
        var submButton = form.querySelector('input[type="submit"]');
        if (submButton) {
          submButton.click();
          return;
        }
      }
      if (result.apbct !== undefined && +result.apbct.blocked) {
        ctParseBlockMessage(result);
      }
    }
  });
}

/**
 * Implement jQuery val() function
 * @param {HTMLElement} el
 * @return {HTMLElements}
 */
function apbctVal(el) {
  if (el.options && el.multiple) {
    return el.options.filter(function (option) {
      return option.selected;
    }).map(function (option) {
      return option.value;
    });
  } else if (el.type === 'checkbox' || el.type === 'radio') {
    return el.checked ? el.checked : null;
  } else {
    return el.value;
  }
}

/**
 * Check form as internal.
 * @param {int} currForm Current form.
 */
function ctCheckInternal(currForm) {
  //  Gathering data
  var ctData = {};
  var elems = currForm.elements;
  var key;
  for (key in elems) {
    if (elems[key].type !== 'submit' && elems[key].value !== undefined && elems[key].value !== '') {
      ctData[elems[key].name] = currForm.elements[key].value;
    }
  }
  ctData.action = 'ct_check_internal';

  //  AJAX Request
  apbct_public_sendAJAX(ctData, {
    url: ctPublicFunctions._ajax_url,
    callback: function callback(data) {
      if (data.success === true) {
        currForm.origSubmit();
      } else {
        alert(data.data);
        return false;
      }
    }
  });
}
document.addEventListener('DOMContentLoaded', function () {
  var ctCurrAction = '';
  var ctCurrForm = '';
  if (!+ctPublic.settings__forms__check_internal) {
    return;
  }
  setTimeout(function () {
    for (var i = 0; i < document.forms.length; i++) {
      if (typeof document.forms[i].action == 'string') {
        ctCurrForm = document.forms[i];
        ctCurrAction = ctCurrForm.action;
        if (ctCurrAction.indexOf('https?://') !== null &&
        // The protocol is obligatory
        ctCurrAction.match(ctPublic.blog_home + '.*?\.php') !== null &&
        // Main check
        !ctCheckInternalIsExcludedForm(ctCurrAction) // Exclude WordPress native scripts from processing
        ) {
          var formClone = ctCurrForm.cloneNode(true);
          ctCurrForm.parentNode.replaceChild(formClone, ctCurrForm);
          formClone.origSubmit = ctCurrForm.submit;
          formClone.submit = null;
          formClone.addEventListener('submit', function (event) {
            event.preventDefault();
            event.stopPropagation();
            event.stopImmediatePropagation();
            ctCheckInternal(event.target);
            return false;
          });
        }
      }
    }
  }, 500);
});

/**
 * Check by action to exclude the form checking
 * @param {string} action
 * @return {boolean}
 */
function ctCheckInternalIsExcludedForm(action) {
  // An array contains forms action need to be excluded.
  var ctInternalScriptExclusions = ['wp-login.php',
  // WordPress login page
  'wp-comments-post.php' // WordPress Comments Form
  ];
  return ctInternalScriptExclusions.some(function (item) {
    return action.match(new RegExp(ctPublic.blog_home + '.*' + item)) !== null;
  });
}