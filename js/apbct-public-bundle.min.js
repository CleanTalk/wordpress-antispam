"use strict";

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _possibleConstructorReturn(t, e) { if (e && ("object" == _typeof(e) || "function" == typeof e)) return e; if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined"); return _assertThisInitialized(t); }
function _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); return e; }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }
function _inherits(t, e) { if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, "prototype", { writable: !1 }), e && _setPrototypeOf(t, e); }
function _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t.return || t.return(); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
/**
 * Base class
 */
var ApbctCore = /*#__PURE__*/function () {
  /**
   * Default constructor
   * @param {string} selector
   */
  function ApbctCore(selector) {
    _classCallCheck(this, ApbctCore);
    _defineProperty(this, "ajax_parameters", {});
    _defineProperty(this, "restParameters", {});
    _defineProperty(this, "selector", null);
    _defineProperty(this, "elements", []);
    // Event properties
    _defineProperty(this, "eventCallback", void 0);
    _defineProperty(this, "eventSelector", void 0);
    _defineProperty(this, "event", void 0);
    this.select(selector);
  }

  /**
   * Get elements by CSS selector
   *
   * @param {string} selector
   * @return {*}
   */
  return _createClass(ApbctCore, [{
    key: "select",
    value: function select(selector) {
      if (selector instanceof HTMLCollection) {
        this.selector = null;
        this.elements = [];
        this.elements = Array.prototype.slice.call(selector);
      } else if (_typeof(selector) === 'object') {
        this.selector = null;
        this.elements = [];
        this.elements[0] = selector;
      } else if (typeof selector === 'string') {
        this.selector = selector;
        this.elements = Array.prototype.slice.call(document.querySelectorAll(selector));
        // this.elements = document.querySelectorAll(selector)[0];
      } else {
        this.deselect();
      }
      return this;
    }

    /**
     * @param {object|string} elemToAdd
     */
  }, {
    key: "addElement",
    value: function addElement(elemToAdd) {
      if (_typeof(elemToAdd) === 'object') {
        this.elements.push(elemToAdd);
      } else if (typeof elemToAdd === 'string') {
        this.selector = elemToAdd;
        this.elements = Array.prototype.slice.call(document.querySelectorAll(elemToAdd));
      } else {
        this.deselect();
      }
    }

    /**
     * @param {object} elem
     */
  }, {
    key: "push",
    value: function push(elem) {
      this.elements.push(elem);
    }

    /**
     * reduce
     */
  }, {
    key: "reduce",
    value: function reduce() {
      this.elements = this.elements.slice(0, -1);
    }

    /**
     * deselect
     */
  }, {
    key: "deselect",
    value: function deselect() {
      this.elements = [];
    }

    /**
     * Set or get CSS for/of currently selected element
     *
     * @param {object|string} style
     * @param {boolean} getRaw
     *
     * @return {boolean|*}
     */
  }, {
    key: "css",
    value: function css(style, getRaw) {
      getRaw = getRaw || false;

      // Set style
      if (_typeof(style) === 'object') {
        var stringToCamelCase = function stringToCamelCase(str) {
          return str.replace(/([-_][a-z])/g, function (group) {
            return group.toUpperCase().replace('-', '').replace('_', '');
          });
        };

        // Apply multiple styles
        for (var styleName in style) {
          if (Object.hasOwn(style, styleName)) {
            var DomStyleName = stringToCamelCase(styleName);

            // Apply to multiple elements (currently selected)
            for (var i = 0; i < this.elements.length; i++) {
              this.elements[i].style[DomStyleName] = style[styleName];
            }
          }
        }
        return this;
      }

      // Get style of first currently selected element
      if (typeof style === 'string') {
        var computedStyle = getComputedStyle(this.elements[0])[style];

        // Process
        if (typeof computedStyle !== 'undefined' && !getRaw) {
          // Cut of units
          computedStyle = computedStyle.replace(/(\d)(em|pt|%|px){1,2}$/, '$1');
          // Cast to INT
          computedStyle = Number(computedStyle) == computedStyle ? Number(computedStyle) : computedStyle;
          return computedStyle;
        }

        // Return unprocessed
        return computedStyle;
      }
    }

    /**
     * hide
     */
  }, {
    key: "hide",
    value: function hide() {
      this.prop('prev-display', this.css('display'));
      this.css({
        'display': 'none'
      });
    }

    /**
     * show
     */
  }, {
    key: "show",
    value: function show() {
      this.css({
        'display': this.prop('prev-display')
      });
    }

    /**
     * addClass
     */
  }, {
    key: "addClass",
    value: function addClass() {
      for (var i = 0; i < this.elements.length; i++) {
        this.elements[i].classList.add(className);
      }
    }

    /**
     * removeClass
     */
  }, {
    key: "removeClass",
    value: function removeClass() {
      for (var i = 0; i < this.elements.length; i++) {
        this.elements[i].classList.remove(className);
      }
    }

    /**
     * @param {string} className
     */
  }, {
    key: "toggleClass",
    value: function toggleClass(className) {
      for (var i = 0; i < this.elements.length; i++) {
        this.elements[i].classList.toggle(className);
      }
    }

    /**
     * Wrapper for apbctAJAX class
     *
     * @param {object|array} ajaxParameters
     * @return {ApbctAjax}
     */
  }, {
    key: "ajax",
    value: function ajax(ajaxParameters) {
      this.ajax_parameters = ajaxParameters;
      return new ApbctAjax(ajaxParameters);
    }

    /**
     * Wrapper for apbctREST class
     *
     * @param {object|array} restParameters
     * @return {ApbctRest}
     */
  }, {
    key: "rest",
    value: function rest(restParameters) {
      this.restParameters = restParameters;
      return new ApbctRest(restParameters);
    }

    /**
     * ************ EVENTS *************
     */

    /**
     *
     * Why the mess with arguments?
     *
     * Because we need to support the following function signatures:
     *      on('click',                   function(){ alert('some'); });
     *      on('click', 'inner_selector', function(){ alert('some'); });
     *
     * @param {object|array} args
     */
  }, {
    key: "on",
    value: function on() {
      this.event = arguments.length <= 0 ? undefined : arguments[0];
      this.eventCallback = (arguments.length <= 2 ? undefined : arguments[2]) || (arguments.length <= 1 ? undefined : arguments[1]);
      this.eventSelector = typeof (arguments.length <= 1 ? undefined : arguments[1]) === 'string' ? arguments.length <= 1 ? undefined : arguments[1] : null;
      for (var i = 0; i < this.elements.length; i++) {
        this.elements[i].addEventListener(this.event, this.eventSelector !== null ? this.onChecker.bind(this) : this.eventCallback);
      }
    }

    /**
     * Check if a selector of an event matches current target
     *
     * @param {object} event
     * @return {*}
     */
  }, {
    key: "onChecker",
    value: function onChecker(event) {
      if (event.target === document.querySelector(this.eventSelector)) {
        event.stopPropagation();
        return this.eventCallback(event);
      }
    }

    /**
     * @param {object|function|string} callback
     */
  }, {
    key: "ready",
    value: function ready(callback) {
      document.addEventListener('DOMContentLoaded', callback);
    }

    /**
     * @param {object|function|string} callback
     */
  }, {
    key: "change",
    value: function change(callback) {
      this.on('change', callback);
    }

    /**
     * ATTRIBUTES
     */

    /**
     * Get an attribute or property of an element
     *
     * @param {string} attrName
     * @return {*|*[]}
     */
  }, {
    key: "attr",
    value: function attr(attrName) {
      var outputValue = [];
      for (var i = 0; i < this.elements.length; i++) {
        // Use property instead of attribute if possible
        if (typeof this.elements[i][attrName] !== 'undefined') {
          outputValue.push(this.elements[i][attrName]);
        } else {
          outputValue.push(this.elements[i].getAttribute(attrName));
        }
      }

      // Return a single value instead of array if only one value is present
      return outputValue.length === 1 ? outputValue[0] : outputValue;
    }

    /**
     * @param {string} propName
     * @param {mixed} value
     * @return {*|*[]|ApbctCore}
     */
  }, {
    key: "prop",
    value: function prop(propName, value) {
      // Setting values
      if (typeof value !== 'undefined') {
        for (var i = 0; i < this.elements.length; i++) {
          this.elements[i][propName] = value;
        }
        return this;

        // Getting values
      } else {
        var outputValue = [];
        for (var _i = 0; _i < this.elements.length; _i++) {
          outputValue.push(this.elements[_i][propName]);
        }

        // Return a single value instead of array if only one value is present
        return outputValue.length === 1 ? outputValue[0] : outputValue;
      }
    }

    /**
     * Set or get inner HTML
     *
     * @param {string} value
     * @return {*|*[]}
     */
  }, {
    key: "html",
    value: function html(value) {
      return typeof value !== 'undefined' ? this.prop('innerHTML', value) : this.prop('innerHTML');
    }

    /**
     * Set or get value of input tags
     *
     * @param {mixed} value
     * @return {*|*[]|undefined}
     */
  }, {
    key: "val",
    value: function val(value) {
      return typeof value !== 'undefined' ? this.prop('value', value) : this.prop('value');
    }

    /**
     * @param {string} name
     * @param {mixed} value
     * @return {*|*[]|ApbctCore}
     */
  }, {
    key: "data",
    value: function data(name, value) {
      return typeof value !== 'undefined' ? this.prop('apbct-data', name, value) : this.prop('apbct-data');
    }

    /**
     * END OF ATTRIBUTES
     */

    /**
     * FILTERS
     */

    /**
     * Check if the current elements are corresponding to filter
     *
     * @param {mixed} filter
     * @return {boolean}
     */
  }, {
    key: "is",
    value: function is(filter) {
      var outputValue = false;
      var _iterator = _createForOfIteratorHelper(this.elements),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var elem = _step.value;
          outputValue || (outputValue = this.isElem(elem, filter));
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      return outputValue;
    }

    /**
     * @param {string|object} elemToCheck
     * @param {mixed} filter
     * @return {boolean}
     */
  }, {
    key: "isElem",
    value: function isElem(elemToCheck, filter) {
      var is = false;
      var isRegisteredTagName = function isRegisteredTagName(name) {
        var newlyCreatedElement = document.createElement(name).constructor;
        return !Boolean(~[HTMLElement, HTMLUnknownElement].indexOf(newlyCreatedElement));
      };

      // Check for filter function
      if (typeof filter === 'function') {
        is || (is = filter.call(this, elemToCheck));
      }

      // Check for filter function
      if (typeof filter === 'string') {
        // Filter is tag name
        if (filter.match(/^[a-z]/) && isRegisteredTagName(filter)) {
          is || (is = elemToCheck.tagName.toLowerCase() === filter.toLowerCase());

          // Filter is property
        } else if (filter.match(/^[a-z]/)) {
          is || (is = Boolean(elemToCheck[filter]));

          // Filter is CSS selector
        } else {
          is || (is = this.selector !== null ? document.querySelector(this.selector + filter) !== null :
          // If possible
          this.isWithoutSelector(elemToCheck, filter)); // Search through all elems with such selector
        }
      }
      return is;
    }

    /**
     * @param {object|string} elemToCheck
     * @param {mixed} filter
     * @return {boolean}
     */
  }, {
    key: "isWithoutSelector",
    value: function isWithoutSelector(elemToCheck, filter) {
      var elems = document.querySelectorAll(filter);
      var outputValue = false;
      var _iterator2 = _createForOfIteratorHelper(elems),
        _step2;
      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var elem = _step2.value;
          outputValue || (outputValue = elemToCheck === elem);
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
      return outputValue;
    }

    /**
     * @param {mixed} filter
     * @return {ApbctCore}
     */
  }, {
    key: "filter",
    value: function filter(_filter) {
      this.selector = null;
      for (var i = this.elements.length - 1; i >= 0; i--) {
        if (!this.isElem(this.elements[i], _filter)) {
          this.elements.splice(Number(i), 1);
        }
      }
      return this;
    }

    /**
     * NODES
     */

    /**
     * @param {mixed} filter
     * @return {ApbctCore}
     */
  }, {
    key: "parent",
    value: function parent(filter) {
      this.select(this.elements[0].parentElement);
      if (typeof filter !== 'undefined' && !this.is(filter)) {
        this.deselect();
      }
      return this;
    }

    /**
     * @param {mixed} filter
     * @return {ApbctCore}
     */
  }, {
    key: "parents",
    value: function parents(filter) {
      this.select(this.elements[0]);
      for (; this.elements[this.elements.length - 1].parentElement !== null;) {
        this.push(this.elements[this.elements.length - 1].parentElement);
      }
      this.elements.splice(0, 1); // Deleting initial element from the set

      if (typeof filter !== 'undefined') {
        this.filter(filter);
      }
      return this;
    }

    /**
     * @param {mixed} filter
     * @return {ApbctCore}
     */
  }, {
    key: "children",
    value: function children(filter) {
      this.select(this.elements[0].children);
      if (typeof filter !== 'undefined') {
        this.filter(filter);
      }
      return this;
    }

    /**
     * @param {mixed} filter
     * @return {ApbctCore}
     */
  }, {
    key: "siblings",
    value: function siblings(filter) {
      var current = this.elements[0]; // Remember current to delete it later

      this.parent();
      this.children(filter);
      this.elements.splice(this.elements.indexOf(current), 1); // Remove current element

      return this;
    }

    /** ************ DOM MANIPULATIONS **************/
  }, {
    key: "remove",
    value: function remove() {
      var _iterator3 = _createForOfIteratorHelper(this.elements),
        _step3;
      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var elem = _step3.value;
          elem.remove();
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }
    }

    /**
     * @param {string} content
     */
  }, {
    key: "after",
    value: function after(content) {
      var _iterator4 = _createForOfIteratorHelper(this.elements),
        _step4;
      try {
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          var elem = _step4.value;
          elem.after(content);
        }
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }
    }

    /**
     * @param {string} content
     */
  }, {
    key: "append",
    value: function append(content) {
      var _iterator5 = _createForOfIteratorHelper(this.elements),
        _step5;
      try {
        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
          var elem = _step5.value;
          elem.append(content);
        }
      } catch (err) {
        _iterator5.e(err);
      } finally {
        _iterator5.f();
      }
    }

    /** ************  ANIMATION  **************/
    /**
     * @param {number} time
     */
  }, {
    key: "fadeIn",
    value: function fadeIn(time) {
      var _iterator6 = _createForOfIteratorHelper(this.elements),
        _step6;
      try {
        var _loop = function _loop() {
          var elem = _step6.value;
          elem.style.opacity = 0;
          elem.style.display = 'block';
          var last = +new Date();
          var _tick = function tick() {
            elem.style.opacity = +elem.style.opacity + (new Date() - last) / time;
            last = +new Date();
            if (+elem.style.opacity < 1) {
              window.requestAnimationFrame && requestAnimationFrame(_tick) || setTimeout(_tick, 16);
            }
          };
          _tick();
        };
        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
          _loop();
        }
      } catch (err) {
        _iterator6.e(err);
      } finally {
        _iterator6.f();
      }
    }

    /**
     * @param {number} time
     */
  }, {
    key: "fadeOut",
    value: function fadeOut(time) {
      var _iterator7 = _createForOfIteratorHelper(this.elements),
        _step7;
      try {
        var _loop2 = function _loop2() {
          var elem = _step7.value;
          elem.style.opacity = 1;
          var last = +new Date();
          var _tick2 = function tick() {
            elem.style.opacity = +elem.style.opacity - (new Date() - last) / time;
            last = +new Date();
            if (+elem.style.opacity > 0) {
              window.requestAnimationFrame && requestAnimationFrame(_tick2) || setTimeout(_tick2, 16);
            } else {
              elem.style.display = 'none';
            }
          };
          _tick2();
        };
        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
          _loop2();
        }
      } catch (err) {
        _iterator7.e(err);
      } finally {
        _iterator7.f();
      }
    }
  }]);
}();
/**
 * Hack
 *
 * Make a proxy to keep both properties and methods from:
 *  - the native object and
 *  - the new one from ApbctCore for selected element.
 *
 * For example:
 * apbct('#id).innerHTML = 'some';
 * apbct('#id).css({'backgorund-color': 'black'});
 */
// apbct = new Proxy(
//         apbct,
//         {
//             get(target, prop) {
//                 if (target.elements.length) {
//                     return target.elements[0][prop];
//                 } else {
//                     return null;
//                 }
//             },
//             set(target, prop, value){
//                 if (target.elements.length) {
//                     target.elements[0][prop] = value;
//                     return true;
//                 } else {
//                     return false;
//                 }
//             },
//             apply(target, thisArg, argArray) {
//
//             }
//         }
//     );
/**
 * @param {mixed} msg
 * @param {string} url
 */
function ctProcessError(msg, url) {
  var log = {};
  if (msg && msg.message) {
    log.err = {
      'msg': msg.message,
      'file': !!msg.fileName ? msg.fileName : false,
      'ln': !!msg.lineNumber ? msg.lineNumber : !!lineNo ? lineNo : false,
      'col': !!msg.columnNumber ? msg.columnNumber : !!columnNo ? columnNo : false,
      'stacktrace': !!msg.stack ? msg.stack : false,
      'cause': !!url ? JSON.stringify(url) : false,
      'errorObj': !!error ? error : false
    };
  } else {
    log.err = {
      'msg': msg
    };
    if (!!url) {
      log.err.file = url;
    }
  }
  log.url = window.location.href;
  log.userAgent = window.navigator.userAgent;
  var ctJsErrors = 'ct_js_errors';
  var errArray = localStorage.getItem(ctJsErrors);
  if (errArray === null) errArray = '[]';
  errArray = JSON.parse(errArray);
  for (var i = 0; i < errArray.length; i++) {
    if (errArray[i].err.msg === log.err.msg) {
      return;
    }
  }
  errArray.push(log);
  localStorage.setItem(ctJsErrors, JSON.stringify(errArray));
}
if (Math.floor(Math.random() * 100) === 1) {
  window.onerror = function (exception, url) {
    var filterWords = ['apbct', 'ctPublic'];
    var length = filterWords.length;
    while (length--) {
      if (exception.indexOf(filterWords[length]) !== -1) {
        ctProcessError(exception, url);
      }
    }
    return false;
  };
}

/**
 * Select actual WP nonce depending on the ajax type and the fresh nonce provided.
 * @return {string} url
 */
function selectActualNonce() {
  var defaultNonce = '';
  // return fresh nonce immediately if persists
  if (ctPublicFunctions.hasOwnProperty('_fresh_nonce') && typeof ctPublicFunctions._fresh_nonce === 'string' && ctPublicFunctions._fresh_nonce.length > 0) {
    return ctPublicFunctions._fresh_nonce;
  }
  // select from default rest/ajax nonces
  if (ctPublicFunctions.data__ajax_type === 'admin_ajax' && ctPublicFunctions.hasOwnProperty('_ajax_nonce') && typeof ctPublicFunctions._ajax_nonce === 'string' && ctPublicFunctions._ajax_nonce.length > 0) {
    defaultNonce = ctPublicFunctions._ajax_nonce;
  }
  if (ctPublicFunctions.data__ajax_type === 'rest' && ctPublicFunctions.hasOwnProperty('_rest_nonce') && typeof ctPublicFunctions._rest_nonce === 'string' && ctPublicFunctions._rest_nonce.length > 0) {
    defaultNonce = ctPublicFunctions._rest_nonce;
  }
  return defaultNonce;
}

/**
 * Enter point to ApbctCore class
 *
 * @param {array|object} params
 * @return {*}
 */
// eslint-disable-next-line no-unused-vars, require-jsdoc
function apbct(params) {
  return new ApbctCore().select(params);
}

/**
 * ApbctXhr
 */
var ApbctXhr = /*#__PURE__*/function () {
  // eslint-disable-next-line require-jsdoc
  function ApbctXhr(parameters) {
    _classCallCheck(this, ApbctXhr);
    _defineProperty(this, "xhr", new XMLHttpRequest());
    // Base parameters
    _defineProperty(this, "method", 'POST');
    // HTTP-request type
    _defineProperty(this, "url", '');
    // URL to send the request
    _defineProperty(this, "async", true);
    _defineProperty(this, "user", null);
    // HTTP-authorization username
    _defineProperty(this, "password", null);
    // HTTP-authorization password
    _defineProperty(this, "data", {});
    // Data to send
    // Optional params
    _defineProperty(this, "button", null);
    // Button that should be disabled when request is performing
    _defineProperty(this, "spinner", null);
    // Spinner that should appear when request is in process
    _defineProperty(this, "progressbar", null);
    // Progress bar for the current request
    _defineProperty(this, "context", this);
    // Context
    _defineProperty(this, "callback", null);
    _defineProperty(this, "onErrorCallback", null);
    _defineProperty(this, "responseType", 'json');
    // Expected data type from server
    _defineProperty(this, "headers", {});
    _defineProperty(this, "timeout", 15000);
    // Request timeout in milliseconds
    _defineProperty(this, "methods_to_convert_data_to_URL", ['GET', 'HEAD']);
    _defineProperty(this, "body", null);
    _defineProperty(this, "http_code", 0);
    _defineProperty(this, "status_text", '');
    // Set class properties
    for (var key in parameters) {
      if (typeof this[key] !== 'undefined') {
        this[key] = parameters[key];
      }
    }

    // Modifying DOM-elements
    this.prepare();

    // Modify URL with data for GET and HEAD requests
    if (Object.keys(this.data).length) {
      this.deleteDoubleJSONEncoding(this.data);
      this.convertData();
    }
    if (!this.url) {
      console.log('%cXHR%c not URL provided', 'color: red; font-weight: bold;', 'color: grey; font-weight: normal;');
      return false;
    }

    // Configure the request
    this.xhr.open(this.method, this.url, this.async, this.user, this.password);
    this.setHeaders();
    this.xhr.responseType = this.responseType;
    this.xhr.timeout = this.timeout;

    /* EVENTS */
    // Monitoring status
    this.xhr.onreadystatechange = function () {
      if (this.isWpNonceError()) {
        this.getFreshNonceAndRerunXHR(parameters);
        return;
      }
      this.onReadyStateChange();
    }.bind(this);

    // Run callback
    this.xhr.onload = function () {
      this.onLoad();
    }.bind(this);

    // On progress
    this.xhr.onprogress = function (event) {
      this.onProgress(event);
    }.bind(this);

    // On error
    this.xhr.onerror = function () {
      this.onError();
    }.bind(this);
    this.xhr.ontimeout = function () {
      this.onTimeout();
    }.bind(this);

    // Send the request
    this.xhr.send(this.body);
  }

  /**
   * prepare
   */
  return _createClass(ApbctXhr, [{
    key: "prepare",
    value: function prepare() {
      // Disable button
      if (this.button) {
        this.button.setAttribute('disabled', 'disabled');
        this.button.style.cursor = 'not-allowed';
      }

      // Enable spinner
      if (this.spinner) {
        this.spinner.style.display = 'inline';
      }
    }

    /**
     * complete
     */
  }, {
    key: "complete",
    value: function complete() {
      this.http_code = this.xhr.status;
      this.status_text = this.xhr.statusText;

      // Disable button
      if (this.button) {
        this.button.removeAttribute('disabled');
        this.button.style.cursor = 'auto';
      }

      // Enable spinner
      if (this.spinner) {
        this.spinner.style.display = 'none';
      }
      if (this.progressbar) {
        this.progressbar.fadeOut('slow');
      }
    }

    /**
     * onReadyStateChange
     */
  }, {
    key: "onReadyStateChange",
    value: function onReadyStateChange() {
      if (this.on_ready_state_change !== null && typeof this.on_ready_state_change === 'function') {
        this.on_ready_state_change();
      }
    }

    /**
     * @param {object} event
     */
  }, {
    key: "onProgress",
    value: function onProgress(event) {
      if (this.on_progress !== null && typeof this.on_progress === 'function') {
        this.on_progress();
      }
    }

    /**
     * onError
     */
  }, {
    key: "onError",
    value: function onError() {
      console.log('error');
      this.complete();
      this.error(this.http_code, this.status_text);
      if (this.onErrorCallback !== null && typeof this.onErrorCallback === 'function') {
        this.onErrorCallback(this.status_text);
      }
    }

    /**
     * onTimeout
     */
  }, {
    key: "onTimeout",
    value: function onTimeout() {
      this.complete();
      this.error(0, 'timeout');
      if (this.onErrorCallback !== null && typeof this.onErrorCallback === 'function') {
        this.onErrorCallback('Timeout');
      }
    }

    /**
     * @return {boolean}
     */
  }, {
    key: "onLoad",
    value: function onLoad() {
      this.complete();
      if (this.responseType === 'json') {
        if (this.xhr.response === null) {
          this.error(this.http_code, this.status_text, 'No response');
          return false;
        } else if (typeof this.xhr.response.error !== 'undefined') {
          this.error(this.http_code, this.status_text, this.xhr.response.error);
          return false;
        }
      }
      if (this.callback !== null && typeof this.callback === 'function') {
        this.callback.call(this.context, this.xhr.response, this.data);
      }
    }

    /**
     * Check if 403 code of WP nonce error
     * @return {bool}
     */
  }, {
    key: "isWpNonceError",
    value: function isWpNonceError() {
      var restErrror = false;
      var ajaxErrror = false;
      // check rest error
      if (this.xhr.readyState == 4) {
        restErrror = _typeof(this.xhr.response) === 'object' && this.xhr.response !== null && this.xhr.response.hasOwnProperty('data') && this.xhr.response.data.hasOwnProperty('status') && this.xhr.response.data.status === 403;
        ajaxErrror = this.xhr.response === '-1' && this.xhr.status === 403;
      }
      // todo check AJAX error
      return restErrror || ajaxErrror;
    }

    /**
     * Get the fresh nonce and rerun the initial XHR with params
     * @param {[]} initialRequestParams
     */
  }, {
    key: "getFreshNonceAndRerunXHR",
    value: function getFreshNonceAndRerunXHR(initialRequestParams) {
      var noncePrev = '';

      // Check if initialRequestParams['headers']['X-WP-Nonce'] exists.
      if (initialRequestParams.hasOwnProperty('headers') && initialRequestParams.headers.hasOwnProperty('X-WP-Nonce')) {
        noncePrev = initialRequestParams['headers']['X-WP-Nonce'];
      }

      // Check if initialRequestParams['data']['_ajax_nonce'] exists.
      if (initialRequestParams.hasOwnProperty('data') && initialRequestParams.data.hasOwnProperty('_ajax_nonce')) {
        noncePrev = initialRequestParams['data']['_ajax_nonce'];
      }

      // Nonce is not provided. Exit.
      if (noncePrev === '') {
        return;
      }

      // prepare params for refreshing nonce
      var params = {};
      params.method = 'POST';
      params.data = {
        'spbc_remote_call_action': 'get_fresh_wpnonce',
        'plugin_name': 'antispam',
        'nonce_prev': noncePrev,
        'initial_request_params': initialRequestParams
      };
      params.notJson = true;
      params.url = ctPublicFunctions.host_url;
      // this callback will rerun the XHR with initial params
      params.callback = function () {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        // the refresh result itself
        var freshNonceResult = args[0];
        var newRequestParams = false;
        // provided initial params
        if (args[1] !== undefined && args[1].hasOwnProperty('initial_request_params')) {
          newRequestParams = args[1].initial_request_params;
        }
        if (newRequestParams && freshNonceResult.hasOwnProperty('wpnonce')) {
          ctPublicFunctions._fresh_nonce = freshNonceResult.wpnonce;
          if (ctPublicFunctions.data__ajax_type === 'rest') {
            new ApbctCore().rest(newRequestParams);
          } else {
            new ApbctCore().ajax(newRequestParams);
          }
        }
      };
      // run the nonce refreshing call
      new ApbctXhr(params);
    }

    /**
     * @param {number} httpCode
     * @param {string} statusText
     * @param {string} additionalMsg
     */
  }, {
    key: "error",
    value: function error(httpCode, statusText, additionalMsg) {
      var errorString = '';
      if (statusText === 'timeout') {
        errorString += 'Server response timeout';
      } else if (httpCode === 200) {
        if (statusText === 'parsererror') {
          errorString += 'Unexpected response from server. See console for details.';
        } else {
          errorString += 'Unexpected error. Status: ' + statusText + '.';
          if (typeof additionalMsg !== 'undefined') {
            errorString += ' Additional error info: ' + additionalMsg;
          }
        }
      } else if (httpCode === 500) {
        errorString += 'Internal server error.';
      } else {
        errorString += 'Unexpected response code:' + httpCode;
      }
      this.errorOutput(errorString);
      if (this.onErrorCallback !== null && typeof this.onErrorCallback === 'function') {
        this.onErrorCallback(this.status_text);
      }
    }

    /**
     * @param {string} errorMsg
     */
  }, {
    key: "errorOutput",
    value: function errorOutput(errorMsg) {
      console.log('%c ctXHR error: %c' + errorMsg, 'color: red;', 'color: grey;');
    }

    /**
     * setHeaders
     */
  }, {
    key: "setHeaders",
    value: function setHeaders() {
      // Set headers if passed
      for (var headerName in this.headers) {
        if (typeof this.headers[headerName] !== 'undefined') {
          this.xhr.setRequestHeader(headerName, this.headers[headerName]);
        }
      }
    }

    /**
     * @return {string|*}
     */
  }, {
    key: "convertData",
    value: function convertData() {
      // GET, HEAD request-type
      if (~this.methods_to_convert_data_to_URL.indexOf(this.method)) {
        return this.convertDataToURL();

        // POST request-type
      } else {
        return this.convertDataToBody();
      }
    }

    /**
     * @return {string}
     */
  }, {
    key: "convertDataToURL",
    value: function convertDataToURL() {
      var paramsAppendix = new URLSearchParams(this.data).toString();
      var paramsPrefix = this.url.match(/^(https?:\/{2})?[a-z0-9.]+\?/) ? '&' : '?';
      this.url += paramsPrefix + paramsAppendix;
      return this.url;
    }

    /**
     * @return {null}
     */
  }, {
    key: "convertDataToBody",
    value: function convertDataToBody() {
      this.body = new FormData();
      for (var dataKey in this.data) {
        if (Object.hasOwn(this.data, dataKey)) {
          this.body.append(dataKey, _typeof(this.data[dataKey]) === 'object' ? JSON.stringify(this.data[dataKey]) : this.data[dataKey]);
        }
      }
      return this.body;
    }

    /**
     * Recursive
     *
     * Recursively decode JSON-encoded properties
     *
     * @param {object} object
     * @return {*}
     */
  }, {
    key: "deleteDoubleJSONEncoding",
    value: function deleteDoubleJSONEncoding(object) {
      if (_typeof(object) === 'object') {
        for (var objectKey in object) {
          if (Object.hasOwn(object, objectKey)) {
            // Recursion
            if (_typeof(object[objectKey]) === 'object') {
              object[objectKey] = this.deleteDoubleJSONEncoding(object[objectKey]);
            }

            // Common case (out)
            if (typeof object[objectKey] === 'string' && object[objectKey].match(/^[\[{].*?[\]}]$/) !== null // is like JSON
            ) {
              var parsedValue = JSON.parse(object[objectKey]);
              if (_typeof(parsedValue) === 'object') {
                object[objectKey] = parsedValue;
              }
            }
          }
        }
      }
      return object;
    }
  }]);
}(); // eslint-disable-next-line require-jsdoc
var ApbctAjax = /*#__PURE__*/function (_ApbctXhr2) {
  // eslint-disable-next-line require-jsdoc
  function ApbctAjax() {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }
    _classCallCheck(this, ApbctAjax);
    args = args[0];
    args.data._ajax_nonce = selectActualNonce();
    return _callSuper(this, ApbctAjax, [args]);
  }
  _inherits(ApbctAjax, _ApbctXhr2);
  return _createClass(ApbctAjax);
}(ApbctXhr); // eslint-disable-next-line require-jsdoc
var ApbctRest = /*#__PURE__*/function (_ApbctXhr3) {
  // eslint-disable-next-line require-jsdoc
  function ApbctRest() {
    var _this;
    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      args[_key3] = arguments[_key3];
    }
    _classCallCheck(this, ApbctRest);
    args = args[0];
    var nonce = selectActualNonce();
    args.url = ApbctRest.default_route + args.route;
    args.headers = {
      'X-WP-Nonce': nonce
    };
    _this = _callSuper(this, ApbctRest, [args]);
    _defineProperty(_this, "route", '');
    return _this;
  }
  _inherits(ApbctRest, _ApbctXhr3);
  return _createClass(ApbctRest);
}(ApbctXhr); // add hasOwn
_defineProperty(ApbctRest, "default_route", ctPublicFunctions._rest_url + 'cleantalk-antispam/v1/');
if (!Object.prototype.hasOwn) {
  Object.defineProperty(Object.prototype, 'hasOwn', {
    // eslint-disable-line
    value: function value(property) {
      return Object.prototype.hasOwnProperty.call(this, property);
    },
    enumerable: false,
    configurable: true,
    writable: true
  });
}

/**
 * Class collecting user activity data
 *
 */
// eslint-disable-next-line no-unused-vars, require-jsdoc
var ApbctCollectingUserActivity = /*#__PURE__*/function () {
  /**
   * Constructor
   */
  function ApbctCollectingUserActivity() {
    _classCallCheck(this, ApbctCollectingUserActivity);
    _defineProperty(this, "elementBody", document.querySelector('body'));
    _defineProperty(this, "collectionForms", document.forms);
    this.setListeners();
  }

  /**
   * Set listeners
   */
  return _createClass(ApbctCollectingUserActivity, [{
    key: "setListeners",
    value: function setListeners() {
      var _this2 = this;
      this.elementBody.addEventListener('click', function (event) {
        _this2.checkElementInForms(event, 'addClicks');
      });
      this.elementBody.addEventListener('mouseup', function (event) {
        var selectedType = document.getSelection().type.toString();
        if (selectedType == 'Range') {
          _this2.addSelected();
        }
      });
      this.elementBody.addEventListener('mousemove', function (event) {
        _this2.checkElementInForms(event, 'trackMouseMovement');
      });
    }

    /**
     * Checking if there is an element in the form
     * @param {object} event
     * @param {string} addTarget
     */
  }, {
    key: "checkElementInForms",
    value: function checkElementInForms(event, addTarget) {
      var resultCheck;
      for (var i = 0; i < this.collectionForms.length; i++) {
        if (event.target.outerHTML.length > 0 && this.collectionForms[i].innerHTML.length > 0) {
          resultCheck = this.collectionForms[i].innerHTML.indexOf(event.target.outerHTML);
        } else {
          resultCheck = -1;
        }
      }
      switch (addTarget) {
        case 'addClicks':
          if (resultCheck < 0) {
            this.addClicks();
          }
          break;
        case 'trackMouseMovement':
          if (resultCheck > -1) {
            this.trackMouseMovement();
          }
          break;
        default:
          break;
      }
    }

    /**
     * Add clicks
     */
  }, {
    key: "addClicks",
    value: function addClicks() {
      if (document.ctCollectingUserActivityData) {
        if (document.ctCollectingUserActivityData.clicks) {
          document.ctCollectingUserActivityData.clicks++;
        } else {
          document.ctCollectingUserActivityData.clicks = 1;
        }
        return;
      }
      document.ctCollectingUserActivityData = {
        clicks: 1
      };
    }

    /**
     * Add selected
     */
  }, {
    key: "addSelected",
    value: function addSelected() {
      if (document.ctCollectingUserActivityData) {
        if (document.ctCollectingUserActivityData.selected) {
          document.ctCollectingUserActivityData.selected++;
        } else {
          document.ctCollectingUserActivityData.selected = 1;
        }
        return;
      }
      document.ctCollectingUserActivityData = {
        selected: 1
      };
    }

    /**
     * Track mouse movement
     */
  }, {
    key: "trackMouseMovement",
    value: function trackMouseMovement() {
      if (!document.ctCollectingUserActivityData) {
        document.ctCollectingUserActivityData = {};
      }
      if (!document.ctCollectingUserActivityData.mouseMovementsInsideForm) {
        document.ctCollectingUserActivityData.mouseMovementsInsideForm = false;
      }
      document.ctCollectingUserActivityData.mouseMovementsInsideForm = true;
    }
  }]);
}();
/**
 * @param {object|array|string} cookies
 * @param {object|array|string} value
 * @param {string|number} expires
 */
// eslint-disable-next-line no-unused-vars,require-jsdoc
function ctSetCookie(cookies, value, expires) {
  var listOfCookieNamesToForceAlt = ['ct_sfw_pass_key', 'ct_sfw_passed', 'wordpress_apbct_antibot', 'apbct_anticrawler_passed', 'apbct_bot_detector_exist', 'apbct_antiflood_passed', 'apbct_email_encoder_passed'];
  var skipAlt = false;
  if (typeof cookies === 'string') {
    skipAlt = cookies === 'ct_pointer_data';
    if (typeof value === 'string' || typeof value === 'number') {
      cookies = [[cookies, value, expires]];
    }
  }

  // Cookies disabled
  if (ctPublicFunctions.data__cookies_type === 'none') {
    var forcedAltCookiesSet = [];
    cookies.forEach(function (item) {
      if (listOfCookieNamesToForceAlt.indexOf(item[0]) !== -1) {
        forcedAltCookiesSet.push(item);
      } else {
        apbctLocalStorage.set(item[0], item[1]);
      }
    });

    // if cookies from list found use alt cookies for this selection set
    if (forcedAltCookiesSet.length > 0) {
      ctSetAlternativeCookie(forcedAltCookiesSet);
    }

    // If problem integration forms detected use alt cookies for whole cookies set
    if (ctPublic.force_alt_cookies && !skipAlt) {
      // do it just once
      ctSetAlternativeCookie(cookies, {
        forceAltCookies: true
      });
    } else {
      ctNoCookieAttachHiddenFieldsToForms();
    }

    // Using traditional cookies
  } else if (ctPublicFunctions.data__cookies_type === 'native') {
    // If problem integration forms detected use alt cookies for whole cookies set
    if (ctPublic.force_alt_cookies && !skipAlt) {
      // do it just once
      ctSetAlternativeCookie(cookies, {
        forceAltCookies: true
      });
    }
    cookies.forEach(function (item) {
      var _expires = typeof item[2] !== 'undefined' ? 'expires=' + expires + '; ' : '';
      var ctSecure = location.protocol === 'https:' ? '; secure' : '';
      document.cookie = ctPublicFunctions.cookiePrefix + item[0] + '=' + encodeURIComponent(item[1]) + '; ' + _expires + 'path=/; samesite=lax' + ctSecure;
    });

    // Using alternative cookies
  } else if (ctPublicFunctions.data__cookies_type === 'alternative' && !skipAlt) {
    ctSetAlternativeCookie(cookies);
  }
}

// eslint-disable-next-line no-unused-vars,require-jsdoc
function ctDetectForcedAltCookiesForms() {
  var ninjaFormsSign = document.querySelectorAll('#tmpl-nf-layout').length > 0;
  var elementorUltimateAddonsRegister = document.querySelectorAll('.uael-registration-form-wrapper').length > 0;
  var smartFormsSign = document.querySelectorAll('script[id*="smart-forms"]').length > 0;
  var jetpackCommentsForm = document.querySelectorAll('iframe[name="jetpack_remote_comment"]').length > 0;
  var cwginstockForm = document.querySelectorAll('.cwginstock-subscribe-form').length > 0;
  var userRegistrationProForm = document.querySelectorAll('div[id^="user-registration-form"]').length > 0;
  var etPbDiviSubscriptionForm = document.querySelectorAll('div[class^="et_pb_newsletter_form"]').length > 0;
  var fluentBookingApp = document.querySelectorAll('div[class^="fluent_booking_app"]').length > 0;
  var bloomPopup = document.querySelectorAll('div[class^="et_bloom_form_container"]').length > 0;
  var pafeFormsFormElementor = document.querySelectorAll('div[class*="pafe-form"]').length > 0;
  var otterForm = document.querySelectorAll('div [class*="otter-form"]').length > 0;
  var smartQuizBuilder = document.querySelectorAll('form .sqbform, .fields_reorder_enabled').length > 0;
  ctPublic.force_alt_cookies = smartFormsSign || ninjaFormsSign || jetpackCommentsForm || elementorUltimateAddonsRegister || cwginstockForm || userRegistrationProForm || etPbDiviSubscriptionForm || fluentBookingApp || pafeFormsFormElementor || bloomPopup || otterForm || smartQuizBuilder;
  setTimeout(function () {
    if (!ctPublic.force_alt_cookies) {
      var bookingPress = document.querySelectorAll('main[id^="bookingpress_booking_form"]').length > 0;
      ctPublic.force_alt_cookies = bookingPress;
    }
  }, 1000);
}

// eslint-disable-next-line require-jsdoc
function ctSetAlternativeCookie(cookies, params) {
  if (typeof getJavascriptClientData === 'function') {
    // reprocess already gained cookies data
    if (Array.isArray(cookies)) {
      cookies = getJavascriptClientData(cookies);
    }
  } else {
    console.log('APBCT ERROR: getJavascriptClientData() is not loaded');
  }
  try {
    cookies = JSON.parse(cookies);
  } catch (e) {
    console.log('APBCT ERROR: JSON parse error:' + e);
    return;
  }
  var callback = params && params.callback || null;
  var onErrorCallback = params && params.onErrorCallback || null;
  if (params && params.forceAltCookies) {
    cookies.apbct_force_alt_cookies = true;
  }

  // Using REST API handler
  if (ctPublicFunctions.data__ajax_type === 'rest') {
    // fix for url encoded cookie apbct_pixel_url on REST route
    if (typeof cookies.apbct_pixel_url === 'string' && cookies.apbct_pixel_url.indexOf('%3A') !== -1) {
      cookies.apbct_pixel_url = decodeURIComponent(cookies.apbct_pixel_url);
    }
    document.dispatchEvent(new CustomEvent('ctBotDetectorStart'));
    apbct_public_sendREST('alt_sessions', {
      method: 'POST',
      data: {
        cookies: cookies
      },
      callback: callback,
      onErrorCallback: onErrorCallback
    });
    document.dispatchEvent(new CustomEvent('ctBotDetectorResult'));
    // Using AJAX request and handler
  } else if (ctPublicFunctions.data__ajax_type === 'admin_ajax') {
    apbct_public_sendAJAX({
      action: 'apbct_alt_session__save__AJAX',
      cookies: cookies
    }, {
      notJson: 1,
      callback: callback,
      onErrorCallback: onErrorCallback,
      beforeSend: function beforeSend(xhr) {
        xhr.setRequestHeader('X-Robots-Tag', 'noindex, nofollow');
      }
    });
  }
}

/**
 * Get cookie by name
 * @param name
 * @return {string|undefined}
 */
// eslint-disable-next-line require-jsdoc,no-unused-vars
function ctGetCookie(name) {
  var matches = document.cookie.match(new RegExp('(?:^|; )' + name.replace(/([\.$?*|{}\(\)\[\]\\\/\+^])/g, '\\$1') + '=([^;]*)'));
  return matches ? decodeURIComponent(matches[1]) : undefined;
}

// eslint-disable-next-line require-jsdoc,no-unused-vars
function ctDeleteCookie(cookieName) {
  // Cookies disabled
  if (ctPublicFunctions.data__cookies_type === 'none') {
    return;

    // Using traditional cookies
  } else if (ctPublicFunctions.data__cookies_type === 'native') {
    var ctSecure = location.protocol === 'https:' ? '; secure' : '';
    document.cookie = cookieName + '=""; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/; samesite=lax' + ctSecure;

    // Using alternative cookies
  } else if (ctPublicFunctions.data__cookies_type === 'alternative') {
    // @ToDo implement this logic
  }
}

// eslint-disable-next-line require-jsdoc,camelcase
function apbct_public_sendAJAX(data, params, obj) {
  // Default params
  var _params = [];
  _params['callback'] = params.callback || null;
  _params['onErrorCallback'] = params.onErrorCallback || null;
  _params['callback_context'] = params.callback_context || null;
  _params['callback_params'] = params.callback_params || null;
  _params['async'] = params.async || true;
  _params['notJson'] = params.notJson || null;
  _params['responseType'] = params.notJson ? 'text' : 'json';
  _params['timeout'] = params.timeout || 15000;
  _params['obj'] = obj || null;
  _params['button'] = params.button || null;
  _params['spinner'] = params.spinner || null;
  _params['progressbar'] = params.progressbar || null;
  _params['silent'] = params.silent || null;
  _params['no_nonce'] = params.no_nonce || null;
  _params['data'] = data;
  _params['url'] = ctPublicFunctions._ajax_url;
  var nonce = selectActualNonce();
  if (typeof data === 'string') {
    if (!_params['no_nonce']) {
      _params['data'] = _params['data'] + '&_ajax_nonce=' + nonce;
    }
    _params['data'] = _params['data'] + '&no_cache=' + Math.random();
  } else {
    if (!_params['no_nonce']) {
      _params['data']._ajax_nonce = nonce;
    }
    _params['data'].no_cache = Math.random();
  }
  new ApbctCore().ajax(_params);
}

// eslint-disable-next-line require-jsdoc,camelcase
function apbct_public_sendREST(route, params) {
  var _params = [];
  _params['route'] = route;
  _params['callback'] = params.callback || null;
  _params['onErrorCallback'] = params.onErrorCallback || null;
  _params['data'] = params.data || [];
  _params['method'] = params.method || 'POST';
  new ApbctCore().rest(_params);
}

/**
 * Generate unique ID
 * @return {string}
 */
// eslint-disable-next-line no-unused-vars,require-jsdoc
function apbctGenerateUniqueID() {
  return Math.random().toString(36).replace(/[^a-z]+/g, '').substr(2, 10);
}
var apbctLocalStorage = {
  get: function get(key, property) {
    if (typeof property === 'undefined') {
      property = 'value';
    }
    var storageValue = localStorage.getItem(key);
    if (storageValue !== null) {
      try {
        var json = JSON.parse(storageValue);
        if (json.hasOwnProperty(property)) {
          try {
            // if property can be parsed as JSON - do it
            return JSON.parse(json[property]);
          } catch (e) {
            // if not - return string of value
            return json[property].toString();
          }
        } else {
          return json;
        }
      } catch (e) {
        return storageValue;
      }
    }
    return false;
  },
  set: function set(key, value) {
    var isJson = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
    if (isJson) {
      var objToSave = {
        'value': JSON.stringify(value),
        'timestamp': Math.floor(new Date().getTime() / 1000)
      };
      localStorage.setItem(key, JSON.stringify(objToSave));
    } else {
      localStorage.setItem(key, value);
    }
  },
  isAlive: function isAlive(key, maxLifetime) {
    if (typeof maxLifetime === 'undefined') {
      maxLifetime = 86400;
    }
    var keyTimestamp = this.get(key, 'timestamp');
    return keyTimestamp + maxLifetime > Math.floor(new Date().getTime() / 1000);
  },
  isSet: function isSet(key) {
    return localStorage.getItem(key) !== null;
  },
  delete: function _delete(key) {
    localStorage.removeItem(key);
  },
  getCleanTalkData: function getCleanTalkData() {
    var data = {};
    for (var i = 0; i < localStorage.length; i++) {
      var key = localStorage.key(i);
      if (key.indexOf('ct_') !== -1 || key.indexOf('apbct_') !== -1) {
        data[key.toString()] = apbctLocalStorage.get(key);
      }
    }
    return data;
  }
};
var apbctSessionStorage = {
  get: function get(key, property) {
    if (typeof property === 'undefined') {
      property = 'value';
    }
    var storageValue = sessionStorage.getItem(key);
    if (storageValue !== null) {
      try {
        var json = JSON.parse(storageValue);
        return json.hasOwnProperty(property) ? JSON.parse(json[property]) : json;
      } catch (e) {
        return storageValue;
      }
    }
    return false;
  },
  set: function set(key, value) {
    var isJson = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
    if (isJson) {
      var objToSave = {
        'value': JSON.stringify(value),
        'timestamp': Math.floor(new Date().getTime() / 1000)
      };
      sessionStorage.setItem(key, JSON.stringify(objToSave));
    } else {
      sessionStorage.setItem(key, value);
    }
  },
  isSet: function isSet(key) {
    return sessionStorage.getItem(key) !== null;
  },
  delete: function _delete(key) {
    sessionStorage.removeItem(key);
  },
  getCleanTalkData: function getCleanTalkData() {
    var data = {};
    for (var i = 0; i < sessionStorage.length; i++) {
      var key = sessionStorage.key(i);
      if (key.indexOf('ct_') !== -1 || key.indexOf('apbct_') !== -1) {
        data[key.toString()] = apbctSessionStorage.get(key);
      }
    }
    return data;
  }
};

/**
 * Handler for -webkit based browser that listen for a custom
 * animation create using the :pseudo-selector in the stylesheet.
 * Works with Chrome, Safari
 *
 * @param {AnimationEvent} event
 */
// eslint-disable-next-line no-unused-vars,require-jsdoc
function apbctOnAnimationStart(event) {
  'onautofillstart' === event.animationName ? apbctAutocomplete(event.target) : apbctCancelAutocomplete(event.target);
}

/**
 * Handler for non-webkit based browser that listen for input
 * event to trigger the autocomplete-cancel process.
 * Works with Firefox, Edge, IE11
 *
 * @param {InputEvent} event
 */
// eslint-disable-next-line no-unused-vars,require-jsdoc
function apbctOnInput(event) {
  'insertReplacementText' === event.inputType || !('data' in event) ? apbctAutocomplete(event.target) : apbctCancelAutocomplete(event.target);
}

/**
 * Manage an input element when its value is autocompleted
 * by the browser in the following steps:
 * - add [autocompleted] attribute from event.target
 * - create 'onautocomplete' cancelable CustomEvent
 * - dispatch the Event
 *
 * @param {HtmlInputElement} element
 */
function apbctAutocomplete(element) {
  if (element.hasAttribute('autocompleted')) return;
  element.setAttribute('autocompleted', '');
  var event = new window.CustomEvent('onautocomplete', {
    bubbles: true,
    cancelable: true,
    detail: null
  });

  // no autofill if preventDefault is called
  if (!element.dispatchEvent(event)) {
    element.value = '';
  }
}

/**
 * Manage an input element when its autocompleted value is
 * removed by the browser in the following steps:
 * - remove [autocompleted] attribute from event.target
 * - create 'onautocomplete' non-cancelable CustomEvent
 * - dispatch the Event
 *
 * @param {HtmlInputElement} element
 */
function apbctCancelAutocomplete(element) {
  if (!element.hasAttribute('autocompleted')) return;
  element.removeAttribute('autocompleted');

  // dispatch event
  element.dispatchEvent(new window.CustomEvent('onautocomplete', {
    bubbles: true,
    cancelable: false,
    detail: null
  }));
}

/**
 * ApbctForceProtection
 */
var ApbctForceProtection = /*#__PURE__*/function () {
  /**
   * Constructor
   */
  function ApbctForceProtection() {
    _classCallCheck(this, ApbctForceProtection);
    _defineProperty(this, "wrappers", []);
    this.wrappers = this.findWrappers();
    if (this.wrappers.length < 1) {
      return;
    }
    this.checkBot();
  }

  /**
   * Find wrappers
   * @return {HTMLElement[]}
   */
  return _createClass(ApbctForceProtection, [{
    key: "findWrappers",
    value: function findWrappers() {
      return document.querySelectorAll('div.ct-encoded-form-wrapper');
    }

    /**
     * Check bot
     * @return {void}
     */
  }, {
    key: "checkBot",
    value: function checkBot() {
      var _this3 = this;
      var data = {
        event_javascript_data: getJavascriptClientData(),
        post_url: document.location.href,
        referrer: document.referrer
      };
      if (ctPublicFunctions.data__ajax_type === 'rest') {
        apbct_public_sendREST('force_protection_check_bot', {
          data: data,
          method: 'POST',
          callback: function callback(result) {
            return _this3.checkBotCallback(result);
          }
        });
      } else if (ctPublicFunctions.data__ajax_type === 'admin_ajax') {
        data.action = 'apbct_force_protection_check_bot';
        apbct_public_sendAJAX(data, {
          callback: function callback(result) {
            return _this3.checkBotCallback(result);
          }
        });
      }
    }

    /**
     * Check bot callback
     * @param {Object} result
     * @return {void}
     */
  }, {
    key: "checkBotCallback",
    value: function checkBotCallback(result) {
      // if error occurred
      if (result.data && result.data.status && result.data.status !== 200) {
        console.log('ApbctForceProtection connection error occurred');
        this.decodeForms();
        return;
      }
      if (typeof result === 'string') {
        try {
          result = JSON.parse(result);
        } catch (e) {
          console.log('ApbctForceProtection decodeForms error', e);
          this.decodeForms();
          return;
        }
      }
      if (_typeof(result) === 'object' && result.allow && result.allow === 1) {
        this.decodeForms();
        document.dispatchEvent(new Event('apbctForceProtectionAllowed'));
      } else {
        this.showMessageForBot(result.message);
      }
    }

    /**
     * Decode forms
     * @return {void}
     */
  }, {
    key: "decodeForms",
    value: function decodeForms() {
      var form;
      this.wrappers.forEach(function (wrapper) {
        form = wrapper.querySelector('div.ct-encoded-form').dataset.encodedForm;
        try {
          if (form && typeof form == 'string') {
            wrapper.outerHTML = atob(form);
          }
        } catch (error) {
          console.log(error);
        }
      });
    }

    /**
     * Show message for bot
     * @param {string} message
     * @return {void}
     */
  }, {
    key: "showMessageForBot",
    value: function showMessageForBot(message) {
      var form;
      this.wrappers.forEach(function (wrapper) {
        form = wrapper.querySelector('div.ct-encoded-form').dataset.encodedForm;
        if (form) {
          wrapper.outerHTML = '<div class="ct-encoded-form-forbidden">' + message + '</div>';
        }
      });
    }
  }]);
}();
/**
 * Force protection
 */
function apbctForceProtect() {
  if (ctPublic.settings__forms__force_protection && typeof ApbctForceProtection !== 'undefined') {
    new ApbctForceProtection();
  }
}
if (ctPublic.data__key_is_ok) {
  if (document.readyState !== 'loading') {
    apbctForceProtect();
  } else {
    apbct_attach_event_handler(document, 'DOMContentLoaded', apbctForceProtect);
  }
}

/**
 * Class for gathering data about user typing.
 *
 * ==============================
 * isAutoFill       - only person can use auto fill
 * isUseBuffer      - use buffer for fill current field
 * ==============================
 * lastKeyTimestamp - timestamp of last key press in current field
 * speedDelta       - change for each key press in current field,
 *                    as difference between current and previous key press timestamps,
 *                    robots in general have constant speed of typing.
 *                    If speedDelta is constant for each key press in current field,
 *                    so, speedDelta will be roughly to 0, then it is robot.
 * ==============================
 */
// eslint-disable-next-line no-unused-vars,require-jsdoc
var CTTypoData = /*#__PURE__*/function () {
  function CTTypoData() {
    _classCallCheck(this, CTTypoData);
    _defineProperty(this, "fieldData", {
      isAutoFill: false,
      isUseBuffer: false,
      speedDelta: 0,
      firstKeyTimestamp: 0,
      lastKeyTimestamp: 0,
      lastDelta: 0,
      countOfKey: 0
    });
    _defineProperty(this, "fields", document.querySelectorAll('textarea[name=comment]'));
    _defineProperty(this, "data", []);
  }
  return _createClass(CTTypoData, [{
    key: "gatheringFields",
    value:
    /**
     * Gather fields.
     */
    function gatheringFields() {
      var _this4 = this;
      var fieldSet = Array.prototype.slice.call(this.fields);
      fieldSet.forEach(function (field, i) {
        _this4.data.push(Object.assign({}, _this4.fieldData));
      });
    }

    /**
     * Set listeners.
     */
  }, {
    key: "setListeners",
    value: function setListeners() {
      var _this5 = this;
      this.fields.forEach(function (field, i) {
        field.addEventListener('paste', function () {
          _this5.data[i].isUseBuffer = true;
        });
      });
      this.fields.forEach(function (field, i) {
        field.addEventListener('onautocomplete', function () {
          _this5.data[i].isAutoFill = true;
        });
      });
      this.fields.forEach(function (field, i) {
        field.addEventListener('input', function () {
          _this5.data[i].countOfKey++;
          var time = +new Date();
          var currentDelta = 0;
          if (_this5.data[i].countOfKey === 1) {
            _this5.data[i].lastKeyTimestamp = time;
            _this5.data[i].firstKeyTimestamp = time;
            return;
          }
          currentDelta = time - _this5.data[i].lastKeyTimestamp;
          if (_this5.data[i].countOfKey === 2) {
            _this5.data[i].lastKeyTimestamp = time;
            _this5.data[i].lastDelta = currentDelta;
            return;
          }
          if (_this5.data[i].countOfKey > 2) {
            _this5.data[i].speedDelta += Math.abs(_this5.data[i].lastDelta - currentDelta);
            _this5.data[i].lastKeyTimestamp = time;
            _this5.data[i].lastDelta = currentDelta;
          }
        });
      });
    }
  }]);
}(); // eslint-disable-next-line camelcase
var ctDate = new Date();
var ctTimeMs = new Date().getTime();
var ctMouseEventTimerFlag = true; // Reading interval flag
var ctMouseData = [];
var ctMouseDataCounter = 0;
var ctCheckedEmails = {};
var ctCheckedEmailsExist = {};
var ctMouseReadInterval;
var ctMouseWriteDataInterval;
var tokenCheckerIntervalId;
var botDetectorLogLastUpdate = 0;
var botDetectorLogEventTypesCollected = [];

// eslint-disable-next-line require-jsdoc,camelcase
function apbct_attach_event_handler(elem, event, callback) {
  if (typeof window.addEventListener === 'function') elem.addEventListener(event, callback);else elem.attachEvent(event, callback);
}
// eslint-disable-next-line require-jsdoc,camelcase
function apbct_remove_event_handler(elem, event, callback) {
  if (typeof window.removeEventListener === 'function') elem.removeEventListener(event, callback);else elem.detachEvent(event, callback);
}

// Writing first key press timestamp
var ctFunctionFirstKey = function output(event) {
  var KeyTimestamp = Math.floor(new Date().getTime() / 1000);
  ctSetCookie('ct_fkp_timestamp', KeyTimestamp);
  ctKeyStopStopListening();
};

/**
 * Run cron jobs
 */
// forms handler cron
cronFormsHandler(2000);

// bot_detector frontend_data log alt session saving cron
if (ctPublicFunctions.hasOwnProperty('data__bot_detector_enabled') && ctPublicFunctions.data__bot_detector_enabled == 1 && ctPublicFunctions.hasOwnProperty('data__frontend_data_log_enabled') && ctPublicFunctions.data__frontend_data_log_enabled == 1) {
  sendBotDetectorLogToAltSessions(1000);
}
/**
 * Cron jobs end.
 */

// mouse read
if (ctPublic.data__key_is_ok) {
  // Reading interval
  ctMouseReadInterval = setInterval(function () {
    ctMouseEventTimerFlag = true;
  }, 150);

  // Writting interval
  ctMouseWriteDataInterval = setInterval(function () {
    ctSetCookie('ct_pointer_data', JSON.stringify(ctMouseData));
  }, 1200);
}

// Logging mouse position each 150 ms
var ctFunctionMouseMove = function output(event) {
  ctSetMouseMoved();
  if (ctMouseEventTimerFlag === true) {
    ctMouseData.push([Math.round(event.clientY), Math.round(event.clientX), Math.round(new Date().getTime() - ctTimeMs)]);
    ctMouseDataCounter++;
    ctMouseEventTimerFlag = false;
    if (ctMouseDataCounter >= 50) {
      ctMouseStopData();
    }
  }
};

/**
 * Do handle periodical actions.
 * @param {int} cronStartTimeout Time to go before cron start.
 */
function cronFormsHandler() {
  var cronStartTimeout = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 2000;
  setTimeout(function () {
    setInterval(function () {
      restartFieldsListening();
      restartBotDetectorEventTokenAttach();
    }, 2000);
  }, cronStartTimeout);
}

/**
 * Send BotDetector logs data to alternative sessions.
 * If log_last_update has changed and log contains new event types, the log will be sent to the alternative sessions.
 * @param {int} cronStartTimeout delay before cron start
 * @param {int} interval check fires on interval
 */
function sendBotDetectorLogToAltSessions() {
  var cronStartTimeout = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 3000;
  var interval = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1000;
  setTimeout(function () {
    setInterval(function () {
      var currentLog = apbctLocalStorage.get('ct_bot_detector_frontend_data_log');
      if (needsSaveLogToAltSessions(currentLog)) {
        botDetectorLogLastUpdate = currentLog.log_last_update;
        // the log will be taken from javascriptclientdata
        ctSetAlternativeCookie([], {
          forceAltCookies: true
        });
      }
    }, interval);
  }, cronStartTimeout);
}

/**
 * Check if the log needs to be saved to the alt sessions. If the log has new event types, it will be saved.
 * @param {object} currentLog
 * @return {boolean}
 */
function needsSaveLogToAltSessions(currentLog) {
  if (currentLog && currentLog.hasOwnProperty('log_last_update') && botDetectorLogLastUpdate !== currentLog.log_last_update) {
    try {
      for (var i = 0; i < currentLog.records.length; i++) {
        var currentType = currentLog.records[i].frontend_data.js_event;
        // check if this event type was already collected
        if (currentType !== undefined && botDetectorLogEventTypesCollected.includes(currentType)) {
          continue;
        }
        // add new event type to collection, this type will be sent to the alt sessions further
        botDetectorLogEventTypesCollected.push(currentType);
        return true;
      }
    } catch (e) {
      console.log('APBCT: bot detector log collection error: '.e.toString());
    }
  }
  return false;
}

/**
 * Restart event_token attachment if some forms load after document ready.
 */
function restartBotDetectorEventTokenAttach() {
  // List there any new conditions, right now it works only for LatePoint forms.
  // Probably, we can remove this condition at all, because setEventTokenField()
  // checks all the forms without the field
  var doAttach = document.getElementsByClassName('latepoint-form').length > 0 || document.getElementsByClassName('mec-booking-form-container').length > 0 || document.getElementById('login-form-popup') !== null;
  try {
    if (doAttach) {
      // get token from LS
      var token = apbctLocalStorage.get('bot_detector_event_token');
      if (typeof setEventTokenField === 'function' && token !== undefined && token.length === 64) {
        setEventTokenField(token);
      }
      // probably there we could use a new botDetectorInit if token is not found
    }
  } catch (e) {
    console.log(e.toString());
  }
}

/**
 * Stop mouse observing function
 */
function ctMouseStopData() {
  apbct_remove_event_handler(document, 'mousemove', ctFunctionMouseMove);
  clearInterval(ctMouseReadInterval);
  clearInterval(ctMouseWriteDataInterval);
}

/**
 * Stop key listening function
 */
function ctKeyStopStopListening() {
  apbct_remove_event_handler(document, 'mousedown', ctFunctionFirstKey);
  apbct_remove_event_handler(document, 'keydown', ctFunctionFirstKey);
}

/**
 * @param {mixed} e
 */
function checkEmail(e) {
  var currentEmail = e.target.value;
  if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(currentEmail)) {
    return;
  }
  if (currentEmail && !(currentEmail in ctCheckedEmails)) {
    // Using REST API handler
    if (ctPublicFunctions.data__ajax_type === 'rest') {
      apbct_public_sendREST('check_email_before_post', {
        method: 'POST',
        data: {
          'email': currentEmail
        },
        callback: function callback(result) {
          if (result.result) {
            ctCheckedEmails[currentEmail] = {
              'result': result.result,
              'timestamp': Date.now() / 1000 | 0
            };
            ctSetCookie('ct_checked_emails', JSON.stringify(ctCheckedEmails));
          }
        }
      });
      // Using AJAX request and handler
    } else if (ctPublicFunctions.data__ajax_type === 'admin_ajax') {
      apbct_public_sendAJAX({
        action: 'apbct_email_check_before_post',
        email: currentEmail
      }, {
        callback: function callback(result) {
          if (result.result) {
            ctCheckedEmails[currentEmail] = {
              'result': result.result,
              'timestamp': Date.now() / 1000 | 0
            };
            ctSetCookie('ct_checked_emails', JSON.stringify(ctCheckedEmails));
          }
        }
      });
    }
  }
}

/**
 * @param {mixed} e
 */
function checkEmailExist(e) {
  var currentEmail = e.target.value;
  var result;
  if (!currentEmail || !currentEmail.length) {
    var envelope = document.getElementById('apbct-check_email_exist-block');
    if (envelope) {
      envelope.remove();
    }
    var hint = document.getElementById('apbct-check_email_exist-popup_description');
    if (hint) {
      hint.remove();
    }
    return;
  }
  if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(currentEmail)) {
    return;
  }
  if (currentEmail in ctCheckedEmailsExist) {
    result = ctCheckedEmailsExist[currentEmail];
    getResultCheckEmailExist(e, result, currentEmail);
    return;
  }
  viewCheckEmailExist(e, 'load');

  // Using REST API handler
  ctPublicFunctions.data__ajax_type = 'rest';
  if (ctPublicFunctions.data__ajax_type === 'rest') {
    apbct_public_sendREST('check_email_exist_post', {
      method: 'POST',
      data: {
        'email': currentEmail
      },
      callback: function callback(result) {
        getResultCheckEmailExist(e, result, currentEmail);
      }
    });
    return;
  }
  if (ctPublicFunctions.data__ajax_type === 'admin_ajax') {
    apbct_public_sendAJAX({
      action: 'apbct_email_check_exist_post',
      email: currentEmail
    }, {
      callback: function callback(result) {
        getResultCheckEmailExist(e, result, currentEmail);
      }
    });
  }
}

/**
 * @param {mixed} e
 * @param {mixed} result
 * @param {string} currentEmail
 */
function getResultCheckEmailExist(e, result, currentEmail) {
  if (!result || !result.result) {
    return;
  }
  result = result.result;
  ctCheckedEmailsExist[currentEmail] = {
    'result': result,
    'timestamp': Date.now() / 1000 | 0
  };
  if (result.result == 'EXISTS') {
    viewCheckEmailExist(e, 'good_email', result.text_result);
  } else {
    viewCheckEmailExist(e, 'bad_email', result.text_result);
  }
  ctSetCookie('ct_checked_emails_exist', JSON.stringify(ctCheckedEmailsExist));
}

/**
 * @param {mixed} e
 * @param {string} state
 * @param {string} textResult
 */
function viewCheckEmailExist(e, state, textResult) {
  var parentElement = e.target.parentElement;
  var inputEmail = parentElement.querySelector('[name*="email"]');
  if (!inputEmail) {
    return;
  }
  var envelope;
  var hint;

  // envelope
  if (document.getElementById('apbct-check_email_exist-block')) {
    envelope = document.getElementById('apbct-check_email_exist-block');
  } else {
    envelope = document.createElement('div');
    envelope.setAttribute('class', 'apbct-check_email_exist-block');
    envelope.setAttribute('id', 'apbct-check_email_exist-block');
    window.addEventListener('scroll', function () {
      envelope.style.top = inputEmail.getBoundingClientRect().top + 'px';
    });
    parentElement.after(envelope);
  }

  // hint
  if (document.getElementById('apbct-check_email_exist-popup_description')) {
    hint = document.getElementById('apbct-check_email_exist-popup_description');
  } else {
    hint = document.createElement('div');
    hint.setAttribute('class', 'apbct-check_email_exist-popup_description');
    hint.setAttribute('id', 'apbct-check_email_exist-popup_description');
    window.addEventListener('scroll', function () {
      hint.style.top = envelope.getBoundingClientRect().top + 'px';
    });
    envelope.after(hint);
  }
  ctEmailExistSetElementsPositions();
  window.addEventListener('resize', function (event) {
    ctEmailExistSetElementsPositions();
  });
  switch (state) {
    case 'load':
      envelope.classList.remove('apbct-check_email_exist-good_email', 'apbct-check_email_exist-bad_email');
      envelope.classList.add('apbct-check_email_exist-load');
      break;
    case 'good_email':
      envelope.classList.remove('apbct-check_email_exist-load', 'apbct-check_email_exist-bad_email');
      envelope.classList.add('apbct-check_email_exist-good_email');
      envelope.onmouseover = function () {
        hint.textContent = textResult;
        hint.style.display = 'block';
        hint.style.top = inputEmail.getBoundingClientRect().top - hint.getBoundingClientRect().height + 'px';
        hint.style.color = '#1C7129';
      };
      envelope.onmouseout = function () {
        hint.style.display = 'none';
      };
      break;
    case 'bad_email':
      envelope.classList.remove('apbct-check_email_exist-load', 'apbct-check_email_exist-good_email');
      envelope.classList.add('apbct-check_email_exist-bad_email');
      envelope.onmouseover = function () {
        hint.textContent = textResult;
        hint.style.display = 'block';
        hint.style.top = inputEmail.getBoundingClientRect().top - hint.getBoundingClientRect().height + 'px';
        hint.style.color = '#E01111';
      };
      envelope.onmouseout = function () {
        hint.style.display = 'none';
      };
      break;
    default:
      break;
  }
}

/**
 * Shift the envelope to the input field on resizing the window
 * @param {object} envelope
 * @param {object} inputEmail
 */
function ctEmailExistSetElementsPositions() {
  var envelopeWidth = 35;
  var inputEmail = document.querySelector('comment-form input[name*="email"], input#email');
  if (!inputEmail) {
    return;
  }
  var envelope = document.getElementById('apbct-check_email_exist-block');
  if (envelope) {
    envelope.style.top = inputEmail.getBoundingClientRect().top + 'px';
    envelope.style.left = inputEmail.getBoundingClientRect().right - envelopeWidth - 10 + 'px';
    envelope.style.height = inputEmail.offsetHeight + 'px';
    envelope.style.width = envelopeWidth + 'px';
  }
  var hint = document.getElementById('apbct-check_email_exist-popup_description');
  if (hint) {
    hint.style.width = inputEmail.offsetWidth + 'px';
    hint.style.left = inputEmail.getBoundingClientRect().left + 'px';
  }
}

/**
 * @return {bool}
 */
function ctIsDrawPixel() {
  if (ctPublic.pixel__setting == '3' && ctPublic.settings__data__bot_detector_enabled == '1') {
    return false;
  }
  return +ctPublic.pixel__enabled || ctPublic.data__cookies_type === 'none' && document.querySelectorAll('img#apbct_pixel').length === 0 || ctPublic.data__cookies_type === 'alternative' && document.querySelectorAll('img#apbct_pixel').length === 0;
}

/**
 * @param {string} pixelUrl
 * @return {bool}
 */
function ctSetPixelImg(pixelUrl) {
  if (ctPublic.pixel__setting == '3' && ctPublic.settings__data__bot_detector_enabled == '1') {
    return false;
  }
  ctSetCookie('apbct_pixel_url', pixelUrl);
  if (ctIsDrawPixel()) {
    if (!document.getElementById('apbct_pixel')) {
      var insertedImg = document.createElement('img');
      insertedImg.setAttribute('alt', 'CleanTalk Pixel');
      insertedImg.setAttribute('title', 'CleanTalk Pixel');
      insertedImg.setAttribute('id', 'apbct_pixel');
      insertedImg.setAttribute('style', 'display: none; left: 99999px;');
      insertedImg.setAttribute('src', pixelUrl);
      apbct('body').append(insertedImg);
    }
  }
}

/**
 * @param {string} pixelUrl
 * @return {bool}
 */
function ctSetPixelImgFromLocalstorage(pixelUrl) {
  if (ctPublic.pixel__setting == '3' && ctPublic.settings__data__bot_detector_enabled == '1') {
    return false;
  }
  if (ctIsDrawPixel()) {
    if (!document.getElementById('apbct_pixel')) {
      var insertedImg = document.createElement('img');
      insertedImg.setAttribute('alt', 'CleanTalk Pixel');
      insertedImg.setAttribute('title', 'CleanTalk Pixel');
      insertedImg.setAttribute('id', 'apbct_pixel');
      insertedImg.setAttribute('style', 'display: none; left: 99999px;');
      insertedImg.setAttribute('src', decodeURIComponent(pixelUrl));
      apbct('body').append(insertedImg);
    }
  }
}

/**
 * ctGetPixelUrl
 * @return {bool}
 */
function ctGetPixelUrl() {
  if (ctPublic.pixel__setting == '3' && ctPublic.settings__data__bot_detector_enabled == '1') {
    return false;
  }

  // Check if pixel is already in localstorage and is not outdated
  var localStoragePixelUrl = apbctLocalStorage.get('apbct_pixel_url');
  if (localStoragePixelUrl !== false) {
    if (!apbctLocalStorage.isAlive('apbct_pixel_url', 3600 * 3)) {
      apbctLocalStorage.delete('apbct_pixel_url');
    } else {
      // if so - load pixel from localstorage and draw it skipping AJAX
      ctSetPixelImgFromLocalstorage(localStoragePixelUrl);
      return;
    }
  }
  // Using REST API handler
  if (ctPublicFunctions.data__ajax_type === 'rest') {
    apbct_public_sendREST('apbct_get_pixel_url', {
      method: 'POST',
      callback: function callback(result) {
        if (result && (typeof result === 'string' || result instanceof String) && result.indexOf('https') === 0) {
          // set  pixel url to localstorage
          if (!apbctLocalStorage.get('apbct_pixel_url')) {
            // set pixel to the storage
            apbctLocalStorage.set('apbct_pixel_url', result);
            // update pixel data in the hidden fields
            ctNoCookieAttachHiddenFieldsToForms();
          }
          // then run pixel drawing
          ctSetPixelImg(result);
        }
      }
    });
    // Using AJAX request and handler
  } else {
    apbct_public_sendAJAX({
      action: 'apbct_get_pixel_url'
    }, {
      notJson: true,
      callback: function callback(result) {
        if (result && (typeof result === 'string' || result instanceof String) && result.indexOf('https') === 0) {
          // set  pixel url to localstorage
          if (!apbctLocalStorage.get('apbct_pixel_url')) {
            // set pixel to the storage
            apbctLocalStorage.set('apbct_pixel_url', result);
            // update pixel data in the hidden fields
            ctNoCookieAttachHiddenFieldsToForms();
          }
          // then run pixel drawing
          ctSetPixelImg(result);
        }
      },
      beforeSend: function beforeSend(xhr) {
        xhr.setRequestHeader('X-Robots-Tag', 'noindex, nofollow');
      }
    });
  }
}

/**
 * ctSetHasScrolled
 */
function ctSetHasScrolled() {
  if (!apbctLocalStorage.isSet('ct_has_scrolled') || !apbctLocalStorage.get('ct_has_scrolled')) {
    ctSetCookie('ct_has_scrolled', 'true');
    apbctLocalStorage.set('ct_has_scrolled', true);
  }
  if (ctPublic.data__cookies_type === 'native' && ctGetCookie('ct_has_scrolled') === undefined) {
    ctSetCookie('ct_has_scrolled', 'true');
  }
}

/**
 * ctSetMouseMoved
 */
function ctSetMouseMoved() {
  if (!apbctLocalStorage.isSet('ct_mouse_moved') || !apbctLocalStorage.get('ct_mouse_moved')) {
    ctSetCookie('ct_mouse_moved', 'true');
    apbctLocalStorage.set('ct_mouse_moved', true);
  }
  if (ctPublic.data__cookies_type === 'native' && ctGetCookie('ct_mouse_moved') === undefined) {
    ctSetCookie('ct_mouse_moved', 'true');
  }
}

/**
 * Restart listen fields to set ct_has_input_focused or ct_has_key_up
 */
function restartFieldsListening() {
  if (!apbctLocalStorage.isSet('ct_has_input_focused') && !apbctLocalStorage.isSet('ct_has_key_up')) {
    ctStartFieldsListening();
  }
}

/**
 * init listeners for keyup and focus events
 */
function ctStartFieldsListening() {
  if ((apbctLocalStorage.isSet('ct_has_key_up') || apbctLocalStorage.get('ct_has_key_up')) && (apbctLocalStorage.isSet('ct_has_input_focused') || apbctLocalStorage.get('ct_has_input_focused')) && ctPublic.data__cookies_type === 'native' && ctGetCookie('ct_has_input_focused') !== undefined && ctGetCookie('ct_has_key_up') !== undefined) {
    // already set
    return;
  }
  var forms = ctGetPageForms();
  ctPublic.handled_fields = [];
  if (forms.length > 0) {
    for (var i = 0; i < forms.length; i++) {
      // handle only inputs and textareas
      var handledFormFields = forms[i].querySelectorAll('input,textarea');
      for (var _i2 = 0; _i2 < handledFormFields.length; _i2++) {
        if (handledFormFields[_i2].type !== 'hidden') {
          // collect handled fields to remove handler in the future
          ctPublic.handled_fields.push(handledFormFields[_i2]);
          // do attach handlers
          apbct_attach_event_handler(handledFormFields[_i2], 'focus', ctFunctionHasInputFocused);
          apbct_attach_event_handler(handledFormFields[_i2], 'keyup', ctFunctionHasKeyUp);
        }
      }
    }
  }
}

/**
 * stop listening keyup and focus
 * @param {string} eventName
 * @param {string} functionName
 */
function ctStopFieldsListening(eventName, functionName) {
  if (typeof ctPublic.handled_fields !== 'undefined' && ctPublic.handled_fields.length > 0) {
    for (var i = 0; i < ctPublic.handled_fields.length; i++) {
      apbct_remove_event_handler(ctPublic.handled_fields[i], eventName, functionName);
    }
  }
}
var ctFunctionHasInputFocused = function output(event) {
  ctSetHasInputFocused();
  ctStopFieldsListening('focus', ctFunctionHasInputFocused);
};
var ctFunctionHasKeyUp = function output(event) {
  ctSetHasKeyUp();
  ctStopFieldsListening('keyup', ctFunctionHasKeyUp);
};

/**
 * set ct_has_input_focused ct_has_key_up cookies on session period
 */
function ctSetHasInputFocused() {
  if (!apbctLocalStorage.isSet('ct_has_input_focused') || !apbctLocalStorage.get('ct_has_input_focused')) {
    apbctLocalStorage.set('ct_has_input_focused', true);
  }
  if (ctPublic.data__cookies_type === 'native' && ctGetCookie('ct_has_input_focused') === undefined || ctPublic.data__cookies_type === 'alternative' || ctPublic.data__cookies_type === 'none' && (typeof ctPublic.force_alt_cookies !== 'undefined' || ctPublic.force_alt_cookies !== undefined && ctPublic.force_alt_cookies)) {
    ctSetCookie('ct_has_input_focused', 'true');
  }
}

/**
 * ctSetHasKeyUp
 */
function ctSetHasKeyUp() {
  if (!apbctLocalStorage.isSet('ct_has_key_up') || !apbctLocalStorage.get('ct_has_key_up')) {
    apbctLocalStorage.set('ct_has_key_up', true);
  }
  if (ctPublic.data__cookies_type === 'native' && ctGetCookie('ct_has_key_up') === undefined || ctPublic.data__cookies_type === 'alternative' || ctPublic.data__cookies_type === 'none' && (typeof ctPublic.force_alt_cookies !== 'undefined' || ctPublic.force_alt_cookies !== undefined && ctPublic.force_alt_cookies)) {
    ctSetCookie('ct_has_key_up', 'true');
  }
}
if (ctPublic.data__key_is_ok) {
  apbct_attach_event_handler(document, 'mousemove', ctFunctionMouseMove);
  apbct_attach_event_handler(document, 'mousedown', ctFunctionFirstKey);
  apbct_attach_event_handler(document, 'keydown', ctFunctionFirstKey);
  apbct_attach_event_handler(document, 'scroll', ctSetHasScrolled);
}

/**
 * Prepare block to intercept AJAX response
 */
function apbctPrepareBlockForAjaxForms() {
  // eslint-disable-next-line require-jsdoc
  function ctPrepareBlockMessage(xhr) {
    if (xhr.responseText && xhr.responseText.indexOf('"apbct') !== -1 && xhr.responseText.indexOf('DOCTYPE') === -1) {
      try {
        ctParseBlockMessage(JSON.parse(xhr.responseText));
      } catch (e) {
        console.log(e.toString());
      }
    }
  }
  if (typeof jQuery !== 'undefined') {
    // Capturing responses and output block message for unknown AJAX forms
    if (typeof jQuery(document).ajaxComplete() !== 'function') {
      jQuery(document).on('ajaxComplete', function (event, xhr, settings) {
        ctPrepareBlockMessage(xhr);
      });
    } else {
      jQuery(document).ajaxComplete(function (event, xhr, settings) {
        ctPrepareBlockMessage(xhr);
      });
    }
  } else {
    // if Jquery is not avaliable try to use xhr
    if (typeof XMLHttpRequest !== 'undefined') {
      // Capturing responses and output block message for unknown AJAX forms
      document.addEventListener('readystatechange', function (event) {
        if (event.target.readyState === 4) {
          ctPrepareBlockMessage(event.target);
        }
      });
    }
  }
}

/**
 * For forced alt cookies.
 * If token is not added to the LS on apbc_ready, check every second if so and send token to the alt sessions.
 */
function startForcedAltEventTokenChecker() {
  tokenCheckerIntervalId = setInterval(function () {
    if (apbctLocalStorage.get('event_token_forced_set') === '1') {
      clearInterval(tokenCheckerIntervalId);
      return;
    }
    var eventToken = apbctLocalStorage.get('bot_detector_event_token');
    if (eventToken) {
      ctSetAlternativeCookie([['ct_bot_detector_event_token', eventToken]], {
        forceAltCookies: true
      });
      apbctLocalStorage.set('event_token_forced_set', '1');
      clearInterval(tokenCheckerIntervalId);
    } else {}
  }, 1000);
}

/**
 * Ready function
 */
// eslint-disable-next-line camelcase,require-jsdoc
function apbct_ready() {
  document.addEventListener('gform_page_loaded', function () {
    if (typeof ctPublic.force_alt_cookies === 'undefined' || ctPublic.force_alt_cookies !== 'undefined' && !ctPublic.force_alt_cookies) {
      ctNoCookieAttachHiddenFieldsToForms();
      if (typeof setEventTokenField === 'function' && typeof botDetectorLocalStorage === 'function') {
        setEventTokenField(botDetectorLocalStorage.get('bot_detector_event_token'));
      }
    }
  });
  if (!ctPublic.wc_ajax_add_to_cart) {
    apbctCheckAddToCartByGet();
  }
  apbctPrepareBlockForAjaxForms();

  // set session ID
  if (!apbctSessionStorage.isSet('apbct_session_id')) {
    var sessionID = apbctGenerateUniqueID();
    apbctSessionStorage.set('apbct_session_id', sessionID, false);
    apbctLocalStorage.set('apbct_page_hits', 1);
    if (document.referrer) {
      var urlReferer = new URL(document.referrer);
      if (urlReferer.host !== location.host) {
        apbctSessionStorage.set('apbct_site_referer', document.referrer, false);
      }
    }
  } else {
    apbctLocalStorage.set('apbct_page_hits', Number(apbctLocalStorage.get('apbct_page_hits')) + 1);
  }
  apbctWriteReferrersToSessionStorage();
  var cookiesType = apbctLocalStorage.get('ct_cookies_type');
  if (!cookiesType || cookiesType !== ctPublic.data__cookies_type) {
    apbctLocalStorage.set('ct_cookies_type', ctPublic.data__cookies_type);
    apbctLocalStorage.delete('ct_mouse_moved');
    apbctLocalStorage.delete('ct_has_scrolled');
  }
  if (ctPublic.data__cookies_type !== 'alternative') {
    ctStartFieldsListening();
    // 2nd try to add listeners for delayed appears forms
    setTimeout(ctStartFieldsListening, 1000);
  }
  window.addEventListener('animationstart', apbctOnAnimationStart, true);
  window.addEventListener('input', apbctOnInput, true);
  document.ctTypoData = new CTTypoData();
  document.ctTypoData.gatheringFields();
  document.ctTypoData.setListeners();

  // Collect scrolling info
  var initCookies = [['ct_ps_timestamp', Math.floor(new Date().getTime() / 1000)], ['ct_fkp_timestamp', '0'], ['ct_pointer_data', '0'],
  // eslint-disable-next-line camelcase
  ['ct_timezone', ctDate.getTimezoneOffset() / 60 * -1], ['ct_screen_info', apbctGetScreenInfo()], ['apbct_headless', navigator.webdriver]];
  apbctLocalStorage.set('ct_ps_timestamp', Math.floor(new Date().getTime() / 1000));
  apbctLocalStorage.set('ct_fkp_timestamp', '0');
  apbctLocalStorage.set('ct_pointer_data', '0');
  // eslint-disable-next-line camelcase
  apbctLocalStorage.set('ct_timezone', ctDate.getTimezoneOffset() / 60 * -1);
  apbctLocalStorage.set('ct_screen_info', apbctGetScreenInfo());
  apbctLocalStorage.set('apbct_headless', navigator.webdriver);
  if (ctPublic.data__cookies_type !== 'native') {
    initCookies.push(['apbct_visible_fields', '0']);
  } else {
    // Delete all visible fields cookies on load the page
    var cookiesArray = document.cookie.split(';');
    if (cookiesArray.length !== 0) {
      for (var i = 0; i < cookiesArray.length; i++) {
        var currentCookie = cookiesArray[i].trim();
        var cookieName = currentCookie.split('=')[0];
        if (cookieName.indexOf('apbct_visible_fields_') === 0) {
          ctDeleteCookie(cookieName);
        }
      }
    }
  }
  if (+ctPublic.pixel__setting && !(+ctPublic.pixel__setting == 3 && ctPublic.settings__data__bot_detector_enabled == 1)) {
    if (ctIsDrawPixel()) {
      ctGetPixelUrl();
    } else {
      initCookies.push(['apbct_pixel_url', ctPublic.pixel__url]);
    }
  }
  if (+ctPublic.data__email_check_before_post) {
    initCookies.push(['ct_checked_emails', '0']);
    apbct('input[type = \'email\'], #email').on('blur', checkEmail);
  }
  if (+ctPublic.data__email_check_exist_post) {
    initCookies.push(['ct_checked_emails_exist', '0']);
    apbct('comment-form input[name = \'email\'], input#email').on('blur', checkEmailExist);
  }
  if (apbctLocalStorage.isSet('ct_checkjs')) {
    initCookies.push(['ct_checkjs', apbctLocalStorage.get('ct_checkjs')]);
  } else {
    initCookies.push(['ct_checkjs', 0]);
  }

  // detect integrated forms that need to be handled via alternative cookies
  ctDetectForcedAltCookiesForms();

  // send bot detector event token to alt cookies on problem forms
  var tokenForForceAlt = apbctLocalStorage.get('bot_detector_event_token');
  if (typeof ctPublic.force_alt_cookies !== 'undefined' && ctPublic.force_alt_cookies && ctPublic.settings__data__bot_detector_enabled) {
    apbctLocalStorage.set('event_token_forced_set', '0');
    if (tokenForForceAlt) {
      initCookies.push(['ct_bot_detector_event_token', tokenForForceAlt]);
      apbctLocalStorage.set('event_token_forced_set', '1');
    } else {
      startForcedAltEventTokenChecker();
    }
  }
  ctSetCookie(initCookies);
  setTimeout(function () {
    if (typeof ctPublic.force_alt_cookies == 'undefined' || ctPublic.force_alt_cookies !== 'undefined' && !ctPublic.force_alt_cookies) {
      ctNoCookieAttachHiddenFieldsToForms();
    }
    if (typeof ctPublic.data__cookies_type !== 'undefined' && ctPublic.data__cookies_type === 'none') {
      ctAjaxSetupAddCleanTalkDataBeforeSendAjax();
      ctAddWCMiddlewares();
    }
    for (var _i3 = 0; _i3 < document.forms.length; _i3++) {
      var form = document.forms[_i3];

      // Exclusion for forms
      if (ctCheckHiddenFieldsExclusions(document.forms[_i3], 'visible_fields')) {
        continue;
      }
      if (form.querySelector('input[name="wspsc_add_cart_submit"]') || form.querySelector('input[name="option"][value="com_vikrentcar"]') || form.querySelector('input[name="option"][value="com_vikbooking"]')) {
        continue;
      }

      // The Form has hidden field like apbct_visible_fields
      if (document.forms[_i3].elements.apbct_visible_fields !== undefined && document.forms[_i3].elements.apbct_visible_fields.length > 0) {
        continue;
      }
      if (form.querySelector('input[name="apbct_visible_fields"]')) {
        var visibleFields = form.querySelector('input[name="apbct_visible_fields"]');
        form.removeChild(visibleFields);
      }
      var hiddenInput = document.createElement('input');
      hiddenInput.setAttribute('type', 'hidden');
      hiddenInput.setAttribute('id', 'apbct_visible_fields_' + _i3);
      hiddenInput.setAttribute('name', 'apbct_visible_fields');
      var visibleFieldsToInput = {};
      visibleFieldsToInput[0] = apbct_collect_visible_fields(form);
      hiddenInput.value = btoa(JSON.stringify(visibleFieldsToInput));
      form.append(hiddenInput);
      form.onsubmit_prev = form.onsubmit;
      form.ctFormIndex = _i3;
      form.onsubmit = function (event) {
        if (ctPublic.data__cookies_type !== 'native' && typeof event.target.ctFormIndex !== 'undefined') {
          apbct_visible_fields_set_cookie(apbct_collect_visible_fields(this), event.target.ctFormIndex);
        }
        if (ctPublic.data__cookies_type === 'none' && isFormThatNeedCatchXhr(event.target)) {
          window.XMLHttpRequest.prototype.send = function (data) {
            var noCookieData = getNoCookieData();
            noCookieData = 'data%5Bct_no_cookie_hidden_field%5D=' + noCookieData + '&';
            defaultSend.call(this, noCookieData + data);
            setTimeout(function () {
              window.XMLHttpRequest.prototype.send = defaultSend;
            }, 0);
          };
        }

        // Call previous submit action
        if (event.target.onsubmit_prev instanceof Function && !ctOnsubmitPrevCallExclude(event.target)) {
          if (event.target.classList !== undefined && event.target.classList.contains('brave_form_form')) {
            event.preventDefault();
          }
          setTimeout(function () {
            event.target.onsubmit_prev.call(event.target, event);
          }, 0);
        }
      };
    }
  }, 1000);

  // Listen clicks on encoded emails
  var encodedEmailNodes = document.querySelectorAll('[data-original-string]');
  ctPublic.encodedEmailNodes = encodedEmailNodes;
  if (encodedEmailNodes.length) {
    for (var _i4 = 0; _i4 < encodedEmailNodes.length; ++_i4) {
      encodedEmailNodes[_i4].addEventListener('click', ctFillDecodedEmailHandler);
    }
  }

  // WordPress Search form processing
  var _iterator8 = _createForOfIteratorHelper(document.forms),
    _step8;
  try {
    var _loop3 = function _loop3() {
        var _form = _step8.value;
        if (typeof ctPublic !== 'undefined' && +ctPublic.settings__forms__search_test === 1 && (_form.getAttribute('id') === 'searchform' || _form.getAttribute('class') !== null && _form.getAttribute('class').indexOf('search-form') !== -1 || _form.getAttribute('role') !== null && _form.getAttribute('role').indexOf('search') !== -1)) {
          // fibosearch integration
          if (_form.querySelector('input.dgwt-wcas-search-input')) {
            return 0; // continue
          }
          if (_form.getAttribute('id') === 'hero-search-form' || _form.getAttribute('class') === 'hb-booking-search-form') {
            return 0; // continue
          }

          // this handles search forms onsubmit process
          _form.apbctSearchPrevOnsubmit = _form.onsubmit;
          _form.onsubmit = function (e) {
            return ctSearchFormOnSubmitHandler(e, _form);
          };
        }
      },
      _ret;
    for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
      _ret = _loop3();
      if (_ret === 0) continue;
    }

    // Check any XMLHttpRequest connections
  } catch (err) {
    _iterator8.e(err);
  } finally {
    _iterator8.f();
  }
  apbctCatchXmlHttpRequest();

  // Initializing the collection of user activity
  new ApbctCollectingUserActivity();

  // Set important paramaters via ajax if problematic cache solutions found
  // todo These AJAX calls removed untill we find a better solution, reason is a lot of requests to the server.
  // apbctAjaxSetImportantParametersOnCacheExist(ctPublic.advancedCacheExists || ctPublic.varnishCacheExists);

  // Checking that the bot detector has loaded and received the event token for Anti-Crawler
  if (ctPublic.settings__sfw__anti_crawler) {
    checkBotDetectorExist();
  }
}

/**
 * Checking that the bot detector has loaded and received the event token
 */
function checkBotDetectorExist() {
  if (ctPublic.settings__data__bot_detector_enabled) {
    var botDetectorIntervalSearch = setInterval(function () {
      var botDetectorEventToken = localStorage.bot_detector_event_token ? true : false;
      if (botDetectorEventToken) {
        ctSetCookie('apbct_bot_detector_exist', '1', '3600');
        clearInterval(botDetectorIntervalSearch);
      }
    }, 500);
  }
}

/**
 * Insert no_cookies_data to rest request
 */
function ctAddWCMiddlewares() {
  var ctPinDataToRequest = function ctPinDataToRequest(options, next) {
    if (_typeof(options) !== 'object' || options === null || !options.hasOwnProperty('data') || !options.hasOwnProperty('path')) {
      return next(options);
    }

    // add to cart
    if (options.data.hasOwnProperty('requests') && options.data.requests.length > 0 && options.data.requests[0].hasOwnProperty('path') && options.data.requests[0].path === '/wc/store/v1/cart/add-item') {
      options.data.requests[0].data.ct_no_cookie_hidden_field = getNoCookieData();
      options.data.requests[0].data.event_token = localStorage.getItem('bot_detector_event_token');
    }

    // checkout
    if (options.path === '/wc/store/v1/checkout') {
      options.data.ct_no_cookie_hidden_field = getNoCookieData();
      options.data.event_token = localStorage.getItem('bot_detector_event_token');
    }
    return next(options);
  };
  if (window.hasOwnProperty('wp') && window.wp.hasOwnProperty('apiFetch') && typeof window.wp.apiFetch.use === 'function') {
    window.wp.apiFetch.use(ctPinDataToRequest);
  }
}

/**
 * Insert event_token and no_cookies_data to some ajax request
 */
function apbctCatchXmlHttpRequest() {
  // 1) Check the page if it needed to catch XHR
  if (document.querySelector('div.wfu_container') !== null) {
    var originalSend = XMLHttpRequest.prototype.send;
    XMLHttpRequest.prototype.send = function (body) {
      // 2) Check the caught request fi it needed to modify
      if (body && typeof body === 'string' && body.indexOf('action=wfu_ajax_action_ask_server') !== -1) {
        var addidionalCleantalkData = '';
        var eventToken = localStorage.getItem('bot_detector_event_token');
        try {
          eventToken = JSON.parse(eventToken);
        } catch (_unused) {
          eventToken = false;
        }
        if (eventToken !== null && eventToken !== false && eventToken.hasOwnProperty('value') && eventToken.value !== '') {
          eventToken = eventToken.value;
          addidionalCleantalkData += '&' + 'data%5Bct_bot_detector_event_token%5D=' + eventToken;
        }
        var noCookieData = getNoCookieData();
        addidionalCleantalkData += '&' + 'data%5Bct_no_cookie_hidden_field%5D=' + noCookieData;
        body += addidionalCleantalkData;
        return originalSend.apply(this, [body]);
      }
      return originalSend.apply(this, [body]);
    };
  }
}

/**
 * Run AJAX to set important_parameters on the site backend if problematic cache solutions are defined.
 * @param {boolean} cacheExist
 */
function apbctAjaxSetImportantParametersOnCacheExist(cacheExist) {
  // eslint-disable-line no-unused-vars
  // Set important parameters via ajax
  if (cacheExist) {
    if (ctPublicFunctions.data__ajax_type === 'rest') {
      apbct_public_sendREST('apbct_set_important_parameters', {});
    } else if (ctPublicFunctions.data__ajax_type === 'admin_ajax') {
      apbct_public_sendAJAX({
        action: 'apbct_set_important_parameters'
      }, {});
    }
  }
}

/**
 * Prepare jQuery.ajaxSetup to add nocookie data to the jQuery ajax request.
 * Notes:
 * - Do it just once, the ajaxSetup.beforeSend will be overwritten for any calls.
 * - Signs of forms need to be caught will be checked during ajaxSetup.settings.data process on send.
 * - Any sign of the form HTML of the caller is insignificant in this process.
 * @return {void}
 */
function ctAjaxSetupAddCleanTalkDataBeforeSendAjax() {
  // jquery ajax call intercept
  // this is the only place where we can found hard dependency on jQuery, if the form use it - the script
  // will work independing if jQuery is loaded by CleanTalk or not
  var eventToken = false;
  if (typeof jQuery !== 'undefined' && typeof jQuery.ajaxSetup === 'function') {
    jQuery.ajaxSetup({
      beforeSend: function beforeSend(xhr, settings) {
        var sourceSign = false;
        // settings data is string (important!)
        if (typeof settings.data === 'string') {
          if (settings.data.indexOf('twt_cc_signup') !== -1) {
            sourceSign = 'twt_cc_signup';
          }
          if (settings.data.indexOf('action=mailpoet') !== -1) {
            sourceSign = 'action=mailpoet';
          }
          if (settings.data.indexOf('action=user_registration') !== -1 && settings.data.indexOf('ur_frontend_form_nonce') !== -1) {
            sourceSign = 'action=user_registration';
          }
          if (settings.data.indexOf('action=happyforms_message') !== -1) {
            sourceSign = 'action=happyforms_message';
          }
          if (settings.data.indexOf('action=new_activity_comment') !== -1) {
            sourceSign = 'action=new_activity_comment';
          }
        }
        if (typeof settings.url === 'string') {
          if (settings.url.indexOf('wc-ajax=add_to_cart') !== -1) {
            sourceSign = 'wc-ajax=add_to_cart';
            if (localStorage.getItem('bot_detector_event_token') !== null) {
              eventToken = localStorage.getItem('bot_detector_event_token');
              try {
                eventToken = JSON.parse(eventToken);
              } catch (_unused2) {
                eventToken = false;
              }
              if (eventToken !== false && eventToken.hasOwnProperty('value') && eventToken.value !== '') {
                eventToken = eventToken.value;
              }
            }
          }
        }
        if (sourceSign) {
          var noCookieData = getNoCookieData();
          if (typeof eventToken === 'string') {
            eventToken = 'data%5Bct_bot_detector_event_token%5D=' + eventToken + '&';
          } else {
            eventToken = '';
          }
          noCookieData = 'data%5Bct_no_cookie_hidden_field%5D=' + noCookieData + '&';
          settings.data = noCookieData + eventToken + settings.data;
        }
      }
    });
  }
}

// eslint-disable-next-line require-jsdoc
function ctOnsubmitPrevCallExclude(form) {
  if (form.classList.contains('hb-booking-search-form')) {
    return true;
  }
  return false;
}
if (ctPublic.data__key_is_ok) {
  if (document.readyState !== 'loading') {
    apbct_ready();
  } else {
    apbct_attach_event_handler(document, 'DOMContentLoaded', apbct_ready);
  }
  apbctLocalStorage.set('ct_checkjs', ctPublic.ct_checkjs_key, true);
}

/**
 * @param {SubmitEvent} e
 * @param {object} targetForm
 */
function ctSearchFormOnSubmitHandler(e, targetForm) {
  try {
    // get honeypot field and it's value
    var honeyPotField = targetForm.querySelector('[name*="apbct_email_id__"]');
    var hpValue = null;
    if (honeyPotField !== null && honeyPotField.value !== null) {
      hpValue = honeyPotField.value;
    }

    // get cookie data from storages
    var cleantalkStorageDataArray = getCleanTalkStorageDataArray();

    // get event token from storage
    var eventTokenLocalStorage = apbctLocalStorage.get('bot_detector_event_token');

    // if noCookie data or honeypot data is set, proceed handling
    if (cleantalkStorageDataArray !== null || honeyPotField !== null || eventTokenLocalStorage !== null) {
      e.preventDefault();
      var callBack = function callBack() {
        if (honeyPotField !== null) {
          honeyPotField.parentNode.removeChild(honeyPotField);
        }
        if (typeof targetForm.apbctSearchPrevOnsubmit === 'function') {
          targetForm.apbctSearchPrevOnsubmit();
        } else {
          HTMLFormElement.prototype.submit.call(targetForm);
        }
      };
      var cookiesArray = cleantalkStorageDataArray;

      // if honeypot data provided add the fields to the parsed data
      if (hpValue !== null) {
        cookiesArray.apbct_search_form__honeypot_value = hpValue;
      }

      // set event token
      cookiesArray.ct_bot_detector_event_token = eventTokenLocalStorage;

      // if the pixel needs to be decoded
      if (typeof cookiesArray.apbct_pixel_url === 'string' && cookiesArray.apbct_pixel_url.indexOf('%3A') !== -1) {
        cookiesArray.apbct_pixel_url = decodeURIComponent(cookiesArray.apbct_pixel_url);
      }

      // data to JSON
      var parsedCookies = JSON.stringify(cookiesArray);

      // if any data provided, proceed data to xhr
      if (typeof parsedCookies !== 'undefined' && parsedCookies.length !== 0) {
        ctSetAlternativeCookie(parsedCookies, {
          callback: callBack,
          onErrorCallback: callBack,
          forceAltCookies: true
        });
      } else {
        callBack();
      }
    }
  } catch (error) {
    console.warn('APBCT search form onsubmit handler error. ' + error);
  }
}

/**
 * @param {mixed} commonCookies
 * @return {string}
 */
function getJavascriptClientData() {
  var commonCookies = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  // eslint-disable-line no-unused-vars
  var resultDataJson = {};
  resultDataJson.ct_checked_emails = ctGetCookie(ctPublicFunctions.cookiePrefix + 'ct_checked_emails');
  resultDataJson.ct_checked_emails_exist = ctGetCookie(ctPublicFunctions.cookiePrefix + 'ct_checked_emails_exist');
  resultDataJson.ct_checkjs = ctGetCookie(ctPublicFunctions.cookiePrefix + 'ct_checkjs');
  resultDataJson.ct_fkp_timestamp = ctGetCookie(ctPublicFunctions.cookiePrefix + 'ct_fkp_timestamp');
  resultDataJson.ct_pointer_data = ctGetCookie(ctPublicFunctions.cookiePrefix + 'ct_pointer_data');
  resultDataJson.ct_ps_timestamp = ctGetCookie(ctPublicFunctions.cookiePrefix + 'ct_ps_timestamp');
  resultDataJson.ct_screen_info = ctGetCookie(ctPublicFunctions.cookiePrefix + 'ct_screen_info');
  resultDataJson.ct_timezone = ctGetCookie(ctPublicFunctions.cookiePrefix + 'ct_timezone');

  // collecting data from localstorage
  var ctMouseMovedLocalStorage = apbctLocalStorage.get(ctPublicFunctions.cookiePrefix + 'ct_mouse_moved');
  var ctHasScrolledLocalStorage = apbctLocalStorage.get(ctPublicFunctions.cookiePrefix + 'ct_has_scrolled');
  var ctCookiesTypeLocalStorage = apbctLocalStorage.get(ctPublicFunctions.cookiePrefix + 'ct_cookies_type');
  var apbctPageHits = apbctLocalStorage.get('apbct_page_hits');
  var apbctPrevReferer = apbctSessionStorage.get('apbct_prev_referer');
  var apbctSiteReferer = apbctSessionStorage.get('apbct_site_referer');
  var ctJsErrorsLocalStorage = apbctLocalStorage.get(ctPublicFunctions.cookiePrefix + 'ct_js_errors');
  var ctPixelUrl = apbctLocalStorage.get(ctPublicFunctions.cookiePrefix + 'apbct_pixel_url');
  var apbctHeadless = apbctLocalStorage.get(ctPublicFunctions.cookiePrefix + 'apbct_headless');
  var ctBotDetectorFrontendDataLog = apbctLocalStorage.get(ctPublicFunctions.cookiePrefix + 'ct_bot_detector_frontend_data_log');

  // collecting data from cookies
  var ctMouseMovedCookie = ctGetCookie(ctPublicFunctions.cookiePrefix + 'ct_mouse_moved');
  var ctHasScrolledCookie = ctGetCookie(ctPublicFunctions.cookiePrefix + 'ct_has_scrolled');
  var ctCookiesTypeCookie = ctGetCookie(ctPublicFunctions.cookiePrefix + 'ct_cookies_type');
  var ctCookiesPixelUrl = ctGetCookie(ctPublicFunctions.cookiePrefix + 'apbct_pixel_url');
  var apbctHeadlessNative = !!ctGetCookie(ctPublicFunctions.cookiePrefix + 'apbct_headless');
  resultDataJson.ct_mouse_moved = ctMouseMovedLocalStorage !== undefined ? ctMouseMovedLocalStorage : ctMouseMovedCookie;
  resultDataJson.ct_has_scrolled = ctHasScrolledLocalStorage !== undefined ? ctHasScrolledLocalStorage : ctHasScrolledCookie;
  resultDataJson.ct_cookies_type = ctCookiesTypeLocalStorage !== undefined ? ctCookiesTypeLocalStorage : ctCookiesTypeCookie;
  resultDataJson.apbct_pixel_url = ctPixelUrl !== undefined ? ctPixelUrl : ctCookiesPixelUrl;
  resultDataJson.apbct_headless = apbctHeadless !== undefined ? apbctHeadless : apbctHeadlessNative;
  resultDataJson.ct_bot_detector_frontend_data_log = ctBotDetectorFrontendDataLog !== undefined ? ctBotDetectorFrontendDataLog : '';
  if (resultDataJson.apbct_pixel_url && typeof resultDataJson.apbct_pixel_url == 'string') {
    if (resultDataJson.apbct_pixel_url.indexOf('%3A%2F')) {
      resultDataJson.apbct_pixel_url = decodeURIComponent(resultDataJson.apbct_pixel_url);
    }
  }
  resultDataJson.apbct_page_hits = apbctPageHits;
  resultDataJson.apbct_prev_referer = apbctPrevReferer;
  resultDataJson.apbct_site_referer = apbctSiteReferer;
  resultDataJson.apbct_ct_js_errors = ctJsErrorsLocalStorage;
  if (!resultDataJson.apbct_pixel_url) {
    resultDataJson.apbct_pixel_url = ctPublic.pixel__url;
  }
  if (_typeof(commonCookies) === 'object') {
    for (var i = 0; i < commonCookies.length; ++i) {
      if (_typeof(commonCookies[i][1]) === 'object') {
        // this is for handle SFW cookies
        resultDataJson[commonCookies[i][1][0]] = commonCookies[i][1][1];
      } else {
        resultDataJson[commonCookies[i][0]] = commonCookies[i][1];
      }
    }
  } else {
    console.log('APBCT JS ERROR: Collecting data type mismatch');
  }

  // Parse JSON properties to prevent double JSON encoding
  resultDataJson = removeDoubleJsonEncoding(resultDataJson);
  return JSON.stringify(resultDataJson);
}

/**
 * Recursive
 *
 * Recursively decode JSON-encoded properties
 *
 * @param {mixed} object
 * @return {*}
 */
function removeDoubleJsonEncoding(object) {
  if (_typeof(object) === 'object') {
    // eslint-disable-next-line guard-for-in
    for (var objectKey in object) {
      // Recursion
      if (_typeof(object[objectKey]) === 'object') {
        object[objectKey] = removeDoubleJsonEncoding(object[objectKey]);
      }

      // Common case (out)
      if (typeof object[objectKey] === 'string' && object[objectKey].match(/^[\[{].*?[\]}]$/) !== null // is like JSON
      ) {
        var parsedValue = JSON.parse(object[objectKey]);
        if (_typeof(parsedValue) === 'object') {
          object[objectKey] = parsedValue;
        }
      }
    }
  }
  return object;
}

// eslint-disable-next-line camelcase,require-jsdoc
function apbct_collect_visible_fields(form) {
  // Get only fields
  var inputs = [];
  var inputsVisible = '';
  var inputsVisibleCount = 0;
  var inputsInvisible = '';
  var inputsInvisibleCount = 0;
  var inputsWithDuplicateNames = [];
  for (var key in form.elements) {
    if (!isNaN(+key)) {
      inputs[key] = form.elements[key];
    }
  }

  // Filter fields
  inputs = inputs.filter(function (elem) {
    // Filter already added fields
    if (inputsWithDuplicateNames.indexOf(elem.getAttribute('name')) !== -1) {
      return false;
    }
    // Filter inputs with same names for type == radio
    if (-1 !== ['radio', 'checkbox'].indexOf(elem.getAttribute('type'))) {
      inputsWithDuplicateNames.push(elem.getAttribute('name'));
      return false;
    }
    return true;
  });

  // Visible fields
  inputs.forEach(function (elem, i, elements) {
    // Unnecessary fields
    if (elem.getAttribute('type') === 'submit' ||
    // type == submit
    elem.getAttribute('name') === null || elem.getAttribute('name') === 'ct_checkjs') {
      return;
    }
    // Invisible fields
    if (getComputedStyle(elem).display === 'none' ||
    // hidden
    getComputedStyle(elem).visibility === 'hidden' ||
    // hidden
    getComputedStyle(elem).opacity === '0' ||
    // hidden
    elem.getAttribute('type') === 'hidden' // type == hidden
    ) {
      if (elem.classList.contains('wp-editor-area')) {
        inputsVisible += ' ' + elem.getAttribute('name');
        inputsVisibleCount++;
      } else {
        inputsInvisible += ' ' + elem.getAttribute('name');
        inputsInvisibleCount++;
      }
      // eslint-disable-next-line brace-style
    }
    // Visible fields
    else {
      inputsVisible += ' ' + elem.getAttribute('name');
      inputsVisibleCount++;
    }
  });
  inputsInvisible = inputsInvisible.trim();
  inputsVisible = inputsVisible.trim();
  return {
    visible_fields: inputsVisible,
    visible_fields_count: inputsVisibleCount,
    invisible_fields: inputsInvisible,
    invisible_fields_count: inputsInvisibleCount
  };
}

// eslint-disable-next-line camelcase,require-jsdoc
function apbct_visible_fields_set_cookie(visibleFieldsCollection, formId) {
  var collection = _typeof(visibleFieldsCollection) === 'object' && visibleFieldsCollection !== null ? visibleFieldsCollection : {};
  if (ctPublic.data__cookies_type === 'native') {
    // eslint-disable-next-line guard-for-in
    for (var i in collection) {
      if (i > 10) {
        // Do not generate more than 10 cookies
        return;
      }
      var collectionIndex = formId !== undefined ? formId : i;
      ctSetCookie('apbct_visible_fields_' + collectionIndex, JSON.stringify(collection[i]));
    }
  } else {
    ctSetCookie('apbct_visible_fields', JSON.stringify(collection));
  }
}

// eslint-disable-next-line camelcase,require-jsdoc,no-unused-vars
function apbct_js_keys__set_input_value(result, data, params, obj) {
  if (document.querySelectorAll('[name^=ct_checkjs]').length > 0) {
    var elements = document.querySelectorAll('[name^=ct_checkjs]');
    for (var i = 0; i < elements.length; i++) {
      elements[i].value = result.js_key;
    }
  }
}

/**
 * @return {string}
 */
function apbctGetScreenInfo() {
  return JSON.stringify({
    fullWidth: document.documentElement.scrollWidth,
    fullHeight: Math.max(document.body.scrollHeight, document.documentElement.scrollHeight, document.body.offsetHeight, document.documentElement.offsetHeight, document.body.clientHeight, document.documentElement.clientHeight),
    visibleWidth: document.documentElement.clientWidth,
    visibleHeight: document.documentElement.clientHeight
  });
}

// eslint-disable-next-line require-jsdoc
function ctParseBlockMessage(response) {
  var msg = '';
  if (typeof response.apbct !== 'undefined') {
    response = response.apbct;
    if (response.blocked) {
      msg = response.comment;
    }
  }
  if (typeof response.data !== 'undefined') {
    response = response.data;
    if (response.message !== undefined) {
      msg = response.message;
    }
  }
  if (msg) {
    document.dispatchEvent(new CustomEvent('apbctAjaxBockAlert', {
      bubbles: true,
      detail: {
        message: msg
      }
    }));

    // Show the result by modal
    cleantalkModal.loaded = msg;
    cleantalkModal.open();
    if (+response.stop_script === 1) {
      window.stop();
    }
  }
}

// eslint-disable-next-line no-unused-vars,require-jsdoc
function ctSetPixelUrlLocalstorage(ajaxPixelUrl) {
  // set pixel to the storage
  ctSetCookie('apbct_pixel_url', ajaxPixelUrl);
}

// eslint-disable-next-line require-jsdoc
function ctNoCookieConstructHiddenField(type) {
  var inputType = 'hidden';
  if (type === 'submit') {
    inputType = 'submit';
  }
  var field = '';
  var noCookieData = getCleanTalkStorageDataArray();
  noCookieData = JSON.stringify(noCookieData);
  noCookieData = '_ct_no_cookie_data_' + btoa(noCookieData);
  field = document.createElement('input');
  field.setAttribute('name', 'ct_no_cookie_hidden_field');
  field.setAttribute('value', noCookieData);
  field.setAttribute('type', inputType);
  field.classList.add('apbct_special_field');
  field.classList.add('ct_no_cookie_hidden_field');
  return field;
}

/**
 * Retrieves the clentalk "cookie" data from starages.
 * Contains {...noCookieDataLocal, ...noCookieDataSession, ...noCookieDataTypo, ...noCookieDataFromUserActivity}.
 * @return {string}
 */
function getCleanTalkStorageDataArray() {
  var noCookieDataLocal = apbctLocalStorage.getCleanTalkData();
  var noCookieDataSession = apbctSessionStorage.getCleanTalkData();
  var noCookieDataTypo = {
    typo: []
  };
  if (document.ctTypoData && document.ctTypoData.data) {
    noCookieDataTypo = {
      typo: document.ctTypoData.data
    };
  }
  var noCookieDataFromUserActivity = {
    collecting_user_activity_data: []
  };
  if (document.ctCollectingUserActivityData) {
    var collectingUserActivityData = JSON.parse(JSON.stringify(document.ctCollectingUserActivityData));
    noCookieDataFromUserActivity = {
      collecting_user_activity_data: collectingUserActivityData
    };
  }
  return _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, noCookieDataLocal), noCookieDataSession), noCookieDataTypo), noCookieDataFromUserActivity);
}

/**
 * @return {boolean|*}
 */
function ctGetPageForms() {
  var forms = document.forms;
  if (forms) {
    return forms;
  }
  return false;
}

/**
 * Get type of the field should be excluded. Return exclusion signs via object.
 * @param {object} form Form dom object.
 * @return {object} {'no_cookie': 1|0, 'visible_fields': 1|0}
 */
function ctGetHiddenFieldExclusionsType(form) {
  // visible fields
  var result = {
    'no_cookie': 0,
    'visible_fields': 0
  };
  if (+ctPublic.data__visible_fields_required === 0 || form.method.toString().toLowerCase() === 'get' && form.querySelectorAll('.nf-form-content').length === 0 && form.id !== 'twt_cc_signup' || form.classList.contains('slp_search_form') ||
  // StoreLocatorPlus form
  form.parentElement.classList.contains('mec-booking') || form.action.toString().indexOf('activehosted.com') !== -1 ||
  // Active Campaign
  form.id && form.id === 'caspioform' ||
  // Caspio Form
  form.classList && form.classList.contains('tinkoffPayRow') ||
  // TinkoffPayForm
  form.classList && form.classList.contains('give-form') ||
  // GiveWP
  form.id && form.id === 'ult-forgot-password-form' ||
  // ult forgot password
  form.id && form.id.toString().indexOf('calculatedfields') !== -1 ||
  // CalculatedFieldsForm
  form.id && form.id.toString().indexOf('sac-form') !== -1 ||
  // Simple Ajax Chat
  form.id && form.id.toString().indexOf('cp_tslotsbooking_pform') !== -1 ||
  // WP Time Slots Booking Form
  form.name && form.name.toString().indexOf('cp_tslotsbooking_pform') !== -1 ||
  // WP Time Slots Booking Form
  form.action.toString() === 'https://epayment.epymtservice.com/epay.jhtml' ||
  // Custom form
  form.name && form.name.toString().indexOf('tribe-bar-form') !== -1 ||
  // The Events Calendar
  form.id && form.id === 'ihf-login-form' ||
  // Optima Express login
  form.id && form.id === 'subscriberForm' && form.action.toString().indexOf('actionType=update') !== -1 ||
  // Optima Express update
  form.id && form.id === 'ihf-main-search-form' ||
  // Optima Express search
  form.id && form.id === 'frmCalc' ||
  // nobletitle-calc
  form.action.toString().indexOf('property-organizer-delete-saved-search-submit') !== -1 || form.querySelector('a[name="login"]') !== null // digimember login form
  ) {
    result.visible_fields = 1;
  }

  // ajax search pro exclusion
  var ncFieldExclusionsSign = form.parentNode;
  if (ncFieldExclusionsSign && ncFieldExclusionsSign.classList.contains('proinput') || form.name === 'options' && form.classList.contains('asp-fss-flex')) {
    result.no_cookie = 1;
  }

  // woocommerce login form
  if (form && form.classList.contains('woocommerce-form-login')) {
    result.visible_fields = 1;
    result.no_cookie = 1;
  }
  return result;
}

/**
 * Check if the form should be skipped from hidden field attach.
 * Return exclusion description if it is found, false otherwise.
 * @param {object} form Form dom object.
 * @param {string} hiddenFieldType Type of hidden field that needs to be checked.
 * Possible values: 'no_cookie'|'visible_fields'.
 * @return {boolean}
 */
function ctCheckHiddenFieldsExclusions(form, hiddenFieldType) {
  var formAction = typeof form.action == 'string' ? form.action : '';
  // Ajax Search Lite
  if (Boolean(form.querySelector('fieldset.asl_sett_scroll'))) {
    return true;
  }
  // Super WooCommerce Product Filter
  if (form.classList.contains('swpf-instant-filtering')) {
    return true;
  }
  // PayU 3-rd party service forms
  if (formAction.indexOf('secure.payu.com') !== -1) {
    return true;
  }
  if (formAction.indexOf('hsforms') !== -1) {
    return true;
  }
  if (typeof hiddenFieldType === 'string' && ['visible_fields', 'no_cookie'].indexOf(hiddenFieldType) !== -1) {
    var exclusions = ctGetHiddenFieldExclusionsType(form);
    return exclusions[hiddenFieldType] === 1;
  }
  return false;
}

/**
 * ctNoCookieAttachHiddenFieldsToForms
 */
function ctNoCookieAttachHiddenFieldsToForms() {
  if (ctPublic.data__cookies_type !== 'none') {
    return;
  }
  var forms = ctGetPageForms();
  if (forms) {
    for (var i = 0; i < forms.length; i++) {
      if (ctCheckHiddenFieldsExclusions(document.forms[i], 'no_cookie')) {
        continue;
      }

      // ignore forms with get method @todo We need to think about this
      if (document.forms[i].getAttribute('method') === null || document.forms[i].getAttribute('method').toLowerCase() === 'post') {
        // remove old sets
        var fields = forms[i].querySelectorAll('.ct_no_cookie_hidden_field');
        for (var j = 0; j < fields.length; j++) {
          fields[j].outerHTML = '';
        }
        // add new set
        document.forms[i].append(ctNoCookieConstructHiddenField());
      }
    }
  }
}
var defaultFetch = window.fetch;
var defaultSend = XMLHttpRequest.prototype.send;
if (document.readyState !== 'loading') {
  checkFormsExistForCatching();
} else {
  apbct_attach_event_handler(document, 'DOMContentLoaded', checkFormsExistForCatching);
}

/**
 * checkFormsExistForCatching
 */
function checkFormsExistForCatching() {
  setTimeout(function () {
    if (isFormThatNeedCatch()) {
      window.fetch = function () {
        for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
          args[_key4] = arguments[_key4];
        }
        if (args && args[0] && typeof args[0].includes === 'function' && args[0].includes('/wp-json/metform/')) {
          var noCookieData = getNoCookieData();
          if (args && args[1] && args[1].body) {
            args[1].body.append('ct_no_cookie_hidden_field', noCookieData);
          }
        }
        return defaultFetch.apply(window, args);
      };
    }
  }, 1000);
}

/**
 * @return {boolean}
 */
function isFormThatNeedCatch() {
  var formClasses = ['metform-form-content'];
  var classExists = false;
  var forms = document.forms;
  var _iterator9 = _createForOfIteratorHelper(forms),
    _step9;
  try {
    var _loop4 = function _loop4() {
      var form = _step9.value;
      formClasses.forEach(function (classForm) {
        if (form.classList.contains(classForm)) {
          classExists = true;
        }
      });
    };
    for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
      _loop4();
    }
  } catch (err) {
    _iterator9.e(err);
  } finally {
    _iterator9.f();
  }
  return classExists;
}

/**
 * @param {HTMLElement} form
 * @return {boolean}
 */
function isFormThatNeedCatchXhr(form) {
  if (document.querySelector('div.elementor-widget[title=\'Login/Signup\']') != null) {
    return false;
  }
  if (form && form.action && form.action.toString().indexOf('mailpoet_subscription_form') !== -1) {
    return true;
  }
  return false;
}

/**
 * @return {string}
 */
function getNoCookieData() {
  var noCookieDataLocal = apbctLocalStorage.getCleanTalkData();
  var noCookieDataSession = apbctSessionStorage.getCleanTalkData();
  var noCookieData = _objectSpread(_objectSpread({}, noCookieDataLocal), noCookieDataSession);
  noCookieData = JSON.stringify(noCookieData);
  return '_ct_no_cookie_data_' + btoa(noCookieData);
}

/**
 * Set three statements to the sessions storage: apbct_session_current_page, apbct_prev_referer.
 * @return {void}
 */
function apbctWriteReferrersToSessionStorage() {
  var sessionCurrentPage = apbctSessionStorage.get('apbct_session_current_page');

  // set session apbct_referer
  if (sessionCurrentPage !== false && document.location.href !== sessionCurrentPage) {
    apbctSessionStorage.set('apbct_prev_referer', sessionCurrentPage, false);
  }

  // set session current page to know referrer
  apbctSessionStorage.set('apbct_session_current_page', document.location.href, false);
}

/**
 * WooCommerce add to cart by GET request params collecting
 */
function apbctCheckAddToCartByGet() {
  // 1) Collect all links with add_to_cart_button class
  document.querySelectorAll('a.add_to_cart_button:not(.product_type_variable):not(.wc-interactive)').forEach(function (el) {
    el.addEventListener('click', function (e) {
      var href = el.getAttribute('href');
      // 2) Add to href attribute additional parameter ct_bot_detector_event_token gathered from apbctLocalStorage
      var eventToken = apbctLocalStorage.get('bot_detector_event_token');
      if (eventToken) {
        if (href.indexOf('?') === -1) {
          href += '?';
        } else {
          href += '&';
        }
        href += 'ct_bot_detector_event_token=' + eventToken;
        el.setAttribute('href', href);
      }
    });
  });
}

/* Cleantalk Modal object */
var cleantalkModal = {
  // Flags
  loaded: false,
  loading: false,
  opened: false,
  opening: false,
  ignoreURLConvert: false,
  // Methods
  load: function load(action) {
    if (!this.loaded) {
      this.loading = true;
      var callback = function callback(result, data, params, obj) {
        cleantalkModal.loading = false;
        cleantalkModal.loaded = result;
        document.dispatchEvent(new CustomEvent('cleantalkModalContentLoaded', {
          bubbles: true
        }));
      };
      // eslint-disable-next-line camelcase
      if (typeof apbct_admin_sendAJAX === 'function') {
        apbct_admin_sendAJAX({
          'action': action
        }, {
          'callback': callback,
          'notJson': true
        });
      } else {
        apbct_public_sendAJAX({
          'action': action
        }, {
          'callback': callback,
          'notJson': true
        });
      }
    }
  },
  open: function open() {
    /* Cleantalk Modal CSS start */
    var renderCss = function renderCss() {
      var cssStr = '';
      // eslint-disable-next-line guard-for-in
      for (var key in this.styles) {
        cssStr += key + ':' + this.styles[key] + ';';
      }
      return cssStr;
    };
    var overlayCss = {
      styles: {
        'z-index': '9999999999',
        'position': 'fixed',
        'top': '0',
        'left': '0',
        'width': '100%',
        'height': '100%',
        'background': 'rgba(0,0,0,0.5)',
        'display': 'flex',
        'justify-content': 'center',
        'align-items': 'center'
      },
      toString: renderCss
    };
    var innerCss = {
      styles: {
        'position': 'relative',
        'padding': '30px',
        'background': '#FFF',
        'border': '1px solid rgba(0,0,0,0.75)',
        'border-radius': '4px',
        'box-shadow': '7px 7px 5px 0px rgba(50,50,50,0.75)'
      },
      toString: renderCss
    };
    var closeCss = {
      styles: {
        'position': 'absolute',
        'background': '#FFF',
        'width': '20px',
        'height': '20px',
        'border': '2px solid rgba(0,0,0,0.75)',
        'border-radius': '15px',
        'cursor': 'pointer',
        'top': '-8px',
        'right': '-8px',
        'box-sizing': 'content-box'
      },
      toString: renderCss
    };
    var closeCssBefore = {
      styles: {
        'content': '""',
        'display': 'block',
        'position': 'absolute',
        'background': '#000',
        'border-radius': '1px',
        'width': '2px',
        'height': '16px',
        'top': '2px',
        'left': '9px',
        'transform': 'rotate(45deg)'
      },
      toString: renderCss
    };
    var closeCssAfter = {
      styles: {
        'content': '""',
        'display': 'block',
        'position': 'absolute',
        'background': '#000',
        'border-radius': '1px',
        'width': '2px',
        'height': '16px',
        'top': '2px',
        'left': '9px',
        'transform': 'rotate(-45deg)'
      },
      toString: renderCss
    };
    var bodyCss = {
      styles: {
        'overflow': 'hidden'
      },
      toString: renderCss
    };
    var cleantalkModalStyle = document.createElement('style');
    cleantalkModalStyle.setAttribute('id', 'cleantalk-modal-styles');
    cleantalkModalStyle.innerHTML = 'body.cleantalk-modal-opened{' + bodyCss + '}';
    cleantalkModalStyle.innerHTML += '#cleantalk-modal-overlay{' + overlayCss + '}';
    cleantalkModalStyle.innerHTML += '#cleantalk-modal-close{' + closeCss + '}';
    cleantalkModalStyle.innerHTML += '#cleantalk-modal-close:before{' + closeCssBefore + '}';
    cleantalkModalStyle.innerHTML += '#cleantalk-modal-close:after{' + closeCssAfter + '}';
    document.body.append(cleantalkModalStyle);
    /* Cleantalk Modal CSS end */

    var overlay = document.createElement('div');
    overlay.setAttribute('id', 'cleantalk-modal-overlay');
    document.body.append(overlay);
    document.body.classList.add('cleantalk-modal-opened');
    var inner = document.createElement('div');
    inner.setAttribute('id', 'cleantalk-modal-inner');
    inner.setAttribute('style', innerCss);
    overlay.append(inner);
    var close = document.createElement('div');
    close.setAttribute('id', 'cleantalk-modal-close');
    inner.append(close);
    var content = document.createElement('div');
    if (this.loaded) {
      var urlRegex = /(https?:\/\/[^\s]+)/g;
      var serviceContentRegex = /.*\/inc/g;
      if (serviceContentRegex.test(this.loaded) || this.ignoreURLConvert) {
        content.innerHTML = this.loaded;
      } else {
        content.innerHTML = this.loaded.replace(urlRegex, '<a href="$1" target="_blank">$1</a>');
      }
    } else {
      content.innerHTML = 'Loading...';
      // @ToDo Here is hardcoded parameter. Have to get this from a 'data-' attribute.
      this.load('get_options_template');
    }
    content.setAttribute('id', 'cleantalk-modal-content');
    inner.append(content);
    this.opened = true;
  },
  close: function close() {
    document.body.classList.remove('cleantalk-modal-opened');
    document.getElementById('cleantalk-modal-overlay').remove();
    document.getElementById('cleantalk-modal-styles').remove();
    document.dispatchEvent(new CustomEvent('cleantalkModalClosed', {
      bubbles: true
    }));
  }
};

/* Cleantalk Modal helpers */
document.addEventListener('click', function (e) {
  if (e.target && (e.target.id === 'cleantalk-modal-overlay' || e.target.id === 'cleantalk-modal-close')) {
    cleantalkModal.close();
  }
});
document.addEventListener('cleantalkModalContentLoaded', function (e) {
  if (cleantalkModal.opened && cleantalkModal.loaded) {
    document.getElementById('cleantalk-modal-content').innerHTML = cleantalkModal.loaded;
  }
});
document.addEventListener('DOMContentLoaded', function () {
  var _this6 = this;
  var ctTrpLocalize = undefined;
  var ctTrpIsAdminCommentsList = false;
  if (typeof ctPublic !== 'undefined' || typeof ctTrpAdminLocalize !== 'undefined') {
    if (typeof ctPublic !== 'undefined' && ctPublic.theRealPerson) {
      ctTrpLocalize = ctPublic.theRealPerson;
    }
    if (typeof ctTrpLocalize === 'undefined' && typeof ctTrpAdminLocalize !== 'undefined' && ctTrpAdminLocalize.theRealPerson) {
      ctTrpLocalize = ctTrpAdminLocalize.theRealPerson;
      ctTrpIsAdminCommentsList = true;
    }
  }
  if (!ctTrpLocalize) {
    return;
  }

  // Selectors. Try to handle the WIDE range of themes.
  var themesCommentsSelector = '.apbct-trp *[class*="comment-author"]';
  if (document.querySelector('.apbct-trp .comment-author .comment-author-link')) {
    // For Spacious theme
    themesCommentsSelector = '.apbct-trp *[class*="comment-author-link"]';
  }
  var woocommerceReviewsSelector = '.apbct-trp *[class*="review__author"]';
  var adminCommentsListSelector = '.apbct-trp td[class*="column-author"] > strong';
  var trpComments = document.querySelectorAll(themesCommentsSelector + ',' + woocommerceReviewsSelector + ',' + adminCommentsListSelector);
  if (trpComments.length === 0) {
    return;
  }
  trpComments.forEach(function (element, index) {
    // Exceptions for items that are included in the selection
    if (typeof pagenow == 'undefined' && element.parentElement.className.indexOf('group') < 0 && element.tagName != 'DIV') {
      return;
    }
    var trpLayout = document.createElement('div');
    trpLayout.setAttribute('class', 'apbct-real-user-badge');
    var trpImage = document.createElement('img');
    trpImage.setAttribute('src', ctTrpLocalize.imgPersonUrl);
    trpImage.setAttribute('class', 'apbct-real-user-popup-img');
    var trpDescription = document.createElement('div');
    trpDescription.setAttribute('class', 'apbct-real-user-popup');
    var trpDescriptionHeading = document.createElement('p');
    trpDescriptionHeading.setAttribute('class', 'apbct-real-user-popup-header');
    trpDescriptionHeading.append(ctTrpLocalize.phrases.trpHeading);
    var trpDescriptionContent = document.createElement('div');
    trpDescriptionContent.setAttribute('class', 'apbct-real-user-popup-content_row');
    var trpDescriptionContentSpan = document.createElement('span');
    trpDescriptionContentSpan.append(ctTrpLocalize.phrases.trpContent1 + ' ');
    trpDescriptionContentSpan.append(ctTrpLocalize.phrases.trpContent2);
    if (ctTrpIsAdminCommentsList) {
      var learnMoreLink = document.createElement('a');
      learnMoreLink.setAttribute('href', ctTrpLocalize.trpContentLink);
      learnMoreLink.setAttribute('target', '_blank');
      learnMoreLink.text = ctTrpLocalize.phrases.trpContentLearnMore;
      trpDescriptionContentSpan.append(' '); // Need one space
      trpDescriptionContentSpan.append(learnMoreLink);
    }
    trpDescriptionContent.append(trpDescriptionContentSpan);
    trpDescription.append(trpDescriptionHeading, trpDescriptionContent);
    trpLayout.append(trpImage);
    element.append(trpLayout);
    element.append(trpDescription);
  });
  var badges = document.querySelectorAll('.apbct-real-user-badge');
  badges.forEach(function (badge) {
    var hideTimeout = undefined;
    _this6.body.addEventListener('click', function (e) {
      if (e.target.className.indexOf('apbct-real-user') == -1 && e.target.parentElement.className.indexOf('apbct-real-user') == -1) {
        closeAllPopupTRP();
      }
    });
    badge.addEventListener('click', function () {
      var popup = this.nextElementSibling;
      if (popup && popup.classList.contains('apbct-real-user-popup')) {
        popup.classList.toggle('visible');
      }
    });
    badge.addEventListener('mouseenter', function () {
      closeAllPopupTRP();
      var popup = this.nextElementSibling;
      if (popup && popup.classList.contains('apbct-real-user-popup')) {
        popup.classList.add('visible');
      }
    });
    badge.addEventListener('mouseleave', function () {
      var _this7 = this;
      hideTimeout = setTimeout(function () {
        var popup = _this7.nextElementSibling;
        if (popup && popup.classList.contains('apbct-real-user-popup')) {
          popup.classList.remove('visible');
        }
      }, 1000);
    });
    var popup = badge.nextElementSibling;
    popup.addEventListener('mouseenter', function () {
      clearTimeout(hideTimeout);
      popup.classList.add('visible');
    });
    popup.addEventListener('mouseleave', function () {
      hideTimeout = setTimeout(function () {
        if (popup.classList.contains('apbct-real-user-popup')) {
          popup.classList.remove('visible');
        }
      }, 1000);
    });

    // For mobile devices
    badge.addEventListener('touchend', function () {
      var _this8 = this;
      hideTimeout = setTimeout(function () {
        var popup = _this8.nextElementSibling;
        var selection = window.getSelection();
        // Check if no text is selected
        if (popup && selection && popup.classList.contains('apbct-real-user-popup') && selection.toString().length === 0) {
          popup.classList.remove('visible');
        } else {
          clearTimeout(hideTimeout);
          document.addEventListener('selectionchange', function onSelectionChange() {
            var selection = window.getSelection();
            if (selection && selection.toString().length === 0) {
              // Restart the hide timeout when selection is cleared
              hideTimeout = setTimeout(function () {
                var popup = badge.nextElementSibling;
                if (popup && popup.classList.contains('apbct-real-user-popup')) {
                  popup.classList.remove('visible');
                }
              }, 3000);
              document.removeEventListener('selectionchange', onSelectionChange);
            }
          });
        }
      }, 3000);
    });
  });
});

/**
 * Closing all TRP popup
 */
function closeAllPopupTRP() {
  var allDisplayPopup = document.querySelectorAll('.apbct-real-user-popup.visible');
  if (allDisplayPopup.length > 0) {
    allDisplayPopup.forEach(function (element) {
      element.classList.remove('visible');
    });
  }
}
var ctBrowserCheck = /*#__PURE__*/function () {
  function ctBrowserCheck() {
    _classCallCheck(this, ctBrowserCheck);
    _defineProperty(this, "titleCheck", 'botDetector in action!');
    _defineProperty(this, "titleHuman", "You're a real person!");
    _defineProperty(this, "title", '');
    _defineProperty(this, "logo", 'https://s3.eu-central-1.amazonaws.com/cleantalk-ctask-atts/accounts/1/148997/57d089a85d4d208d/web_hi_res_512.png');
    _defineProperty(this, "trpLogo", 'https://s3.eu-central-1.amazonaws.com/cleantalk-ctask-atts/accounts/1/153743/e7389e1e6ca21357/2.png');
    _defineProperty(this, "logoAlt", 'CleanTalk');
    _defineProperty(this, "privacyLink", 'https://cleantalk.org/privacy');
    _defineProperty(this, "termsLink", 'https://cleantalk.org/terms');
    // eslint-disable-next-line no-template-curly-in-string, max-len
    _defineProperty(this, "svgBad", '<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z" fill="#FF0000"/></svg>');
    // eslint-disable-next-line no-template-curly-in-string, max-len
    _defineProperty(this, "svgGood", '<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41L9 16.17z" fill="#4CAF50"/></svg>');
    _defineProperty(this, "resultStore", 'ct-browser-check-result');
    _defineProperty(this, "container", null);
    _defineProperty(this, "result", 'human');
    _defineProperty(this, "isLoader", true);
    this.addStyles();
    this.addEventListener();
  }
  return _createClass(ctBrowserCheck, [{
    key: "addEventListener",
    value: function addEventListener() {
      var _this9 = this;
      document.addEventListener('ctBotDetectorStart', function () {
        // if (localStorage.getItem(this.resultStore)) {
        //     this.showSavedResult();
        //     return;
        // }

        _this9.showLoader();
      });
    }
  }, {
    key: "showSavedResult",
    value: function showSavedResult() {}
  }, {
    key: "showLoader",
    value: function showLoader() {
      this.title = this.titleCheck;
      this.render();
      this.showContainer();
    }
  }, {
    key: "render",
    value: function render() {
      if (document.querySelector('.ct-browser-check-container')) {
        this.container = document.querySelector('.ct-browser-check-container');
      } else {
        this.container = document.createElement('div');
        this.container.className = 'ct-browser-check-container';
        document.body.appendChild(this.container);
      }
      this.container.innerHTML += "<div class=\"ct-browser-check-wrapper\" style=\"display: flex; flex-direction: column; align-items: center; justify-content: space-between;\">";
      // this.container.innerHTML += `<div class="ct-browser-check-title">${this.title}</div> `;
      this.container.innerHTML += "<div class=\"ct-browser-check-title\">test</div> ";
      this.container.innerHTML += this.companyInfoHtml();
      this.container.innerHTML += "</div>";
    }
  }, {
    key: "companyInfoHtml",
    value: function companyInfoHtml() {
      return "\n            <div class=\"ct-browser-check-company-info\">\n                <div class=\"ct-browser-check-company-info-wrapper\">\n                    <div class=\"ct-browser-check-company-info-logo\" style=\"width: 20px; height: 20px;\">\n                        <img src=\"".concat(this.logo, "\" alt=\"").concat(this.logoAlt, "\">\n                    </div>\n                    <div class=\"ct-browser-check-company-info-title\">").concat(this.logoAlt, "</div>\n                </div>\n                <div class=\"ct-browser-check-company-info-description\">\n                    <a href=\"").concat(this.privacyLink, "\" target=\"_blank\">Privacy</a>\n                    <span>&middot;</span>\n                    <a href=\"").concat(this.termsLink, "\" target=\"_blank\">Terms</a>\n                </div>\n            </div>\n        ");
    }
  }, {
    key: "showContainer",
    value: function showContainer() {
      this.container.style.display = 'block';
    }
  }, {
    key: "hideContainer",
    value: function hideContainer() {
      this.container.style.display = 'none';
    }

    /**
     * Create and add styles
     */
  }, {
    key: "addStyles",
    value: function addStyles() {
      var style = document.createElement('style');
      style.textContent = "\n            .ct-browser-check-loader { \n                width: 20px; \n                margin: 5px auto;\n                aspect-ratio: 1; \n                border: 3px solid #F3F6F9; \n                border-radius: 50%; \n                position: relative; \n                transform: rotate(45deg); \n            } \n            .ct-browser-check-loader::before { \n                content: \"\"; \n                position: absolute; \n                inset: -3px; \n                border-radius: 50%; \n                border: 3px solid #026E88; \n                animation: l18 2s infinite linear; \n            } \n            @keyframes l18 { \n                0% {clip-path:polygon(50% 50%,0 0,0 0,0 0 ,0 0 ,0 0 )} \n                25% {clip-path:polygon(50% 50%,0 0,100% 0,100% 0 ,100% 0 ,100% 0 )} \n                50% {clip-path:polygon(50% 50%,0 0,100% 0,100% 100%,100% 100%,100% 100%)} \n                75% {clip-path:polygon(50% 50%,0 0,100% 0,100% 100%,0 100%,0 100%)} \n                100% {clip-path:polygon(50% 50%,0 0,100% 0,100% 100%,0 100%,0 0 )} \n            }\n\n            .ct-browser-check-container {\n                display: none;\n                font-size: 12px;\n                font-weight: bold;\n                color: #777777;\n                text-align: center;\n                position: fixed;\n                top: 20%;\n                right: -5px;\n                width: 365px;\n                height: 70px;\n                z-index: 9999;\n                background-color: #fff;\n                border-radius: 5px 0 0 5px;\n                border: 1px solid #bbbbbb;\n                box-shadow: 0 0 5px 0 rgba(0, 0, 0, 0.1);\n                transition: right 0.3s ease-in-out;\n            }\n        ";
      document.head.appendChild(style);
    }
  }]);
}();
document.addEventListener('DOMContentLoaded', function () {
  console.log('DOMContentLoaded');
  var apbctBrowserCheck = new ctBrowserCheck();
  console.log(apbctBrowserCheck);
  apbctBrowserCheck.render();
});
// document.addEventListener('DOMContentLoaded', function() {
//     loaderContainer.className = 'ct-browser-check-container';
//     let startTime = null;
//     let timeoutToShowResult = 3000;

//     document.addEventListener('ctBotDetectorStart', function() {
//         if (localStorage.getItem('ct-browser-check-result')) {
//             showSavedResult();
//             return;
//         }

//         loaderContainer.style.display = 'block';
//         startTime = new Date();
//     });

//     document.addEventListener('ctBotDetectorEnd', function() {
//         console.log('ctBotDetectorEnd');
//     });

//     document.addEventListener('ctBotDetectorResult', function() {
//         if (localStorage.getItem('ct-browser-check-result')) {
//             return;
//         }

//         if (startTime && new Date() - startTime < timeoutToShowResult) {
//             setTimeout(() => {
//                 showResult();
//             }, timeoutToShowResult - (new Date() - startTime));
//             return;
//         }

//         setTimeout(() => {
//             showResult();
//         }, timeoutToShowResult);
//     });

//     function showSavedResult() {
//         const result = localStorage.getItem('ct-browser-check-result');
//         if (result === 'human') {
//             document.querySelector('.ct-browser-check-title').textContent = 'The Real Person';
//         }
//     }

//     /**
//      * Show result
//      */
//     function showResult() {
//         // let results = ['bot', 'human'];
//         let results = ['human'];
//         let result = results[Math.floor(Math.random() * results.length)];
//         // store result in local storage
//         localStorage.setItem('ct-browser-check-result', result);

//         if (document.querySelector('.ct-browser-check-loader')) {
//             document.querySelector('.ct-browser-check-loader').remove();
//         }
//         if (document.querySelector('.ct-browser-check-description')) {
//             document.querySelector('.ct-browser-check-description').remove();
//         }
//         document.querySelector('.ct-browser-check-container').style.height = '50px';

//         // prepare data
//         let title = 'botDetector';
//         let svg = '';
//         let arrowAction = '';
//         switch (result) {
//         case 'bot':
//             console.log('bot');
//             // eslint-disable-next-line no-template-curly-in-string, max-len
//             svg = '<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z" fill="#FF0000"/></svg>';
//             break;
//         case 'human':
//             console.log('human');
//             title = 'The Real Person';
//             // eslint-disable-next-line no-template-curly-in-string, max-len
//             svg = '<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41L9 16.17z" fill="#4CAF50"/></svg>';
//             arrowAction = ' style="cursor: pointer;" onclick="ctBrowserCheckHide();" ';
//             break;
//         }
//         document.querySelector('.ct-browser-check-title').textContent = title;
//         const dev = document.createElement('div');
//         dev.className = 'ct-browser-check-human';
//         dev.innerHTML = `
//             ${svg}
//             <span class="ct-browser-check-human-arrow"${arrowAction}>&gt;</span>
//         `;
//         loaderContainer.appendChild(dev);
//     }

//     document.addEventListener('ctBotDetectorError', function() {
//         console.log('ctBotDetectorError');
//     });

//     // add div with title
//     const title = document.createElement('div');
//     title.className = 'ct-browser-check-title';
//     title.style.cssText = `
//         border-bottom: 1px solid #bbbbbb;
//     `;
//     title.textContent = 'botDetector';
//     loaderContainer.appendChild(title);

//     // Create loader element
//     const loader = document.createElement('div');
//     loader.className = 'ct-browser-check-loader';

//     // Add loader to container and container to body
//     loaderContainer.appendChild(loader);
//     document.body.appendChild(loaderContainer);

//     // add div with description
//     const description = document.createElement('div');
//     description.className = 'ct-browser-check-description';
//     description.style.cssText = `
//         border-top: 1px solid #bbbbbb;
//     `;
//     description.textContent = 'Browser check';
//     loaderContainer.appendChild(description);
// });

// /**
//  * Hide browser check
//  * eslint-disable-next-line no-unused-vars
//  */
// function ctBrowserCheckHide() {
//     document.querySelector('.ct-browser-check-title').textContent = 'TRP';
//     loaderContainer.style.right = '-70px';
//     loaderContainer.style.alignItems = 'left';
//     document.querySelector('.ct-browser-check-title').style.alignItems = 'left';
//     document.querySelector('.ct-browser-check-title').style.width = '40px';
//     document.querySelector('.ct-browser-check-human').style.marginLeft = '-30px';
// }

/**
 * @return {HTMLElement} event
 */
function apbctSetEmailDecoderPopupAnimation() {
  var animationElements = ['apbct_dog_one', 'apbct_dog_two', 'apbct_dog_three'];
  var animationWrapper = document.createElement('div');
  animationWrapper.classList = 'apbct-ee-animation-wrapper';
  for (var i = 0; i < animationElements.length; i++) {
    var apbctEEAnimationDogOne = document.createElement('span');
    apbctEEAnimationDogOne.classList = 'apbct_dog ' + animationElements[i];
    apbctEEAnimationDogOne.innerText = '@';
    animationWrapper.append(apbctEEAnimationDogOne);
  }
  return animationWrapper;
}

/**
 * @param {mixed} event
 */
function ctFillDecodedEmailHandler() {
  var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
  var clickSource = false;
  var ctWlBrandname = '';
  var encodedEmail = '';
  if (typeof ctPublic !== 'undefined') {
    this.removeEventListener('click', ctFillDecodedEmailHandler);
    // remember clickSource
    clickSource = this;
    // globally remember if emails is mixed with mailto
    ctPublic.encodedEmailNodesIsMixed = false;
    ctWlBrandname = ctPublic.wl_brandname;
    encodedEmail = ctPublic.encodedEmailNodes;
  } else if (typeof ctAdminCommon !== 'undefined') {
    ctWlBrandname = ctAdminCommon.plugin_name;
    encodedEmail = ctAdminCommon.encodedEmailNode;
  }

  // get fade
  document.body.classList.add('apbct-popup-fade');
  // popup show
  var encoderPopup = document.getElementById('apbct_popup');
  if (!encoderPopup) {
    // construct popup
    var waitingPopup = document.createElement('div');
    waitingPopup.setAttribute('class', 'apbct-popup apbct-email-encoder-popup');
    waitingPopup.setAttribute('id', 'apbct_popup');

    // construct text header
    var popupHeaderWrapper = document.createElement('span');
    popupHeaderWrapper.classList = 'apbct-email-encoder-elements_center';
    var popupHeader = document.createElement('p');
    popupHeader.innerText = ctWlBrandname;
    popupHeader.setAttribute('class', 'apbct-email-encoder--popup-header');
    popupHeaderWrapper.append(popupHeader);

    // construct text wrapper
    var popupTextWrapper = document.createElement('div');
    popupTextWrapper.setAttribute('id', 'apbct_popup_text');
    popupTextWrapper.setAttribute('class', 'apbct-email-encoder-elements_center');
    popupTextWrapper.style.color = 'black';

    // construct text first node
    // todo make translatable
    var popupTextWaiting = document.createElement('p');
    popupTextWaiting.id = 'apbct_email_ecoder__popup_text_node_first';
    if (typeof ctPublicFunctions !== 'undefined' && ctPublicFunctions.text__ee_wait_for_decoding) {
      popupTextWaiting.innerText = ctPublicFunctions.text__ee_wait_for_decoding;
    } else {
      popupTextWaiting.innerText = ctAdminCommon.text__ee_wait_for_decoding;
    }
    popupTextWaiting.setAttribute('class', 'apbct-email-encoder-elements_center');

    // construct text second node
    // todo make translatable
    var popupTextDecoding = document.createElement('p');
    popupTextDecoding.id = 'apbct_email_ecoder__popup_text_node_second';
    if (typeof ctPublicFunctions !== 'undefined' && ctPublicFunctions.text__ee_decoding_process) {
      popupTextDecoding.innerText = ctPublicFunctions.text__ee_decoding_process;
    } else {
      popupTextDecoding.innerText = ctAdminCommon.text__ee_decoding_process;
    }

    // appending
    popupTextWrapper.append(popupTextWaiting);
    popupTextWrapper.append(popupTextDecoding);
    waitingPopup.append(popupHeaderWrapper);
    waitingPopup.append(popupTextWrapper);
    waitingPopup.append(apbctSetEmailDecoderPopupAnimation());
    document.body.append(waitingPopup);
  } else {
    encoderPopup.setAttribute('style', 'display: inherit');
    if (typeof ctPublicFunctions !== 'undefined' && ctPublicFunctions.text__ee_wait_for_decoding) {
      document.getElementById('apbct_popup_text').innerHTML = ctPublicFunctions.text__ee_wait_for_decoding;
    } else {
      document.getElementById('apbct_popup_text').innerHTML = ctAdminCommon.text__ee_wait_for_decoding;
    }
  }
  apbctAjaxEmailDecodeBulk(event, encodedEmail, clickSource);
}

/**
 * @param {mixed} event
 * @param {mixed} encodedEmailNodes
 * @param {mixed} clickSource
 */
function apbctAjaxEmailDecodeBulk(event, encodedEmailNodes, clickSource) {
  if (event && clickSource) {
    // collect data
    var javascriptClientData = getJavascriptClientData();
    var data = {
      event_javascript_data: javascriptClientData,
      post_url: document.location.href,
      referrer: document.referrer,
      encodedEmails: ''
    };
    var encodedEmailsCollection = {};
    for (var i = 0; i < encodedEmailNodes.length; i++) {
      // disable click for mailto
      if (typeof encodedEmailNodes[i].href !== 'undefined' && encodedEmailNodes[i].href.indexOf('mailto:') === 0) {
        event.preventDefault();
        ctPublic.encodedEmailNodesIsMixed = true;
      }

      // Adding a tooltip
      var apbctTooltip = document.createElement('div');
      apbctTooltip.setAttribute('class', 'apbct-tooltip');
      apbct(encodedEmailNodes[i]).append(apbctTooltip);

      // collect encoded email strings
      encodedEmailsCollection[i] = encodedEmailNodes[i].dataset.originalString;
    }

    // JSONify encoded email strings
    data.encodedEmails = JSON.stringify(encodedEmailsCollection);

    // Using REST API handler
    if (ctPublicFunctions.data__ajax_type === 'rest') {
      apbct_public_sendREST('apbct_decode_email', {
        data: data,
        method: 'POST',
        callback: function callback(result) {
          // set alternative cookie to skip next pages encoding
          ctSetCookie('apbct_email_encoder_passed', ctPublic.emailEncoderPassKey, '');
          apbctEmailEncoderCallbackBulk(result, encodedEmailNodes, clickSource);
        },
        onErrorCallback: function onErrorCallback(res) {
          resetEncodedNodes();
          ctShowDecodeComment(res);
        }
      });

      // Using AJAX request and handler
    } else {
      data.action = 'apbct_decode_email';
      apbct_public_sendAJAX(data, {
        notJson: false,
        callback: function callback(result) {
          console.log('result');
          console.log(result);

          // set alternative cookie to skip next pages encoding
          ctSetCookie('apbct_email_encoder_passed', ctPublic.emailEncoderPassKey, '');
          apbctEmailEncoderCallbackBulk(result, encodedEmailNodes, clickSource);
        },
        onErrorCallback: function onErrorCallback(res) {
          resetEncodedNodes();
          ctShowDecodeComment(res);
        }
      });
    }
  } else {
    var encodedEmail = encodedEmailNodes.dataset.originalString;
    var _data = {
      encodedEmails: JSON.stringify({
        0: encodedEmail
      })
    };

    // Adding a tooltip
    var _apbctTooltip = document.createElement('div');
    _apbctTooltip.setAttribute('class', 'apbct-tooltip');
    encodedEmailNodes.appendChild(_apbctTooltip);
    apbct_admin_sendAJAX({
      'action': 'apbct_decode_email',
      'encodedEmails': _data.encodedEmails
    }, {
      'callback': function callback(result) {
        apbctEmailEncoderCallbackBulk(result, encodedEmailNodes, false);
      },
      'notJson': true
    });
  }
}

/**
 * @param {mixed} result
 * @param {mixed} encodedEmailNodes
 * @param {mixed} clickSource
 */
function apbctEmailEncoderCallbackBulk(result, encodedEmailNodes) {
  var clickSource = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  if (result.success && result.data[0].is_allowed === true) {
    // start process of visual decoding
    setTimeout(function () {
      // popup remove
      var popup = document.getElementById('apbct_popup');
      if (popup !== null) {
        var email = '';
        if (clickSource) {
          var currentResultData;
          result.data.forEach(function (row) {
            if (row.encoded_email === clickSource.dataset.originalString) {
              currentResultData = row;
            }
          });
          email = currentResultData.decoded_email.split(/[&?]/)[0];
        } else {
          email = result.data[0].decoded_email;
        }
        // handle first node
        var firstNode = popup.querySelector('#apbct_email_ecoder__popup_text_node_first');
        // get email selectable by click
        var selectableEmail = document.createElement('b');
        selectableEmail.setAttribute('class', 'apbct-email-encoder-select-whole-email');
        selectableEmail.innerText = email;
        if (typeof ctPublicFunctions !== 'undefined' && ctPublicFunctions.text__ee_click_to_select) {
          selectableEmail.title = ctPublicFunctions.text__ee_click_to_select;
        } else {
          selectableEmail.title = ctAdminCommon.text__ee_click_to_select;
        }
        // add email to the first node
        if (firstNode) {
          if (typeof ctPublicFunctions !== 'undefined' && ctPublicFunctions.text__ee_original_email) {
            firstNode.innerHTML = ctPublicFunctions.text__ee_original_email + '&nbsp;' + selectableEmail.outerHTML;
          } else {
            firstNode.innerHTML = ctAdminCommon.text__ee_original_email + '&nbsp;' + selectableEmail.outerHTML;
          }
          firstNode.setAttribute('style', 'flex-direction: row;');
        }
        // remove animation
        var wrapper = popup.querySelector('.apbct-ee-animation-wrapper');
        if (wrapper) {
          wrapper.remove();
        }
        // remove second node
        var secondNode = popup.querySelector('#apbct_email_ecoder__popup_text_node_second');
        if (secondNode) {
          secondNode.remove();
        }
        // add button
        var buttonWrapper = document.createElement('span');
        buttonWrapper.classList = 'apbct-email-encoder-elements_center top-margin-long';
        if (!document.querySelector('.apbct-email-encoder-got-it-button')) {
          var button = document.createElement('button');
          if (typeof ctPublicFunctions !== 'undefined' && ctPublicFunctions.text__ee_got_it) {
            button.innerText = ctPublicFunctions.text__ee_got_it;
          } else {
            button.innerText = ctAdminCommon.text__ee_got_it;
          }
          button.classList = 'apbct-email-encoder-got-it-button';
          button.addEventListener('click', function () {
            document.body.classList.remove('apbct-popup-fade');
            popup.setAttribute('style', 'display:none');
            fillDecodedNodes(encodedEmailNodes, result);
            // click on mailto if so
            if (typeof ctPublic !== 'undefined' && ctPublic.encodedEmailNodesIsMixed && clickSource) {
              clickSource.click();
            }
          });
          buttonWrapper.append(button);
          popup.append(buttonWrapper);
        }
      }
    }, 3000);
  } else {
    if (clickSource) {
      if (result.success) {
        resetEncodedNodes();
        if (typeof ctPublicFunctions !== 'undefined' && ctPublicFunctions.text__ee_blocked) {
          ctShowDecodeComment(ctPublicFunctions.text__ee_blocked + ': ' + result.data[0].comment);
        } else {
          ctShowDecodeComment(ctAdminCommon.text__ee_blocked + ': ' + result.data[0].comment);
        }
      } else {
        resetEncodedNodes();
        if (typeof ctPublicFunctions !== 'undefined' && ctPublicFunctions.text__ee_cannot_connect) {
          ctShowDecodeComment(ctPublicFunctions.text__ee_cannot_connect + ': ' + result.apbct.comment);
        } else {
          ctShowDecodeComment(ctAdminCommon.text__ee_cannot_connect + ': ' + result.data[0].comment);
        }
      }
    } else {
      console.log('result', result);
    }
  }
}

/**
 * Reset click event for encoded email
 */
function resetEncodedNodes() {
  if (typeof ctPublic.encodedEmailNodes !== 'undefined') {
    ctPublic.encodedEmailNodes.forEach(function (element) {
      element.addEventListener('click', ctFillDecodedEmailHandler);
    });
  }
}

/**
 * Show Decode Comment
 * @param {string} comment
 */
function ctShowDecodeComment(comment) {
  if (!comment) {
    if (typeof ctPublicFunctions !== 'undefined' && ctPublicFunctions.text__ee_cannot_decode) {
      comment = ctPublicFunctions.text__ee_cannot_decode;
    } else {
      comment = ctAdminCommon.text__ee_cannot_decode;
    }
  }
  var popup = document.getElementById('apbct_popup');
  var popupText = document.getElementById('apbct_popup_text');
  if (popup !== null) {
    document.body.classList.remove('apbct-popup-fade');
    if (typeof ctPublicFunctions !== 'undefined' && ctPublicFunctions.text__ee_email_decoder) {
      popupText.innerText = ctPublicFunctions.text__ee_email_decoder + ': ' + comment;
    } else {
      popupText.innerText = ctAdminCommon.text__ee_email_decoder + ': ' + comment;
    }
    setTimeout(function () {
      popup.setAttribute('style', 'display:none');
    }, 3000);
  }
}

/**
 * Run filling for every node with decoding result.
 * @param {mixed} encodedNodes
 * @param {mixed} decodingResult
 */
function fillDecodedNodes(encodedNodes, decodingResult) {
  if (encodedNodes.length > 0) {
    var _loop5 = function _loop5(i) {
        // chek what is what
        var currentResultData;
        decodingResult.data.forEach(function (row) {
          if (row.encoded_email === encodedNodes[i].dataset.originalString) {
            currentResultData = row;
          }
        });
        // quit case on cloud block
        if (currentResultData.is_allowed === false) {
          return {
            v: void 0
          };
        }
        // handler for mailto
        if (typeof encodedNodes[i].href !== 'undefined' && (encodedNodes[i].href.indexOf('mailto:') === 0 || encodedNodes[i].href.indexOf('tel:') === 0)) {
          var linkTypePrefix;
          if (encodedNodes[i].href.indexOf('mailto:') === 0) {
            linkTypePrefix = 'mailto:';
          } else if (encodedNodes[i].href.indexOf('tel:') === 0) {
            linkTypePrefix = 'tel:';
          } else {
            return 0; // continue
          }
          var encodedEmail = encodedNodes[i].href.replace(linkTypePrefix, '');
          var baseElementContent = encodedNodes[i].innerHTML;
          encodedNodes[i].innerHTML = baseElementContent.replace(encodedEmail, currentResultData.decoded_email);
          encodedNodes[i].href = linkTypePrefix + currentResultData.decoded_email;
          encodedNodes[i].querySelectorAll('span.apbct-email-encoder').forEach(function (el) {
            var encodedEmailTextInsideMailto = '';
            decodingResult.data.forEach(function (row) {
              if (row.encoded_email === el.dataset.originalString) {
                encodedEmailTextInsideMailto = row.decoded_email;
              }
            });
            el.innerHTML = encodedEmailTextInsideMailto;
          });
        } else {
          encodedNodes[i].classList.add('no-blur');
          // fill the nodes
          setTimeout(function () {
            ctProcessDecodedDataResult(currentResultData, encodedNodes[i]);
          }, 2000);
        }
        // remove listeners
        encodedNodes[i].removeEventListener('click', ctFillDecodedEmailHandler);
      },
      _ret2;
    for (var i = 0; i < encodedNodes.length; i++) {
      _ret2 = _loop5(i);
      if (_ret2 === 0) continue;
      if (_ret2) return _ret2.v;
    }
  } else {
    var currentResultData = decodingResult.data[0];
    encodedNodes.classList.add('no-blur');
    // fill the nodes
    setTimeout(function () {
      ctProcessDecodedDataResult(currentResultData, encodedNodes);
    }, 2000);
    encodedNodes.removeEventListener('click', ctFillDecodedEmailHandler);
  }
}

/**
 * @param {mixed} response
 * @param {mixed} targetElement
 */
function ctProcessDecodedDataResult(response, targetElement) {
  targetElement.setAttribute('title', '');
  targetElement.removeAttribute('style');
  ctFillDecodedEmail(targetElement, response.decoded_email);
}

/**
 * @param {mixed} target
 * @param {string} email
 */
function ctFillDecodedEmail(target, email) {
  target.innerHTML = target.innerHTML.replace(/.+?(<div class=["']apbct-tooltip["'].+?<\/div>)/, email + '$1');
}